
import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Integer;
import java_cup.runtime.*;

parser code
{:

	public BufferedWriter bw;
	public File file;
	public HashMap<String, String> simbolos_tabla;
	public ArrayList<String> elements = new ArrayList();
	public String resultado="";
	public String lastType;

	/**Metodo al que se llama automaticamente ante algun error sintactico.*/
	public void syntax_error(Symbol s){
			System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
					+ s + " no reconocido. valor " + s.value );
	}
:};

action code
{:

	public void writeTable(String id, String type) throws IOException{
		if (!simbolos_tabla.containsKey(id)) {
			bw.write(id+",ID,"+type+",,");
			bw.newLine();
			bw.flush();
			simbolos_tabla.put(id,type);
		} else {
			throw new IOException("[!ERROR] ID: ["+id+"] se encuentra definido como "+simbolos_tabla.get(id) + ", NO es posible definirlo como " + type);
		}
	}
:};

init with
{:
	try {
		file = new File("../ts.txt");
		bw = new BufferedWriter(new FileWriter(file));
		bw.write("NOMBRE,TOKEN,TIPO,VALOR,LONG");
		bw.newLine();
		bw.flush();
		simbolos_tabla = new HashMap<>();
	} catch (IOException e) {
		e.printStackTrace();
	}
:};

/* terminal IF_UNARIO;*/
terminal DOS_PUNTOS,COMA,ASIGNACION,PUNTO_Y_COMA,ELSE, IGUAL,DISTINTO,MAYOR,MENOR,MAYOR_IGUAL,MENOR_IGUAL,PARENTESIS_ABRE,PARENTESIS_CIERRA,LLAVES_ABRE,LLAVES_CIERRA,AND,OR,SUMA,RESTA,DIVISION,MULTIPLICAION,DISPLAY_FUNCTION,WHILE,IF,DECLARE_SECTION,ENDDECLARE_SECTION,PROGRAM_SECTION,ENDPROGRAM_SECTION,TYPE_STRING,TYPE_INTEGER,TYPE_FLOAT,TYPE_BOOL;
terminal ID,CONST_STRING,CONST_INTEGER,CONST_FLOAT,CONST_BOOL;

non terminal PROGRAM,DECLARE_SC,LISTA_SENTENCIAS,SENTENCIA;
non terminal SENTENCIA_ASSIGN,SENTENCIA_IF,SENTENCIA_WHILE,SENTENCIA_DISPLAY, CONDICION;
non terminal LISTA_DECLARE,DECLARACION,LISTA_IDS;
non terminal EXPRESION,TERMINO,FACTOR;

PROGRAM ::= DECLARE_SC:dv PROGRAM_SECTION LISTA_SENTENCIAS:ls ENDPROGRAM_SECTION
{:
  System.out.println("Programa - Regla 0");
:};

LISTA_SENTENCIAS ::= LISTA_SENTENCIAS:ls SENTENCIA:s {:System.out.println("Sentencias - Regla 1"); :}
                   | SENTENCIA:s {:System.out.println("Sentencias - Regla 2"); :};


SENTENCIA ::= SENTENCIA_ASSIGN PUNTO_Y_COMA {:System.out.println("Sentencia asignacion - Regla 3"); :}
            | SENTENCIA_IF 		  {:System.out.println("Sentencia if - Regla 4"); :}
            | SENTENCIA_WHILE	  {:System.out.println("Sentencia while - Regla 5"); :}
            | SENTENCIA_DISPLAY PUNTO_Y_COMA {:System.out.println("Sentencia DISPLAY - Regla 6"); :};

SENTENCIA_ASSIGN ::= ID:id ASIGNACION EXPRESION
											{:
												String type = simbolos_tabla.get(id);
												if ((type.equals("String")) || (type.equals("Bool"))) {
													throw new RuntimeException("ERROR TIPOS - [" + id+"] esta definida como "+ type +", NO es posible asignar un Float");
												}
											  System.out.println("sentencia id asigna expresion - Regla 7");
											:}
									 | ID:id ASIGNACION CONST_STRING
											{:
											 String type = simbolos_tabla.get(id);
											 if (!type.equals("String")) throw new RuntimeException("ERROR TIPOS - [" + id+"] esta definida como "+ type +", NO es posible asignar un STRING");
											 System.out.println("sentencia id asigna constante string - Regla 8");
											:}
									 | ID:id ASIGNACION CONST_BOOL
									 		{:
												String type = simbolos_tabla.get(id);
 											  if (!type.equals("Bool")) throw new RuntimeException("ERROR TIPOS - [" + id+"] esta definida como "+ type +", NO es posible asignar un BOOL");
											  System.out.println("sentencia id asigna const bool - Regla 9");
											:};


SENTENCIA_IF ::= IF CONDICION:c LLAVES_ABRE LISTA_SENTENCIAS:ls LLAVES_CIERRA {:System.out.println("if + else (lista de sentencias) - Regla 11"); :};

//ELSE LLAVES_ABRE SENTENCIA:ls LLAVES_CIERRA {:System.out.println("if + else (lista de sentencias) - Regla 11"); :};

/*						 | IF CONDICION:c LLAVES_ABRE LISTA_SENTENCIAS:ls LLAVES_CIERRA {:System.out.println("if simple (lista de sentencias) - Regla 13"); :}
							 | IF CONDICION:c SENTENCIA:s ELSE SENTENCIA:s {:System.out.println("if + else (solo una sentencia) - Regla 14"); :}
							 | IF CONDICION:c LLAVES_ABRE LISTA_SENTENCIAS:ls LLAVES_CIERRA ELSE LLAVES_ABRE LISTA_SENTENCIAS:ls LLAVES_CIERRA {:System.out.println("if + else (lista de sentencias) - Regla 15"); :};*/

SENTENCIA_WHILE ::= WHILE CONDICION:c LLAVES_ABRE LISTA_SENTENCIAS:ls LLAVES_CIERRA {:System.out.println("while - Regla 12"); :};

SENTENCIA_DISPLAY ::= DISPLAY_FUNCTION CONST_STRING:cs {:System.out.println("DISPLAY_FUNCTION - Regla 13"); :};

DECLARE_SC ::= DECLARE_SECTION LISTA_DECLARE:l ENDDECLARE_SECTION {:System.out.println("decvar Regla 14"); :};

LISTA_DECLARE ::= LISTA_DECLARE:ls DECLARACION:s {:System.out.println("Lista Declare - Regla 14"); :}
                | DECLARACION:s {:System.out.println("Declaracion simple - Regla 15"); :};

DECLARACION ::= TYPE_STRING:tipo DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA {: lastType = "String"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); System.out.println("Declaracion "+lastType+" - Regla 16");  :}
							| TYPE_INTEGER:tipo DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA{: lastType = "Integer"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); System.out.println("Declaracion "+lastType+" - Regla 17"); :}
							| TYPE_FLOAT:tipo DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA  {: lastType = "Float"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); System.out.println("Declaracion "+lastType+" - Regla 18"); :}
							| TYPE_BOOL:tipo DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA   {: lastType = "Bool"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); System.out.println("Declaracion "+lastType+" - Regla 19"); :};


LISTA_IDS ::= LISTA_IDS COMA ID:id {: elements.add((String)id); System.out.println("Lista ID Declaracion - Regla 20"); :}
						| ID:id {: elements.add((String)id); System.out.println("ID Simple Declaracion - Regla 21"); :};

CONDICION ::= PARENTESIS_ABRE CONDICION OR CONDICION PARENTESIS_CIERRA 	{:System.out.println("Condicion AND Condicion -  Regla 22"); :}
						| PARENTESIS_ABRE CONDICION AND CONDICION PARENTESIS_CIERRA 		{:System.out.println("Condicion OR Condicion -  Regla 23"); :}
						| PARENTESIS_ABRE CONST_STRING IGUAL:op CONST_STRING PARENTESIS_CIERRA	{:System.out.println("Condicion CONST_STRING IGUAL:op CONST_STRING Regla 24"); :}
						| PARENTESIS_ABRE CONST_STRING DISTINTO:op CONST_STRING PARENTESIS_CIERRA	{:System.out.println("Condicion CONST_STRING IGUA CONST_STRING Regla 25"); :}
						| PARENTESIS_ABRE FACTOR IGUAL	FACTOR PARENTESIS_CIERRA	{:System.out.println("Condicion FACTOR igual FACTOR - Regla 26"); :}
						| PARENTESIS_ABRE FACTOR DISTINTO	FACTOR PARENTESIS_CIERRA	{:System.out.println("Condicion FACTOR DISTINTO FACTOR - Regla 27"); :}
						| PARENTESIS_ABRE FACTOR MAYOR	FACTOR PARENTESIS_CIERRA	{:System.out.println("Condicion FACTOR mayor FACTOR - Regla 28"); :}
						| PARENTESIS_ABRE FACTOR MENOR	FACTOR PARENTESIS_CIERRA	{:System.out.println("Condicion FACTOR menor FACTOR - Regla 29"); :}
						| PARENTESIS_ABRE FACTOR MAYOR_IGUAL	FACTOR PARENTESIS_CIERRA	{:System.out.println("Condicion FACTOR mayor igual FACTOR  - Regla 30"); :}
						| PARENTESIS_ABRE FACTOR MENOR_IGUAL	FACTOR PARENTESIS_CIERRA	{:System.out.println("Condicion FACTOR menor igual FACTOR - Regla 31"); :}
						| PARENTESIS_ABRE CONST_BOOL IGUAL	CONST_BOOL PARENTESIS_CIERRA	{:System.out.println("Condicion CONST_BOOL igual CONST_BOOL - Regla 31"); :};


EXPRESION ::= EXPRESION:a SUMA TERMINO:b {: System.out.println("E+T - Regla 33");RESULT=(Float)a+(Float)b; :}
						| EXPRESION:a RESTA TERMINO:b  {:System.out.println("E-T - Regla 34");RESULT=(Float)a-(Float)b;:}
						| TERMINO:a  {:System.out.println("Termino Regla 35");RESULT=a;:};


TERMINO ::= TERMINO:a MULTIPLICAION FACTOR:b {: System.out.println("T*F - Regla 36");RESULT=(Float)a*(Float)b;:}
					| TERMINO:a DIVISION FACTOR:b {: System.out.println("T/F - Regla 37");RESULT=(Float)a/(Float)b;:}
					| FACTOR:a {:System.out.println("Factor - Regla 38");RESULT=a;:};


FACTOR ::= ID {:System.out.println("Factor ID - Regla 39");:}
				 | CONST_INTEGER {:System.out.println("Factor CONST_INT - Regla 40");:}
				 | CONST_FLOAT {:System.out.println("Factor CONST_FLOAT - Regla 41");:}
				 | PARENTESIS_ABRE EXPRESION:e PARENTESIS_CIERRA {:System.out.println("Factor Regla 42");:};
