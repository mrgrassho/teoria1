
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Integer;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\006\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\007\007\000\002" +
    "\010\007\000\002\011\004\000\002\003\005\000\002\013" +
    "\004\000\002\013\003\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\015\005\000" +
    "\002\015\003\000\002\012\007\000\002\012\007\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\012\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\007\000\002\016\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\034\005\001\002\000\004\036\037\001" +
    "\002\000\012\040\011\041\014\042\010\043\013\001\002" +
    "\000\004\002\007\001\002\000\004\002\000\001\002\000" +
    "\004\004\034\001\002\000\004\004\031\001\002\000\014" +
    "\035\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\001\002\000" +
    "\004\004\026\001\002\000\004\004\020\001\002\000\014" +
    "\035\016\040\011\041\014\042\010\043\013\001\002\000" +
    "\004\036\ufff3\001\002\000\014\035\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\001\002\000\004\044\021\001\002\000" +
    "\006\005\uffeb\007\uffeb\001\002\000\006\005\023\007\024" +
    "\001\002\000\004\044\025\001\002\000\014\035\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\001\002\000\006\005\uffec" +
    "\007\uffec\001\002\000\004\044\021\001\002\000\006\005" +
    "\023\007\030\001\002\000\014\035\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\001\002\000\004\044\021\001\002\000" +
    "\006\005\023\007\033\001\002\000\014\035\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\001\002\000\004\044\021\001" +
    "\002\000\006\005\023\007\036\001\002\000\014\035\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\001\002\000\012\031" +
    "\045\032\040\033\046\044\050\001\002\000\004\017\101" +
    "\001\002\000\016\022\ufffc\031\ufffc\032\ufffc\033\ufffc\037" +
    "\ufffc\044\ufffc\001\002\000\004\007\156\001\002\000\004" +
    "\007\155\001\002\000\016\022\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\037\ufffe\044\ufffe\001\002\000\004\045\154\001\002" +
    "\000\004\017\101\001\002\000\016\022\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\037\ufffb\044\ufffb\001\002\000\004\006\054" +
    "\001\002\000\014\031\045\032\040\033\046\037\052\044" +
    "\050\001\002\000\004\002\001\001\002\000\016\022\uffff" +
    "\031\uffff\032\uffff\033\uffff\037\uffff\044\uffff\001\002\000" +
    "\016\017\061\044\063\045\056\046\062\047\060\050\057" +
    "\001\002\000\016\007\uffda\020\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\001\002\000\004\007\ufff8\001\002\000\004" +
    "\007\ufff7\001\002\000\032\007\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\001\002\000\012\017\061\044\063\046" +
    "\062\047\060\001\002\000\032\007\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\001\002\000\032\007\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\001\002\000\016\007\uffdd" +
    "\020\uffdd\025\uffdd\026\uffdd\027\072\030\071\001\002\000" +
    "\010\007\ufff9\025\067\026\066\001\002\000\012\017\061" +
    "\044\063\046\062\047\060\001\002\000\012\017\061\044" +
    "\063\046\062\047\060\001\002\000\016\007\uffdf\020\uffdf" +
    "\025\uffdf\026\uffdf\027\072\030\071\001\002\000\012\017" +
    "\061\044\063\046\062\047\060\001\002\000\012\017\061" +
    "\044\063\046\062\047\060\001\002\000\016\007\uffdb\020" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\001\002\000\016" +
    "\007\uffdc\020\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\001" +
    "\002\000\016\007\uffde\020\uffde\025\uffde\026\uffde\027\072" +
    "\030\071\001\002\000\010\020\077\025\067\026\066\001" +
    "\002\000\032\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\020\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\001\002\000\004\021\151\001\002\000\016\017\106" +
    "\044\063\045\104\046\062\047\060\050\105\001\002\000" +
    "\016\011\110\012\111\013\113\014\112\015\115\016\114" +
    "\001\002\000\006\023\143\024\144\001\002\000\006\011" +
    "\135\012\136\001\002\000\004\011\132\001\002\000\016" +
    "\017\106\044\063\045\104\046\062\047\060\050\105\001" +
    "\002\000\030\011\110\012\111\013\113\014\112\015\115" +
    "\016\114\020\uffda\025\uffda\026\uffda\027\uffda\030\uffda\001" +
    "\002\000\012\017\061\044\063\046\062\047\060\001\002" +
    "\000\012\017\061\044\063\046\062\047\060\001\002\000" +
    "\012\017\061\044\063\046\062\047\060\001\002\000\012" +
    "\017\061\044\063\046\062\047\060\001\002\000\012\017" +
    "\061\044\063\046\062\047\060\001\002\000\012\017\061" +
    "\044\063\046\062\047\060\001\002\000\004\020\117\001" +
    "\002\000\012\020\uffe2\021\uffe2\023\uffe2\024\uffe2\001\002" +
    "\000\004\020\121\001\002\000\012\020\uffe1\021\uffe1\023" +
    "\uffe1\024\uffe1\001\002\000\004\020\123\001\002\000\012" +
    "\020\uffe4\021\uffe4\023\uffe4\024\uffe4\001\002\000\004\020" +
    "\125\001\002\000\012\020\uffe3\021\uffe3\023\uffe3\024\uffe3" +
    "\001\002\000\004\020\127\001\002\000\012\020\uffe5\021" +
    "\uffe5\023\uffe5\024\uffe5\001\002\000\004\020\131\001\002" +
    "\000\012\020\uffe6\021\uffe6\023\uffe6\024\uffe6\001\002\000" +
    "\004\050\133\001\002\000\004\020\134\001\002\000\012" +
    "\020\uffe0\021\uffe0\023\uffe0\024\uffe0\001\002\000\004\045" +
    "\141\001\002\000\004\045\137\001\002\000\004\020\140" +
    "\001\002\000\012\020\uffe7\021\uffe7\023\uffe7\024\uffe7\001" +
    "\002\000\004\020\142\001\002\000\012\020\uffe8\021\uffe8" +
    "\023\uffe8\024\uffe8\001\002\000\004\017\101\001\002\000" +
    "\004\017\101\001\002\000\004\020\146\001\002\000\012" +
    "\020\uffea\021\uffea\023\uffea\024\uffea\001\002\000\004\020" +
    "\150\001\002\000\012\020\uffe9\021\uffe9\023\uffe9\024\uffe9" +
    "\001\002\000\012\031\045\032\040\033\046\044\050\001" +
    "\002\000\014\022\153\031\045\032\040\033\046\044\050" +
    "\001\002\000\016\022\ufff6\031\ufff6\032\ufff6\033\ufff6\037" +
    "\ufff6\044\ufff6\001\002\000\004\007\ufff4\001\002\000\016" +
    "\022\ufffa\031\ufffa\032\ufffa\033\ufffa\037\ufffa\044\ufffa\001" +
    "\002\000\016\022\ufffd\031\ufffd\032\ufffd\033\ufffd\037\ufffd" +
    "\044\ufffd\001\002\000\004\021\160\001\002\000\012\031" +
    "\045\032\040\033\046\044\050\001\002\000\014\022\162" +
    "\031\045\032\040\033\046\044\050\001\002\000\016\022" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\037\ufff5\044\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\006\013\014\014\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\050\005\043\006\041\007\040\010" +
    "\046\011\042\001\001\000\004\012\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\052\006\041\007" +
    "\040\010\046\011\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\064\017\063\020\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\075\017\063\020\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\074\020\054\001\001\000\006\017" +
    "\067\020\054\001\001\000\002\001\001\000\004\020\073" +
    "\001\001\000\004\020\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\102\020\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\102\016\075\017\063\020" +
    "\106\001\001\000\002\001\001\000\004\020\127\001\001" +
    "\000\004\020\125\001\001\000\004\020\123\001\001\000" +
    "\004\020\121\001\001\000\004\020\117\001\001\000\004" +
    "\020\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\146\001\001\000\004\012\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\151\005\043\006\041\007\040\010\046\011\042" +
    "\001\001\000\014\005\052\006\041\007\040\010\046\011" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\160\005\043\006\041\007\040\010\046\011\042\001\001" +
    "\000\014\005\052\006\041\007\040\010\046\011\042\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	try {
		file = new File("../ts.txt");
		bw = new BufferedWriter(new FileWriter(file));
		bw.write("NOMBRE,TOKEN,TIPO,VALOR,LONG");
		bw.newLine();
		bw.flush();
		simbolos_tabla = new HashMap<>();
	} catch (IOException e) {
		e.printStackTrace();
	}

    }



	public BufferedWriter bw;
	public File file;
	public HashMap<String, String> simbolos_tabla;
	public ArrayList<String> elements = new ArrayList();
	public String resultado="";
	public String lastType;

	/**Metodo al que se llama automaticamente ante algun error sintactico.*/
	public void syntax_error(Symbol s){
			System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
					+ s + " no reconocido. valor " + s.value );
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



	public void writeTable(String id, String type) throws IOException{
		if (!simbolos_tabla.containsKey(id)) {
			bw.write(id+",ID,"+type+",,");
			bw.newLine();
			bw.flush();
			simbolos_tabla.put(id,type);
		} else {
			throw new IOException("[!ERROR] ID: ["+id+"] se encuentra definido como "+simbolos_tabla.get(id) + ", NO es posible definirlo como " + type);
		}
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= DECLARE_SC PROGRAM_SECTION LISTA_SENTENCIAS ENDPROGRAM_SECTION 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
  System.out.println("Programa - Regla 0");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA_ASSIGN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		System.out.println("Sentencia asignacion - Regla 3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;
		System.out.println("Sentencia if - Regla 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;
		System.out.println("Sentencia while - Regla 5"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA_DISPLAY PUNTO_Y_COMA 
            {
              Object RESULT =null;
		System.out.println("Sentencia DISPLAY - Regla 6"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA_ASSIGN ::= ID ASIGNACION EXPRESION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
												String type = simbolos_tabla.get(id);
												if ((type.equals("String")) || (type.equals("Bool"))) {
													throw new RuntimeException("ERROR TIPOS - [" + id+"] esta definida como "+ type +", NO es posible asignar un Float");
												}
											  System.out.println("sentencia id asigna expresion - Regla 7");
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA_ASSIGN ::= ID ASIGNACION CONST_STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											 String type = simbolos_tabla.get(id);
											 if (!type.equals("String")) throw new RuntimeException("ERROR TIPOS - [" + id+"] esta definida como "+ type +", NO es posible asignar un STRING");
											 System.out.println("sentencia id asigna constante string - Regla 8");
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA_ASSIGN ::= ID ASIGNACION CONST_BOOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
												String type = simbolos_tabla.get(id);
 											  if (!type.equals("Bool")) throw new RuntimeException("ERROR TIPOS - [" + id+"] esta definida como "+ type +", NO es posible asignar un BOOL");
											  System.out.println("sentencia id asigna const bool - Regla 9");
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA_IF ::= IF CONDICION LLAVES_ABRE LISTA_SENTENCIAS LLAVES_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("if + else (lista de sentencias) - Regla 11"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA_WHILE ::= WHILE CONDICION LLAVES_ABRE LISTA_SENTENCIAS LLAVES_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("while - Regla 12"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA_DISPLAY ::= DISPLAY_FUNCTION CONST_STRING 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("DISPLAY_FUNCTION - Regla 13"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DISPLAY",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARE_SC ::= DECLARE_SECTION LISTA_DECLARE ENDDECLARE_SECTION 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("decvar Regla 14"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE_SC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_DECLARE ::= LISTA_DECLARE DECLARACION 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Lista Declare - Regla 14"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_DECLARE ::= DECLARACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Declaracion simple - Regla 15"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= TYPE_STRING DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = "String"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); System.out.println("Declaracion "+lastType+" - Regla 16");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= TYPE_INTEGER DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = "Integer"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); System.out.println("Declaracion "+lastType+" - Regla 17"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= TYPE_FLOAT DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = "Float"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); System.out.println("Declaracion "+lastType+" - Regla 18"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= TYPE_BOOL DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = "Bool"; for (String e : elements) { writeTable(e,lastType); } elements = new ArrayList(); System.out.println("Declaracion "+lastType+" - Regla 19"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_IDS ::= LISTA_IDS COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 elements.add((String)id); System.out.println("Lista ID Declaracion - Regla 20"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_IDS ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 elements.add((String)id); System.out.println("ID Simple Declaracion - Regla 21"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONDICION ::= PARENTESIS_ABRE CONDICION OR CONDICION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion AND Condicion -  Regla 22"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDICION ::= PARENTESIS_ABRE CONDICION AND CONDICION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion OR Condicion -  Regla 23"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONDICION ::= PARENTESIS_ABRE CONST_STRING IGUAL CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion CONST_STRING IGUAL:op CONST_STRING Regla 24"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDICION ::= PARENTESIS_ABRE CONST_STRING DISTINTO CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion CONST_STRING IGUA CONST_STRING Regla 25"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDICION ::= PARENTESIS_ABRE FACTOR IGUAL FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion FACTOR igual FACTOR - Regla 26"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDICION ::= PARENTESIS_ABRE FACTOR DISTINTO FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion FACTOR DISTINTO FACTOR - Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICION ::= PARENTESIS_ABRE FACTOR MAYOR FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion FACTOR mayor FACTOR - Regla 28"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICION ::= PARENTESIS_ABRE FACTOR MENOR FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion FACTOR menor FACTOR - Regla 29"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= PARENTESIS_ABRE FACTOR MAYOR_IGUAL FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion FACTOR mayor igual FACTOR  - Regla 30"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= PARENTESIS_ABRE FACTOR MENOR_IGUAL FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion FACTOR menor igual FACTOR - Regla 31"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= PARENTESIS_ABRE CONST_BOOL IGUAL CONST_BOOL PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion CONST_BOOL igual CONST_BOOL - Regla 31"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION SUMA TERMINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("E+T - Regla 33");RESULT=(Float)a+(Float)b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION RESTA TERMINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("E-T - Regla 34");RESULT=(Float)a-(Float)b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Termino Regla 35");RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TERMINO ::= TERMINO MULTIPLICAION FACTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("T*F - Regla 36");RESULT=(Float)a*(Float)b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TERMINO ::= TERMINO DIVISION FACTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("T/F - Regla 37");RESULT=(Float)a/(Float)b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Factor - Regla 38");RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= ID 
            {
              Object RESULT =null;
		System.out.println("Factor ID - Regla 39");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FACTOR ::= CONST_INTEGER 
            {
              Object RESULT =null;
		System.out.println("Factor CONST_INT - Regla 40");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FACTOR ::= CONST_FLOAT 
            {
              Object RESULT =null;
		System.out.println("Factor CONST_FLOAT - Regla 41");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTOR ::= PARENTESIS_ABRE EXPRESION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Factor Regla 42");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
