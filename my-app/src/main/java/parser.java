
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Integer;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\006\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\007\005\000\002" +
    "\010\007\000\002\011\004\000\002\003\005\000\002\013" +
    "\004\000\002\013\003\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\015\005\000" +
    "\002\015\003\000\002\012\007\000\002\012\007\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\012\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\007\000\002\012\007\000" +
    "\002\012\007\000\002\012\007\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\035\004\001\002\000\004\033\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\012\030\045\031\040\032\046\043\050\001\002\000" +
    "\012\037\012\040\015\041\011\042\014\001\002\000\004" +
    "\004\035\001\002\000\004\004\032\001\002\000\014\034" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\001\002\000\004" +
    "\004\027\001\002\000\004\004\021\001\002\000\014\034" +
    "\017\037\012\040\015\041\011\042\014\001\002\000\012" +
    "\030\ufff3\031\ufff3\032\ufff3\043\ufff3\001\002\000\014\034" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\001\002\000\004" +
    "\043\022\001\002\000\006\005\uffeb\007\uffeb\001\002\000" +
    "\006\005\024\007\025\001\002\000\004\043\026\001\002" +
    "\000\014\034\uffef\037\uffef\040\uffef\041\uffef\042\uffef\001" +
    "\002\000\006\005\uffec\007\uffec\001\002\000\004\043\022" +
    "\001\002\000\006\005\024\007\031\001\002\000\014\034" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\001\002\000\004" +
    "\043\022\001\002\000\006\005\024\007\034\001\002\000" +
    "\014\034\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\001\002" +
    "\000\004\043\022\001\002\000\006\005\024\007\037\001" +
    "\002\000\014\034\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\001\002\000\004\016\101\001\002\000\016\021\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\036\ufffc\043\ufffc\001\002\000\004" +
    "\007\164\001\002\000\004\007\163\001\002\000\016\021" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\036\ufffe\043\ufffe\001\002" +
    "\000\004\044\162\001\002\000\004\016\101\001\002\000" +
    "\016\021\ufffb\030\ufffb\031\ufffb\032\ufffb\036\ufffb\043\ufffb" +
    "\001\002\000\004\006\054\001\002\000\014\030\045\031" +
    "\040\032\046\036\052\043\050\001\002\000\004\002\001" +
    "\001\002\000\016\021\uffff\030\uffff\031\uffff\032\uffff\036" +
    "\uffff\043\uffff\001\002\000\016\016\061\043\063\044\056" +
    "\045\062\046\060\047\057\001\002\000\016\007\uffd7\017" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\001\002\000\004" +
    "\007\ufff8\001\002\000\004\007\ufff7\001\002\000\032\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\017\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\001\002\000" +
    "\012\016\061\043\063\045\062\046\060\001\002\000\032" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\017\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\001\002" +
    "\000\032\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\017\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\001\002\000\016\007\uffda\017\uffda\024\uffda\025\uffda\026" +
    "\072\027\071\001\002\000\010\007\ufff9\024\067\025\066" +
    "\001\002\000\012\016\061\043\063\045\062\046\060\001" +
    "\002\000\012\016\061\043\063\045\062\046\060\001\002" +
    "\000\016\007\uffdc\017\uffdc\024\uffdc\025\uffdc\026\072\027" +
    "\071\001\002\000\012\016\061\043\063\045\062\046\060" +
    "\001\002\000\012\016\061\043\063\045\062\046\060\001" +
    "\002\000\016\007\uffd8\017\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\001\002\000\016\007\uffd9\017\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\001\002\000\016\007\uffdb\017\uffdb" +
    "\024\uffdb\025\uffdb\026\072\027\071\001\002\000\010\017" +
    "\077\024\067\025\066\001\002\000\032\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\001\002\000\012\030\045" +
    "\031\040\032\046\043\050\001\002\000\014\016\105\043" +
    "\063\044\104\045\062\046\060\001\002\000\016\010\107" +
    "\011\110\012\112\013\111\014\114\015\113\001\002\000" +
    "\006\022\153\023\154\001\002\000\016\010\131\011\132" +
    "\012\134\013\133\014\136\015\135\001\002\000\014\016" +
    "\105\043\063\044\104\045\062\046\060\001\002\000\030" +
    "\010\107\011\110\012\112\013\111\014\114\015\113\017" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\001\002\000\012" +
    "\016\061\043\063\045\062\046\060\001\002\000\012\016" +
    "\061\043\063\045\062\046\060\001\002\000\012\016\061" +
    "\043\063\045\062\046\060\001\002\000\012\016\061\043" +
    "\063\045\062\046\060\001\002\000\012\016\061\043\063" +
    "\045\062\046\060\001\002\000\012\016\061\043\063\045" +
    "\062\046\060\001\002\000\004\017\116\001\002\000\022" +
    "\017\uffde\020\uffde\022\uffde\023\uffde\030\uffde\031\uffde\032" +
    "\uffde\043\uffde\001\002\000\004\017\120\001\002\000\022" +
    "\017\uffdd\020\uffdd\022\uffdd\023\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\043\uffdd\001\002\000\004\017\122\001\002\000\022" +
    "\017\uffe0\020\uffe0\022\uffe0\023\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\043\uffe0\001\002\000\004\017\124\001\002\000\022" +
    "\017\uffdf\020\uffdf\022\uffdf\023\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\043\uffdf\001\002\000\004\017\126\001\002\000\022" +
    "\017\uffe1\020\uffe1\022\uffe1\023\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\043\uffe1\001\002\000\004\017\130\001\002\000\022" +
    "\017\uffe2\020\uffe2\022\uffe2\023\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\043\uffe2\001\002\000\004\044\151\001\002\000\004" +
    "\044\147\001\002\000\004\044\145\001\002\000\004\044" +
    "\143\001\002\000\004\044\141\001\002\000\004\044\137" +
    "\001\002\000\004\017\140\001\002\000\022\017\uffe4\020" +
    "\uffe4\022\uffe4\023\uffe4\030\uffe4\031\uffe4\032\uffe4\043\uffe4" +
    "\001\002\000\004\017\142\001\002\000\022\017\uffe3\020" +
    "\uffe3\022\uffe3\023\uffe3\030\uffe3\031\uffe3\032\uffe3\043\uffe3" +
    "\001\002\000\004\017\144\001\002\000\022\017\uffe6\020" +
    "\uffe6\022\uffe6\023\uffe6\030\uffe6\031\uffe6\032\uffe6\043\uffe6" +
    "\001\002\000\004\017\146\001\002\000\022\017\uffe5\020" +
    "\uffe5\022\uffe5\023\uffe5\030\uffe5\031\uffe5\032\uffe5\043\uffe5" +
    "\001\002\000\004\017\150\001\002\000\022\017\uffe7\020" +
    "\uffe7\022\uffe7\023\uffe7\030\uffe7\031\uffe7\032\uffe7\043\uffe7" +
    "\001\002\000\004\017\152\001\002\000\022\017\uffe8\020" +
    "\uffe8\022\uffe8\023\uffe8\030\uffe8\031\uffe8\032\uffe8\043\uffe8" +
    "\001\002\000\004\016\101\001\002\000\004\016\101\001" +
    "\002\000\004\017\156\001\002\000\022\017\uffea\020\uffea" +
    "\022\uffea\023\uffea\030\uffea\031\uffea\032\uffea\043\uffea\001" +
    "\002\000\004\017\160\001\002\000\022\017\uffe9\020\uffe9" +
    "\022\uffe9\023\uffe9\030\uffe9\031\uffe9\032\uffe9\043\uffe9\001" +
    "\002\000\016\021\ufff6\030\ufff6\031\ufff6\032\ufff6\036\ufff6" +
    "\043\ufff6\001\002\000\004\007\ufff4\001\002\000\016\021" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\036\ufffa\043\ufffa\001\002" +
    "\000\016\021\ufffd\030\ufffd\031\ufffd\032\ufffd\036\ufffd\043" +
    "\ufffd\001\002\000\004\020\166\001\002\000\012\030\045" +
    "\031\040\032\046\043\050\001\002\000\014\021\170\030" +
    "\045\031\040\032\046\043\050\001\002\000\016\021\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\036\ufff5\043\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\002\004\001\001\000\004\003\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\050" +
    "\005\043\006\041\007\040\010\046\011\042\001\001\000" +
    "\006\013\015\014\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\052\006\041\007" +
    "\040\010\046\011\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\064\017\063\020\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\075\017\063\020\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\074\020\054\001\001\000\006\017" +
    "\067\020\054\001\001\000\002\001\001\000\004\020\073" +
    "\001\001\000\004\020\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\160\006\041\007\040\010\046\011" +
    "\042\001\001\000\006\012\102\020\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\102\016\075\017\063\020\105\001\001\000\002\001\001" +
    "\000\004\020\126\001\001\000\004\020\124\001\001\000" +
    "\004\020\122\001\001\000\004\020\120\001\001\000\004" +
    "\020\116\001\001\000\004\020\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\156\001\001\000\004\012\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\166" +
    "\005\043\006\041\007\040\010\046\011\042\001\001\000" +
    "\014\005\052\006\041\007\040\010\046\011\042\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	try {
		file = new File("../ts.txt");
		bw = new BufferedWriter(new FileWriter(file));
		bw.write("NOMBRE,TOKEN,TIPO,VALOR,LONG");
		bw.newLine();
		bw.flush();
		simbolos = new ArrayList<>();
	} catch (IOException e) {
		e.printStackTrace();
	}

    }


	public BufferedWriter  bw;
	public File file;
	public ArrayList<String> simbolos;
	public String resultado="";
	public String lastType;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	public void writeTable(String str) throws IOException{
		if (!simbolos.contains(str.split(",")[0])) {
			bw.write(str);
			bw.newLine();
			bw.flush();
			simbolos.add(str.split(",")[0]);
		}
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= PROGRAM_SECTION DECLARE_SC LISTA_SENTENCIAS ENDPROGRAM_SECTION 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
  System.out.println("Program - Regla 0");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA_ASSIGN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		System.out.println("Sentencia asignacion - Regla 3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;
		System.out.println("Sentencia if - Regla 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;
		System.out.println("Sentencia while - Regla 5"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA_DISPLAY PUNTO_Y_COMA 
            {
              Object RESULT =null;
		System.out.println("Sentencia DISPLAY - Regla 6"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA_ASSIGN ::= ID ASIGNACION EXPRESION 
            {
              Object RESULT =null;
		System.out.println("sentencia id asigna expresion - Regla 7"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA_ASSIGN ::= ID ASIGNACION CONST_STRING 
            {
              Object RESULT =null;
		System.out.println("sentencia id asigna constante string - Regla 8"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA_ASSIGN ::= ID ASIGNACION CONST_BOOL 
            {
              Object RESULT =null;
		System.out.println("sentencia id asigna const bool - Regla 11"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA_IF ::= IF CONDICION SENTENCIA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("if simple (solo una sentencia)  - Regla 12"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA_WHILE ::= WHILE CONDICION LLAVES_ABRE LISTA_SENTENCIAS LLAVES_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("while - Regla 16"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA_DISPLAY ::= DISPLAY_FUNCTION CONST_STRING 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("DISPLAY_FUNCTION - Regla 17"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DISPLAY",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARE_SC ::= DECLARE_SECTION LISTA_DECLARE ENDDECLARE_SECTION 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("decvar Regla 14"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE_SC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_DECLARE ::= LISTA_DECLARE DECLARACION 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_DECLARE ::= DECLARACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= TYPE_STRING DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = (String)tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= TYPE_INTEGER DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = (String)tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= TYPE_FLOAT DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = (String)tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= TYPE_BOOL DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = (String)tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_IDS ::= LISTA_IDS COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 writeTable(id+",ID,"+lastType+",,"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_IDS ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 writeTable(id+",ID,"+lastType+",,"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONDICION ::= PARENTESIS_ABRE CONDICION OR CONDICION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDICION ::= PARENTESIS_ABRE CONDICION AND CONDICION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONDICION ::= PARENTESIS_ABRE CONST_STRING IGUAL CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDICION ::= PARENTESIS_ABRE CONST_STRING DISTINTO CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDICION ::= PARENTESIS_ABRE CONST_STRING MAYOR CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDICION ::= PARENTESIS_ABRE CONST_STRING MENOR CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICION ::= PARENTESIS_ABRE CONST_STRING MAYOR_IGUAL CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICION ::= PARENTESIS_ABRE CONST_STRING MENOR_IGUAL CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= PARENTESIS_ABRE FACTOR IGUAL FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= PARENTESIS_ABRE FACTOR DISTINTO FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= PARENTESIS_ABRE FACTOR MAYOR FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= PARENTESIS_ABRE FACTOR MENOR FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= PARENTESIS_ABRE FACTOR MAYOR_IGUAL FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION ::= PARENTESIS_ABRE FACTOR MENOR_IGUAL FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION SUMA TERMINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("E+T - Regla 33");RESULT=(Float)a+(Float)b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION RESTA TERMINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("E-T - Regla 34");RESULT=(Float)a-(Float)b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Termino Regla 35");RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TERMINO ::= TERMINO MULTIPLICAION FACTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("T*F - Regla 36");RESULT=(Float)a*(Float)b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TERMINO ::= TERMINO DIVISION FACTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("T/F - Regla 37");RESULT=(Float)a/(Float)b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Factor Regla 38");RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTOR ::= ID 
            {
              Object RESULT =null;
		System.out.println("Factor ID - Regla 38");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FACTOR ::= CONST_INTEGER 
            {
              Object RESULT =null;
		System.out.println("Factor CONST_INT - Regla 38");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FACTOR ::= CONST_FLOAT 
            {
              Object RESULT =null;
		System.out.println("Factor CONST_FLOAT - Regla 38");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTOR ::= PARENTESIS_ABRE EXPRESION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Factor Regla 38");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
