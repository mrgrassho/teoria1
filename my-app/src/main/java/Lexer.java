/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/matiasrolon/Documentos/Universidad/2019/2do Cuatrimestre/Teoria de la Computacion I/TP Integrador/teoria1/my-app/src/main/jflex/Lexico1.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\40\1\3\1\2\1\0\1\3\1\1\16\40\4\0\1\14\1\33"+
    "\1\23\1\0\1\37\1\0\1\35\1\0\1\6\1\7\1\25\1\0"+
    "\2\0\1\26\1\0\1\24\11\24\1\0\1\41\1\34\1\32\1\34"+
    "\2\0\1\47\2\22\1\42\4\22\1\43\2\22\1\46\3\22\1\45"+
    "\2\22\1\44\5\22\1\50\1\22\4\0\1\37\1\0\1\31\1\22"+
    "\1\22\1\20\1\12\1\5\1\22\1\11\1\4\2\22\1\15\1\22"+
    "\1\13\1\21\2\22\1\27\1\16\1\10\1\30\1\22\1\17\3\22"+
    "\1\0\1\36\2\0\41\40\2\0\4\37\4\0\1\37\2\0\1\40"+
    "\7\0\1\37\4\0\1\37\5\0\27\37\1\0\37\37\1\0\u01ca\37"+
    "\4\0\14\37\16\0\5\37\7\0\1\37\1\0\1\37\21\0\160\40"+
    "\5\37\1\0\2\37\2\0\4\37\1\0\1\37\6\0\1\37\1\0"+
    "\3\37\1\0\1\37\1\0\24\37\1\0\123\37\1\0\213\37\1\0"+
    "\5\40\2\0\246\37\1\0\46\37\2\0\1\37\7\0\47\37\7\0"+
    "\1\37\1\0\55\40\1\0\1\40\1\0\2\40\1\0\2\40\1\0"+
    "\1\40\10\0\33\37\5\0\3\37\15\0\6\40\5\0\1\37\4\0"+
    "\13\40\1\0\1\40\3\0\53\37\37\40\4\0\2\37\1\40\143\37"+
    "\1\0\1\37\10\40\1\0\6\40\2\37\2\40\1\0\4\40\2\37"+
    "\12\40\3\37\2\0\1\37\17\0\1\40\1\37\1\40\36\37\33\40"+
    "\2\0\131\37\13\40\1\37\16\0\12\40\41\37\11\40\2\37\4\0"+
    "\1\37\5\0\26\37\4\40\1\37\11\40\1\37\3\40\1\37\5\40"+
    "\22\0\31\37\3\40\4\0\13\37\65\0\25\37\1\0\10\37\26\0"+
    "\60\40\66\37\3\40\1\37\22\40\1\37\7\40\12\37\2\40\2\0"+
    "\12\40\1\0\20\37\3\40\1\0\10\37\2\0\2\37\2\0\26\37"+
    "\1\0\7\37\1\0\1\37\3\0\4\37\2\0\1\40\1\37\7\40"+
    "\2\0\2\40\2\0\3\40\1\37\10\0\1\40\4\0\2\37\1\0"+
    "\3\37\2\40\2\0\12\40\4\37\7\0\2\37\4\0\3\40\1\0"+
    "\6\37\4\0\2\37\2\0\26\37\1\0\7\37\1\0\2\37\1\0"+
    "\2\37\1\0\2\37\2\0\1\40\1\0\5\40\4\0\2\40\2\0"+
    "\3\40\3\0\1\40\7\0\4\37\1\0\1\37\7\0\14\40\3\37"+
    "\1\40\13\0\3\40\1\0\11\37\1\0\3\37\1\0\26\37\1\0"+
    "\7\37\1\0\2\37\1\0\5\37\2\0\1\40\1\37\10\40\1\0"+
    "\3\40\1\0\3\40\2\0\1\37\17\0\2\37\2\40\2\0\12\40"+
    "\1\0\1\37\7\0\1\37\6\40\1\0\3\40\1\0\10\37\2\0"+
    "\2\37\2\0\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0"+
    "\1\40\1\37\7\40\2\0\2\40\2\0\3\40\10\0\2\40\4\0"+
    "\2\37\1\0\3\37\2\40\2\0\12\40\1\0\1\37\20\0\1\40"+
    "\1\37\1\0\6\37\3\0\3\37\1\0\4\37\3\0\2\37\1\0"+
    "\1\37\1\0\2\37\3\0\2\37\3\0\3\37\3\0\14\37\4\0"+
    "\5\40\3\0\3\40\1\0\4\40\2\0\1\37\6\0\1\40\16\0"+
    "\12\40\11\0\1\37\6\0\4\40\1\0\10\37\1\0\3\37\1\0"+
    "\27\37\1\0\20\37\3\0\1\37\7\40\1\0\3\40\1\0\4\40"+
    "\7\0\2\40\1\0\3\37\5\0\2\37\2\40\2\0\12\40\20\0"+
    "\1\37\3\40\1\0\10\37\1\0\3\37\1\0\27\37\1\0\12\37"+
    "\1\0\5\37\2\0\1\40\1\37\7\40\1\0\3\40\1\0\4\40"+
    "\7\0\2\40\7\0\1\37\1\0\2\37\2\40\2\0\12\40\1\0"+
    "\2\37\15\0\4\40\1\0\10\37\1\0\3\37\1\0\51\37\2\40"+
    "\1\37\7\40\1\0\3\40\1\0\4\40\1\37\5\0\3\37\1\40"+
    "\7\0\3\37\2\40\2\0\12\40\12\0\6\37\2\0\2\40\1\0"+
    "\22\37\3\0\30\37\1\0\11\37\1\0\1\37\2\0\7\37\3\0"+
    "\1\40\4\0\6\40\1\0\1\40\1\0\10\40\6\0\12\40\2\0"+
    "\2\40\15\0\60\37\1\40\2\37\7\40\4\0\10\37\10\40\1\0"+
    "\12\40\47\0\2\37\1\0\1\37\2\0\2\37\1\0\1\37\2\0"+
    "\1\37\6\0\4\37\1\0\7\37\1\0\3\37\1\0\1\37\1\0"+
    "\1\37\2\0\2\37\1\0\4\37\1\40\2\37\6\40\1\0\2\40"+
    "\1\37\2\0\5\37\1\0\1\37\1\0\6\40\2\0\12\40\2\0"+
    "\4\37\40\0\1\37\27\0\2\40\6\0\12\40\13\0\1\40\1\0"+
    "\1\40\1\0\1\40\4\0\2\40\10\37\1\0\44\37\4\0\24\40"+
    "\1\0\2\40\5\37\13\40\1\0\44\40\11\0\1\40\71\0\53\37"+
    "\24\40\1\37\12\40\6\0\6\37\4\40\4\37\3\40\1\37\3\40"+
    "\2\37\7\40\3\37\4\40\15\37\14\40\1\37\17\40\2\0\46\37"+
    "\1\0\1\37\5\0\1\37\2\0\53\37\1\0\u014d\37\1\0\4\37"+
    "\2\0\7\37\1\0\1\37\1\0\4\37\2\0\51\37\1\0\4\37"+
    "\2\0\41\37\1\0\4\37\2\0\7\37\1\0\1\37\1\0\4\37"+
    "\2\0\17\37\1\0\71\37\1\0\4\37\2\0\103\37\2\0\3\40"+
    "\40\0\20\37\20\0\126\37\2\0\6\37\3\0\u026c\37\2\0\21\37"+
    "\1\0\32\37\5\0\113\37\3\0\13\37\7\0\15\37\1\0\4\37"+
    "\3\40\13\0\22\37\3\40\13\0\22\37\2\40\14\0\15\37\1\0"+
    "\3\37\1\0\2\40\14\0\64\37\40\40\3\0\1\37\3\0\2\37"+
    "\1\40\2\0\12\40\41\0\4\40\1\0\12\40\6\0\130\37\10\0"+
    "\5\37\2\40\42\37\1\40\1\37\5\0\106\37\12\0\37\37\1\0"+
    "\14\40\4\0\14\40\12\0\12\40\36\37\2\0\5\37\13\0\54\37"+
    "\4\0\32\37\6\0\12\40\46\0\27\37\5\40\4\0\65\37\12\40"+
    "\1\0\35\40\2\0\13\40\6\0\12\40\15\0\1\37\10\0\16\40"+
    "\102\0\5\40\57\37\21\40\7\37\4\0\12\40\21\0\11\40\14\0"+
    "\3\40\36\37\15\40\2\37\12\40\54\37\16\40\14\0\44\37\24\40"+
    "\10\0\12\40\3\0\3\37\12\40\44\37\2\0\11\37\107\0\3\40"+
    "\1\0\25\40\4\37\1\40\4\37\3\40\2\37\3\40\6\0\300\37"+
    "\72\40\1\0\5\40\u0116\37\2\0\6\37\2\0\46\37\2\0\6\37"+
    "\2\0\10\37\1\0\1\37\1\0\1\37\1\0\1\37\1\0\37\37"+
    "\2\0\65\37\1\0\7\37\1\0\1\37\3\0\3\37\1\0\7\37"+
    "\3\0\4\37\2\0\6\37\4\0\15\37\5\0\3\37\1\0\7\37"+
    "\16\0\5\40\32\0\5\40\20\0\2\37\23\0\1\37\13\0\5\40"+
    "\1\0\12\40\1\0\1\37\15\0\1\37\20\0\15\37\3\0\40\37"+
    "\20\0\15\40\4\0\1\40\3\0\14\40\21\0\1\37\4\0\1\37"+
    "\2\0\12\37\1\0\1\37\3\0\5\37\6\0\1\37\1\0\1\37"+
    "\1\0\1\37\1\0\4\37\1\0\13\37\2\0\4\37\5\0\5\37"+
    "\4\0\1\37\21\0\51\37\u0a77\0\57\37\1\0\57\37\1\0\205\37"+
    "\6\0\4\37\3\40\2\37\14\0\46\37\1\0\1\37\5\0\1\37"+
    "\2\0\70\37\7\0\1\37\17\0\1\40\27\37\11\0\7\37\1\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0"+
    "\7\37\1\0\7\37\1\0\40\40\57\0\1\37\u01d5\0\3\37\31\0"+
    "\11\37\6\40\1\0\5\37\2\0\5\37\4\0\126\37\2\0\2\40"+
    "\2\0\3\37\1\0\132\37\1\0\4\37\5\0\52\37\2\0\136\37"+
    "\21\0\33\37\65\0\20\37\u0200\0\u19b6\37\112\0\u51eb\37\25\0\u048d\37"+
    "\103\0\56\37\2\0\u010d\37\3\0\20\37\12\40\2\37\24\0\57\37"+
    "\1\40\4\0\12\40\1\0\37\37\2\40\120\37\2\40\45\0\11\37"+
    "\2\0\147\37\2\0\44\37\1\0\10\37\77\0\13\37\1\40\3\37"+
    "\1\40\4\37\1\40\27\37\5\40\20\0\1\37\7\0\64\37\14\0"+
    "\2\40\62\37\22\40\12\0\12\40\6\0\22\40\6\37\3\0\1\37"+
    "\1\0\1\37\2\0\12\40\34\37\10\40\2\0\27\37\15\40\14\0"+
    "\35\37\3\0\4\40\57\37\16\40\16\0\1\37\12\40\6\0\5\37"+
    "\1\40\12\37\12\40\5\37\1\0\51\37\16\40\11\0\3\37\1\40"+
    "\10\37\2\40\2\0\12\40\6\0\27\37\3\0\1\37\3\40\62\37"+
    "\1\40\1\37\3\40\2\37\2\40\5\37\2\40\1\37\1\40\1\37"+
    "\30\0\3\37\2\0\13\37\5\40\2\0\3\37\2\40\12\0\6\37"+
    "\2\0\6\37\2\0\6\37\11\0\7\37\1\0\7\37\1\0\53\37"+
    "\1\0\12\37\12\0\163\37\10\40\1\0\2\40\2\0\12\40\6\0"+
    "\u2ba4\37\14\0\27\37\4\0\61\37\u2104\0\u016e\37\2\0\152\37\46\0"+
    "\7\37\14\0\5\37\5\0\1\37\1\40\12\37\1\0\15\37\1\0"+
    "\5\37\1\0\1\37\1\0\2\37\1\0\2\37\1\0\154\37\41\0"+
    "\u016b\37\22\0\100\37\2\0\66\37\50\0\15\37\3\0\20\40\20\0"+
    "\20\40\3\0\2\37\30\0\3\37\31\0\1\37\6\0\5\37\1\0"+
    "\207\37\2\0\1\40\4\0\1\37\13\0\12\40\7\0\32\37\4\0"+
    "\1\37\1\0\32\37\13\0\131\37\3\0\6\37\2\0\6\37\2\0"+
    "\6\37\2\0\3\37\3\0\2\37\3\0\2\37\22\0\3\40\4\0"+
    "\14\37\1\0\32\37\1\0\23\37\1\0\2\37\1\0\17\37\2\0"+
    "\16\37\42\0\173\37\105\0\65\37\210\0\1\40\202\0\35\37\3\0"+
    "\61\37\17\0\1\40\37\0\40\37\15\0\36\37\5\0\46\37\5\40"+
    "\5\0\36\37\2\0\44\37\4\0\10\37\1\0\5\37\52\0\236\37"+
    "\2\0\12\40\6\0\44\37\4\0\44\37\4\0\50\37\10\0\64\37"+
    "\234\0\u0137\37\11\0\26\37\12\0\10\37\230\0\6\37\2\0\1\37"+
    "\1\0\54\37\1\0\2\37\3\0\1\37\2\0\27\37\12\0\27\37"+
    "\11\0\37\37\101\0\23\37\1\0\2\37\12\0\26\37\12\0\32\37"+
    "\106\0\70\37\6\0\2\37\100\0\1\37\3\40\1\0\2\40\5\0"+
    "\4\40\4\37\1\0\3\37\1\0\33\37\4\0\3\40\4\0\1\40"+
    "\40\0\35\37\3\0\35\37\43\0\10\37\1\0\34\37\2\40\31\0"+
    "\66\37\12\0\26\37\12\0\23\37\15\0\22\37\156\0\111\37\67\0"+
    "\63\37\15\0\63\37\u030d\0\3\40\65\37\17\40\37\0\12\40\17\0"+
    "\4\40\55\37\13\40\2\0\1\40\22\0\31\37\7\0\12\40\6\0"+
    "\3\40\44\37\16\40\1\0\12\40\20\0\43\37\1\40\2\0\1\37"+
    "\11\0\3\40\60\37\16\40\4\37\5\0\3\40\3\0\12\40\1\37"+
    "\1\0\1\37\43\0\22\37\1\0\31\37\14\40\6\0\1\40\101\0"+
    "\7\37\1\0\1\37\1\0\4\37\1\0\17\37\1\0\12\37\7\0"+
    "\57\37\14\40\5\0\12\40\6\0\4\40\1\0\10\37\2\0\2\37"+
    "\2\0\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\40"+
    "\1\37\7\40\2\0\2\40\2\0\3\40\2\0\1\37\6\0\1\40"+
    "\5\0\5\37\2\40\2\0\7\40\3\0\5\40\213\0\65\37\22\40"+
    "\4\37\5\0\12\40\46\0\60\37\24\40\2\37\1\0\1\37\10\0"+
    "\12\40\246\0\57\37\7\40\2\0\11\40\27\0\4\37\2\40\42\0"+
    "\60\37\21\40\3\0\1\37\13\0\12\40\46\0\53\37\15\40\10\0"+
    "\12\40\66\0\32\37\3\0\17\40\4\0\12\40\u0166\0\100\37\12\40"+
    "\25\0\1\37\u0100\0\1\37\12\40\50\37\7\40\1\37\4\40\10\0"+
    "\1\40\10\0\1\37\13\40\50\37\2\0\4\37\20\40\46\0\71\37"+
    "\u0107\0\11\37\1\0\45\37\10\40\1\0\10\40\1\37\17\0\12\40"+
    "\30\0\36\37\2\0\26\40\1\0\16\40\111\0\7\37\1\0\2\37"+
    "\1\0\46\37\6\40\3\0\1\40\1\0\2\40\1\0\7\40\1\37"+
    "\1\40\10\0\12\40\u02a6\0\u039a\37\146\0\157\37\21\0\304\37\u0abc\0"+
    "\u042f\37\u0fd1\0\u0247\37\u21b9\0\u0239\37\7\0\37\37\1\0\12\40\146\0"+
    "\36\37\2\0\5\40\13\0\60\37\7\40\11\0\4\37\14\0\12\40"+
    "\11\0\25\37\5\0\23\37\u0370\0\105\37\13\0\1\37\56\40\20\0"+
    "\4\40\15\37\100\0\2\37\36\0\u17ed\37\23\0\u02f3\37\u250d\0\u011f\37"+
    "\121\0\u018c\37\u0904\0\153\37\5\0\15\37\3\0\11\37\7\0\12\37"+
    "\3\0\2\40\1\0\4\40\u14c1\0\5\40\3\0\26\40\2\0\7\40"+
    "\36\0\4\40\224\0\3\40\u01bb\0\125\37\1\0\107\37\1\0\2\37"+
    "\2\0\1\37\2\0\2\37\2\0\4\37\1\0\14\37\1\0\1\37"+
    "\1\0\7\37\1\0\101\37\1\0\4\37\2\0\10\37\1\0\7\37"+
    "\1\0\34\37\1\0\4\37\1\0\5\37\1\0\1\37\3\0\7\37"+
    "\1\0\u0154\37\2\0\31\37\1\0\31\37\1\0\37\37\1\0\31\37"+
    "\1\0\37\37\1\0\31\37\1\0\37\37\1\0\31\37\1\0\37\37"+
    "\1\0\31\37\1\0\10\37\2\0\62\40\u0200\0\67\40\4\0\62\40"+
    "\10\0\1\40\16\0\1\40\26\0\5\40\1\0\17\40\u0550\0\7\40"+
    "\1\0\21\40\2\0\7\40\1\0\2\40\1\0\5\40\u07d5\0\305\37"+
    "\13\0\7\40\51\0\104\37\7\40\5\0\12\40\u04a6\0\4\37\1\0"+
    "\33\37\1\0\2\37\1\0\1\37\2\0\1\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\1\37\6\0\1\37\4\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\3\37\1\0\2\37\1\0\1\37\2\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\2\37\1\0\1\37\2\0\4\37\1\0\7\37\1\0\4\37\1\0"+
    "\4\37\1\0\1\37\1\0\12\37\1\0\21\37\5\0\3\37\1\0"+
    "\5\37\1\0\21\37\u1144\0\ua6d7\37\51\0\u1035\37\13\0\336\37\2\0"+
    "\u1682\37\16\0\u1d31\37\u0c1f\0\u021e\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\40\36\0\140\40\200\0\360\40\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\5\3\1\1\1\4\1\1\1\5"+
    "\2\3\1\0\3\3\1\0\1\6\1\7\1\5\1\3"+
    "\2\0\3\3\1\0\1\3\3\0\1\10\1\11\1\3"+
    "\1\0\1\3\7\0\1\3\1\0\1\3\7\0\1\3"+
    "\11\0\1\3\116\0\1\12\14\0\1\13\273\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\51\0\173\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u019a\0\u01c3\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\51\0\u02e2\0\51\0\u030b"+
    "\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453"+
    "\0\u047c\0\u04a5\0\51\0\366\0\u04ce\0\u04f7\0\u0520\0\u0549"+
    "\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691"+
    "\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9"+
    "\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69"+
    "\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1"+
    "\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9"+
    "\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41"+
    "\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89"+
    "\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1"+
    "\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219"+
    "\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361"+
    "\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9"+
    "\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1"+
    "\0\u161a\0\51\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710"+
    "\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\51\0\u182f"+
    "\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977"+
    "\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf"+
    "\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde\0\u1c07"+
    "\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\u1d26\0\u1d4f"+
    "\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c\0\u1e45\0\u1e6e\0\u1e97"+
    "\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64\0\u1f8d\0\u1fb6\0\u1fdf"+
    "\0\u2008\0\u2031\0\u205a\0\u2083\0\u20ac\0\u20d5\0\u20fe\0\u2127"+
    "\0\u2150\0\u2179\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246\0\u226f"+
    "\0\u2298\0\u22c1\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e\0\u23b7"+
    "\0\u23e0\0\u2409\0\u2432\0\u245b\0\u2484\0\u24ad\0\u24d6\0\u24ff"+
    "\0\u2528\0\u2551\0\u257a\0\u25a3\0\u25cc\0\u25f5\0\u261e\0\u2647"+
    "\0\u2670\0\u2699\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u2766\0\u278f"+
    "\0\u27b8\0\u27e1\0\u280a\0\u2833\0\u285c\0\u2885\0\u28ae\0\u28d7"+
    "\0\u2900\0\u2929\0\u2952\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u2a1f"+
    "\0\u2a48\0\u2a71\0\u2a9a\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e\0\u2b67"+
    "\0\u2b90\0\u2bb9\0\u2be2\0\u2c0b\0\u2c34\0\u2c5d\0\u2c86\0\u2caf"+
    "\0\u2cd8\0\u2d01\0\u2d2a\0\u2d53\0\u2d7c\0\u2da5\0\u2dce\0\u2df7"+
    "\0\u2e20\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed\0\u2f16\0\u2f3f"+
    "\0\u2f68\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\u3035\0\u305e\0\u3087"+
    "\0\u30b0\0\u30d9\0\u3102\0\u312b\0\u3154\0\u317d\0\u31a6\0\u31cf"+
    "\0\u31f8\0\u3221\0\u324a\0\u3273\0\u329c\0\u32c5\0\u32ee\0\u3317"+
    "\0\u3340\0\u3369\0\u3392\0\u33bb\0\u33e4\0\u340d\0\u3436\0\u345f"+
    "\0\u3488\0\u34b1\0\u34da\0\u3503\0\u352c\0\u3555\0\u357e\0\u35a7"+
    "\0\u35d0\0\u35f9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\2\2\1\7\3\10"+
    "\1\4\2\10\1\11\3\10\1\12\2\13\1\2\3\10"+
    "\2\14\1\15\1\2\1\13\1\10\2\2\1\16\6\10"+
    "\53\0\1\4\52\0\1\10\1\17\2\0\4\10\1\0"+
    "\6\10\1\0\1\10\2\0\3\10\1\20\4\0\2\10"+
    "\1\0\7\10\4\0\2\10\2\0\4\10\1\0\6\10"+
    "\1\0\1\10\2\0\2\10\1\21\1\20\4\0\2\10"+
    "\1\0\7\10\4\0\2\10\2\0\4\10\1\0\6\10"+
    "\1\0\1\10\2\0\1\22\2\10\1\20\4\0\2\10"+
    "\1\0\7\10\4\0\2\10\2\0\4\10\1\0\6\10"+
    "\1\0\1\10\2\0\3\10\1\20\4\0\2\10\1\0"+
    "\7\10\4\0\2\10\2\0\1\10\1\23\2\10\1\0"+
    "\6\10\1\0\1\10\2\0\3\10\1\20\4\0\2\10"+
    "\1\0\7\10\4\0\2\24\2\0\4\24\1\0\6\24"+
    "\1\25\1\24\2\0\3\24\10\0\7\24\26\0\1\26"+
    "\54\0\1\27\22\0\2\10\2\0\4\10\1\0\6\10"+
    "\1\0\1\10\2\0\3\10\1\20\4\0\2\10\1\0"+
    "\1\10\1\30\5\10\4\0\2\10\1\31\1\0\4\10"+
    "\1\0\6\10\1\0\1\10\2\0\3\10\1\20\4\0"+
    "\2\10\1\0\7\10\4\0\2\32\2\0\4\32\1\0"+
    "\6\32\4\0\3\32\5\0\1\32\2\0\7\32\4\0"+
    "\2\10\2\0\4\10\1\0\1\33\5\10\1\0\1\10"+
    "\2\0\3\10\1\20\4\0\2\10\1\0\7\10\4\0"+
    "\2\10\2\0\4\10\1\0\6\10\1\0\1\10\2\0"+
    "\1\10\1\34\1\10\1\20\4\0\2\10\1\0\7\10"+
    "\4\0\1\35\1\10\2\0\4\10\1\0\6\10\1\0"+
    "\1\10\2\0\3\10\1\20\4\0\2\10\1\0\7\10"+
    "\4\0\2\36\2\0\4\36\1\0\6\36\1\25\1\36"+
    "\2\0\3\36\10\0\7\36\24\0\1\26\30\0\2\10"+
    "\2\0\4\10\1\0\6\10\1\0\1\10\2\0\3\10"+
    "\1\20\4\0\2\10\1\0\2\10\1\37\4\10\4\0"+
    "\2\40\2\0\4\40\1\0\6\40\1\41\2\42\1\0"+
    "\3\40\4\0\1\42\1\40\2\0\7\40\4\0\2\32"+
    "\2\0\4\32\1\0\6\32\1\0\1\32\2\0\3\32"+
    "\5\0\2\32\1\43\7\32\4\0\2\10\2\0\4\10"+
    "\1\0\1\10\1\34\4\10\1\0\1\10\2\0\3\10"+
    "\1\20\4\0\2\10\1\0\7\10\4\0\2\10\2\0"+
    "\2\10\1\44\1\10\1\0\6\10\1\0\1\10\2\0"+
    "\3\10\1\20\4\0\2\10\1\0\7\10\4\0\2\10"+
    "\2\0\4\10\1\0\1\45\5\10\1\0\1\10\2\0"+
    "\3\10\1\20\4\0\2\10\1\0\7\10\4\0\2\46"+
    "\2\0\4\46\1\0\6\46\1\25\1\46\2\0\3\46"+
    "\10\0\7\46\4\0\2\10\2\0\4\10\1\0\6\10"+
    "\1\0\1\10\2\0\3\10\1\20\4\0\2\10\1\0"+
    "\3\10\1\47\3\10\4\0\2\40\2\0\4\40\1\0"+
    "\6\40\1\0\1\40\2\0\3\40\2\50\1\51\1\52"+
    "\1\53\2\40\1\0\7\40\4\0\2\54\2\0\4\54"+
    "\1\0\6\54\1\55\1\54\2\0\3\54\10\0\7\54"+
    "\26\0\1\56\3\0\2\50\1\51\1\52\1\53\16\0"+
    "\2\10\2\0\2\10\1\57\1\10\1\0\6\10\1\0"+
    "\1\10\2\0\3\10\1\20\4\0\2\10\1\0\7\10"+
    "\4\0\2\60\2\0\4\60\1\0\6\60\1\25\1\60"+
    "\2\0\3\60\10\0\7\60\4\0\2\10\2\0\4\10"+
    "\1\0\6\10\1\0\1\10\2\0\3\10\1\20\4\0"+
    "\2\10\1\0\4\10\1\61\2\10\32\0\1\62\22\0"+
    "\2\63\2\0\4\63\1\0\6\63\1\64\2\65\1\0"+
    "\3\63\1\62\3\0\1\65\1\63\2\0\7\63\35\0"+
    "\1\62\51\0\1\62\16\0\2\66\2\0\4\66\1\0"+
    "\6\66\1\55\1\66\2\0\3\66\10\0\7\66\32\0"+
    "\2\50\1\51\1\52\1\53\36\0\1\56\5\0\2\50"+
    "\1\51\1\52\1\53\16\0\2\10\1\67\1\0\4\10"+
    "\1\0\6\10\1\0\1\10\2\0\3\10\1\20\4\0"+
    "\2\10\1\0\7\10\4\0\2\70\2\0\4\70\1\0"+
    "\6\70\1\25\1\70\2\0\3\70\10\0\7\70\4\0"+
    "\2\10\2\0\4\10\1\0\6\10\1\0\1\10\2\0"+
    "\3\10\1\20\4\0\2\10\1\0\5\10\1\71\1\10"+
    "\4\0\2\63\2\0\4\63\1\0\6\63\1\64\2\65"+
    "\1\0\3\63\4\0\1\65\1\63\2\0\7\63\4\0"+
    "\2\63\1\0\1\72\4\63\1\0\6\63\1\0\1\63"+
    "\2\0\3\63\5\0\2\63\1\0\7\63\4\0\2\73"+
    "\2\0\4\73\1\0\6\73\1\74\1\73\2\0\3\73"+
    "\10\0\7\73\7\0\1\72\16\0\1\75\26\0\2\76"+
    "\2\0\4\76\1\0\6\76\1\55\1\76\2\0\3\76"+
    "\10\0\7\76\4\0\2\77\2\0\4\77\1\0\6\77"+
    "\1\100\2\101\1\0\3\77\4\0\1\101\1\77\2\0"+
    "\7\77\4\0\2\102\2\0\4\102\1\0\6\102\1\25"+
    "\1\102\2\0\3\102\10\0\7\102\4\0\2\10\2\0"+
    "\4\10\1\0\6\10\1\0\1\10\2\0\3\10\1\20"+
    "\4\0\2\10\1\0\6\10\1\103\10\0\1\104\44\0"+
    "\2\105\2\0\4\105\1\0\6\105\1\74\1\105\2\0"+
    "\3\105\10\0\7\105\7\0\1\72\50\0\1\72\14\0"+
    "\1\75\30\0\2\106\2\0\4\106\1\0\6\106\1\55"+
    "\1\106\2\0\3\106\10\0\7\106\4\0\2\77\2\0"+
    "\4\77\1\0\6\77\1\0\1\77\2\0\3\77\2\107"+
    "\1\110\1\111\1\112\2\77\1\0\7\77\4\0\2\113"+
    "\2\0\4\113\1\0\6\113\1\114\1\113\2\0\3\113"+
    "\10\0\7\113\26\0\1\115\3\0\2\107\1\110\1\111"+
    "\1\112\16\0\2\116\2\0\4\116\1\0\6\116\1\25"+
    "\1\116\2\0\3\116\10\0\7\116\4\0\2\10\2\0"+
    "\4\10\1\0\6\10\1\117\1\10\2\0\3\10\1\20"+
    "\4\0\2\10\1\0\7\10\11\0\1\120\43\0\2\121"+
    "\2\0\4\121\1\0\6\121\1\74\1\121\2\0\3\121"+
    "\10\0\7\121\4\0\2\122\2\0\4\122\1\0\6\122"+
    "\1\55\1\122\2\0\3\122\10\0\7\122\32\0\1\123"+
    "\22\0\2\124\2\0\4\124\1\0\6\124\1\125\2\126"+
    "\1\0\3\124\1\123\3\0\1\126\1\124\2\0\7\124"+
    "\35\0\1\123\51\0\1\123\16\0\2\127\2\0\4\127"+
    "\1\0\6\127\1\114\1\127\2\0\3\127\10\0\7\127"+
    "\32\0\2\107\1\110\1\111\1\112\36\0\1\115\5\0"+
    "\2\107\1\110\1\111\1\112\16\0\2\130\2\0\4\130"+
    "\1\0\6\130\1\25\1\130\2\0\3\130\10\0\7\130"+
    "\4\0\2\131\2\0\4\131\1\0\6\131\1\132\1\131"+
    "\2\0\3\131\10\0\7\131\12\0\1\133\42\0\2\134"+
    "\2\0\4\134\1\0\6\134\1\74\1\134\2\0\3\134"+
    "\10\0\7\134\4\0\2\135\2\0\4\135\1\0\6\135"+
    "\1\55\1\135\2\0\3\135\10\0\7\135\4\0\2\124"+
    "\2\0\4\124\1\0\6\124\1\125\2\126\1\0\3\124"+
    "\4\0\1\126\1\124\2\0\7\124\4\0\2\124\1\0"+
    "\1\136\4\124\1\0\6\124\1\0\1\124\2\0\3\124"+
    "\5\0\2\124\1\0\7\124\4\0\2\137\2\0\4\137"+
    "\1\0\6\137\1\140\1\137\2\0\3\137\10\0\7\137"+
    "\7\0\1\136\16\0\1\141\26\0\2\142\2\0\4\142"+
    "\1\0\6\142\1\114\1\142\2\0\3\142\10\0\7\142"+
    "\4\0\2\143\2\0\4\143\1\0\6\143\1\25\1\143"+
    "\2\0\3\143\10\0\7\143\4\0\2\144\2\0\4\144"+
    "\1\0\6\144\1\132\1\144\2\0\3\144\10\0\7\144"+
    "\41\0\1\43\22\0\1\145\41\0\2\146\2\0\4\146"+
    "\1\0\6\146\1\74\1\146\2\0\3\146\10\0\7\146"+
    "\4\0\2\147\2\0\4\147\1\0\6\147\1\55\1\147"+
    "\2\0\3\147\10\0\7\147\20\0\1\150\34\0\2\151"+
    "\2\0\4\151\1\0\6\151\1\140\1\151\2\0\3\151"+
    "\10\0\7\151\7\0\1\136\50\0\1\136\14\0\1\141"+
    "\30\0\2\152\2\0\4\152\1\0\6\152\1\114\1\152"+
    "\2\0\3\152\10\0\7\152\4\0\2\153\2\0\4\153"+
    "\1\0\6\153\1\25\1\153\2\0\3\153\10\0\7\153"+
    "\4\0\2\154\2\0\4\154\1\0\6\154\1\132\1\154"+
    "\2\0\3\154\10\0\7\154\14\0\1\155\40\0\2\156"+
    "\2\0\4\156\1\0\6\156\1\74\1\156\2\0\3\156"+
    "\10\0\7\156\4\0\2\157\2\0\4\157\1\0\6\157"+
    "\1\55\1\157\2\0\3\157\10\0\7\157\21\0\1\160"+
    "\33\0\2\161\2\0\4\161\1\0\6\161\1\140\1\161"+
    "\2\0\3\161\10\0\7\161\4\0\2\162\2\0\4\162"+
    "\1\0\6\162\1\114\1\162\2\0\3\162\10\0\7\162"+
    "\4\0\2\163\2\0\4\163\1\0\6\163\1\25\1\163"+
    "\2\0\3\163\10\0\7\163\4\0\2\164\2\0\4\164"+
    "\1\0\6\164\1\132\1\164\2\0\3\164\10\0\7\164"+
    "\4\0\2\165\2\0\4\165\1\0\6\165\4\0\3\165"+
    "\5\0\1\165\2\0\1\166\6\165\4\0\2\167\2\0"+
    "\4\167\1\0\6\167\1\74\1\167\2\0\3\167\10\0"+
    "\7\167\4\0\2\170\2\0\4\170\1\0\6\170\1\55"+
    "\1\170\2\0\3\170\10\0\7\170\14\0\1\171\40\0"+
    "\2\172\2\0\4\172\1\0\6\172\1\140\1\172\2\0"+
    "\3\172\10\0\7\172\4\0\2\173\2\0\4\173\1\0"+
    "\6\173\1\114\1\173\2\0\3\173\10\0\7\173\4\0"+
    "\2\174\2\0\4\174\1\0\6\174\1\25\1\174\2\0"+
    "\3\174\10\0\7\174\4\0\2\175\2\0\4\175\1\0"+
    "\6\175\1\132\1\175\2\0\3\175\10\0\7\175\4\0"+
    "\2\165\2\0\4\165\1\0\6\165\1\0\1\165\2\0"+
    "\3\165\1\176\4\0\2\165\1\0\7\165\4\0\2\165"+
    "\2\0\4\165\1\0\6\165\1\0\1\165\2\0\3\165"+
    "\1\176\4\0\2\165\1\0\1\165\1\177\5\165\4\0"+
    "\2\200\2\0\4\200\1\0\6\200\1\74\1\200\2\0"+
    "\3\200\10\0\7\200\4\0\2\201\2\0\4\201\1\0"+
    "\6\201\1\55\1\201\2\0\3\201\10\0\7\201\4\0"+
    "\2\202\2\0\4\202\1\0\6\202\4\0\3\202\5\0"+
    "\1\202\2\0\1\203\6\202\4\0\2\204\2\0\4\204"+
    "\1\0\6\204\1\140\1\204\2\0\3\204\10\0\7\204"+
    "\4\0\2\205\2\0\4\205\1\0\6\205\1\114\1\205"+
    "\2\0\3\205\10\0\7\205\4\0\2\206\2\0\4\206"+
    "\1\0\6\206\1\25\1\206\2\0\3\206\10\0\7\206"+
    "\4\0\2\207\2\0\4\207\1\0\6\207\1\132\1\207"+
    "\2\0\3\207\10\0\7\207\4\0\2\210\2\0\4\210"+
    "\1\0\6\210\4\0\3\210\5\0\1\210\2\0\7\210"+
    "\4\0\2\165\2\0\4\165\1\0\6\165\1\0\1\165"+
    "\2\0\3\165\1\176\4\0\2\165\1\0\2\165\1\211"+
    "\4\165\4\0\2\212\2\0\4\212\1\0\6\212\1\74"+
    "\1\212\2\0\3\212\10\0\7\212\4\0\2\213\2\0"+
    "\4\213\1\0\6\213\1\55\1\213\2\0\3\213\10\0"+
    "\7\213\4\0\2\202\2\0\4\202\1\0\6\202\1\0"+
    "\1\202\2\0\3\202\1\214\4\0\2\202\1\0\7\202"+
    "\4\0\2\202\2\0\4\202\1\0\6\202\1\0\1\202"+
    "\2\0\3\202\1\214\4\0\2\202\1\0\1\202\1\215"+
    "\5\202\4\0\2\216\2\0\4\216\1\0\6\216\1\140"+
    "\1\216\2\0\3\216\10\0\7\216\4\0\2\217\2\0"+
    "\4\217\1\0\6\217\1\114\1\217\2\0\3\217\10\0"+
    "\7\217\4\0\2\220\2\0\4\220\1\0\6\220\1\25"+
    "\1\220\2\0\3\220\10\0\7\220\4\0\2\221\2\0"+
    "\4\221\1\0\6\221\1\132\1\221\2\0\3\221\10\0"+
    "\7\221\4\0\2\210\2\0\4\210\1\0\6\210\1\0"+
    "\1\210\2\0\3\210\5\0\2\210\1\222\7\210\4\0"+
    "\2\165\2\0\4\165\1\0\6\165\1\0\1\165\2\0"+
    "\3\165\1\176\4\0\2\165\1\0\3\165\1\223\3\165"+
    "\4\0\2\224\2\0\4\224\1\0\6\224\1\74\1\224"+
    "\2\0\3\224\10\0\7\224\4\0\2\225\2\0\4\225"+
    "\1\0\6\225\1\55\1\225\2\0\3\225\10\0\7\225"+
    "\4\0\2\226\2\0\4\226\1\0\6\226\4\0\3\226"+
    "\5\0\1\226\2\0\7\226\4\0\2\202\2\0\4\202"+
    "\1\0\6\202\1\0\1\202\2\0\3\202\1\214\4\0"+
    "\2\202\1\0\2\202\1\227\4\202\4\0\2\230\2\0"+
    "\4\230\1\0\6\230\1\140\1\230\2\0\3\230\10\0"+
    "\7\230\4\0\2\231\2\0\4\231\1\0\6\231\1\114"+
    "\1\231\2\0\3\231\10\0\7\231\4\0\2\232\2\0"+
    "\4\232\1\0\6\232\1\25\1\232\2\0\3\232\10\0"+
    "\7\232\4\0\2\233\2\0\4\233\1\0\6\233\1\132"+
    "\1\233\2\0\3\233\10\0\7\233\4\0\2\165\2\0"+
    "\4\165\1\0\6\165\1\0\1\165\2\0\3\165\1\176"+
    "\4\0\2\165\1\0\4\165\1\234\2\165\4\0\2\235"+
    "\2\0\4\235\1\0\6\235\1\74\1\235\2\0\3\235"+
    "\10\0\7\235\4\0\2\236\2\0\4\236\1\0\6\236"+
    "\1\55\1\236\2\0\3\236\10\0\7\236\4\0\2\226"+
    "\2\0\4\226\1\0\6\226\1\0\1\226\2\0\3\226"+
    "\5\0\2\226\1\237\7\226\4\0\2\202\2\0\4\202"+
    "\1\0\6\202\1\0\1\202\2\0\3\202\1\214\4\0"+
    "\2\202\1\0\3\202\1\240\3\202\4\0\2\241\2\0"+
    "\4\241\1\0\6\241\1\140\1\241\2\0\3\241\10\0"+
    "\7\241\4\0\2\242\2\0\4\242\1\0\6\242\1\114"+
    "\1\242\2\0\3\242\10\0\7\242\4\0\2\243\2\0"+
    "\4\243\1\0\6\243\1\25\1\243\2\0\3\243\10\0"+
    "\7\243\4\0\2\244\2\0\4\244\1\0\6\244\1\132"+
    "\1\244\2\0\3\244\10\0\7\244\4\0\2\165\2\0"+
    "\4\165\1\0\6\165\1\0\1\165\2\0\3\165\1\176"+
    "\4\0\2\165\1\0\5\165\1\245\1\165\4\0\2\246"+
    "\2\0\4\246\1\0\6\246\1\74\1\246\2\0\3\246"+
    "\10\0\7\246\4\0\2\247\2\0\4\247\1\0\6\247"+
    "\1\55\1\247\2\0\3\247\10\0\7\247\4\0\2\202"+
    "\2\0\4\202\1\0\6\202\1\0\1\202\2\0\3\202"+
    "\1\214\4\0\2\202\1\0\4\202\1\250\2\202\4\0"+
    "\2\251\2\0\4\251\1\0\6\251\1\140\1\251\2\0"+
    "\3\251\10\0\7\251\4\0\2\252\2\0\4\252\1\0"+
    "\6\252\1\114\1\252\2\0\3\252\10\0\7\252\4\0"+
    "\2\253\2\0\4\253\1\0\6\253\1\25\1\253\2\0"+
    "\3\253\10\0\7\253\4\0\2\254\2\0\4\254\1\0"+
    "\6\254\1\132\1\254\2\0\3\254\10\0\7\254\4\0"+
    "\2\165\2\0\4\165\1\0\6\165\1\0\1\165\2\0"+
    "\3\165\1\176\4\0\2\165\1\0\6\165\1\255\4\0"+
    "\2\256\2\0\4\256\1\0\6\256\1\74\1\256\2\0"+
    "\3\256\10\0\7\256\4\0\2\257\2\0\4\257\1\0"+
    "\6\257\1\55\1\257\2\0\3\257\10\0\7\257\4\0"+
    "\2\202\2\0\4\202\1\0\6\202\1\0\1\202\2\0"+
    "\3\202\1\214\4\0\2\202\1\0\5\202\1\260\1\202"+
    "\4\0\2\261\2\0\4\261\1\0\6\261\1\140\1\261"+
    "\2\0\3\261\10\0\7\261\4\0\2\262\2\0\4\262"+
    "\1\0\6\262\1\114\1\262\2\0\3\262\10\0\7\262"+
    "\4\0\2\263\2\0\4\263\1\0\6\263\1\25\1\263"+
    "\2\0\3\263\10\0\7\263\4\0\2\264\2\0\4\264"+
    "\1\0\6\264\1\132\1\264\2\0\3\264\10\0\7\264"+
    "\4\0\2\165\2\0\4\165\1\0\6\165\1\265\1\165"+
    "\2\0\3\165\1\176\4\0\2\165\1\0\7\165\4\0"+
    "\2\266\2\0\4\266\1\0\6\266\1\74\1\266\2\0"+
    "\3\266\10\0\7\266\4\0\2\267\2\0\4\267\1\0"+
    "\6\267\1\55\1\267\2\0\3\267\10\0\7\267\4\0"+
    "\2\202\2\0\4\202\1\0\6\202\1\0\1\202\2\0"+
    "\3\202\1\214\4\0\2\202\1\0\6\202\1\270\4\0"+
    "\2\271\2\0\4\271\1\0\6\271\1\140\1\271\2\0"+
    "\3\271\10\0\7\271\4\0\2\272\2\0\4\272\1\0"+
    "\6\272\1\114\1\272\2\0\3\272\10\0\7\272\4\0"+
    "\2\273\2\0\4\273\1\0\6\273\1\25\1\273\2\0"+
    "\3\273\10\0\7\273\4\0\2\274\2\0\4\274\1\0"+
    "\6\274\1\132\1\274\2\0\3\274\10\0\7\274\4\0"+
    "\2\275\2\0\4\275\1\0\6\275\1\276\1\275\2\0"+
    "\3\275\10\0\7\275\4\0\2\277\2\0\4\277\1\0"+
    "\6\277\1\74\1\277\2\0\3\277\10\0\7\277\4\0"+
    "\2\300\2\0\4\300\1\0\6\300\1\55\1\300\2\0"+
    "\3\300\10\0\7\300\4\0\2\202\2\0\4\202\1\0"+
    "\6\202\1\301\1\202\2\0\3\202\1\214\4\0\2\202"+
    "\1\0\7\202\4\0\2\302\2\0\4\302\1\0\6\302"+
    "\1\140\1\302\2\0\3\302\10\0\7\302\4\0\2\303"+
    "\2\0\4\303\1\0\6\303\1\114\1\303\2\0\3\303"+
    "\10\0\7\303\4\0\2\304\2\0\4\304\1\0\6\304"+
    "\1\25\1\304\2\0\3\304\10\0\7\304\4\0\2\305"+
    "\2\0\4\305\1\0\6\305\1\132\1\305\2\0\3\305"+
    "\10\0\7\305\4\0\2\306\2\0\4\306\1\0\6\306"+
    "\1\276\1\306\2\0\3\306\10\0\7\306\41\0\1\222"+
    "\13\0\2\307\2\0\4\307\1\0\6\307\1\74\1\307"+
    "\2\0\3\307\10\0\7\307\4\0\2\310\2\0\4\310"+
    "\1\0\6\310\1\55\1\310\2\0\3\310\10\0\7\310"+
    "\4\0\2\311\2\0\4\311\1\0\6\311\1\312\1\311"+
    "\2\0\3\311\10\0\7\311\4\0\2\313\2\0\4\313"+
    "\1\0\6\313\1\140\1\313\2\0\3\313\10\0\7\313"+
    "\4\0\2\314\2\0\4\314\1\0\6\314\1\114\1\314"+
    "\2\0\3\314\10\0\7\314\4\0\2\315\2\0\4\315"+
    "\1\0\6\315\1\25\1\315\2\0\3\315\10\0\7\315"+
    "\4\0\2\316\2\0\4\316\1\0\6\316\1\132\1\316"+
    "\2\0\3\316\10\0\7\316\4\0\2\317\2\0\4\317"+
    "\1\0\6\317\1\276\1\317\2\0\3\317\10\0\7\317"+
    "\4\0\2\320\2\0\4\320\1\0\6\320\1\74\1\320"+
    "\2\0\3\320\10\0\7\320\4\0\2\321\2\0\4\321"+
    "\1\0\6\321\1\55\1\321\2\0\3\321\10\0\7\321"+
    "\4\0\2\322\2\0\4\322\1\0\6\322\1\312\1\322"+
    "\2\0\3\322\10\0\7\322\41\0\1\237\13\0\2\323"+
    "\2\0\4\323\1\0\6\323\1\140\1\323\2\0\3\323"+
    "\10\0\7\323\4\0\2\324\2\0\4\324\1\0\6\324"+
    "\1\114\1\324\2\0\3\324\10\0\7\324\4\0\2\325"+
    "\2\0\4\325\1\0\6\325\1\25\1\325\2\0\3\325"+
    "\10\0\7\325\4\0\2\326\2\0\4\326\1\0\6\326"+
    "\1\132\1\326\2\0\3\326\10\0\7\326\4\0\2\327"+
    "\2\0\4\327\1\0\6\327\1\276\1\327\2\0\3\327"+
    "\10\0\7\327\4\0\2\330\2\0\4\330\1\0\6\330"+
    "\1\74\1\330\2\0\3\330\10\0\7\330\4\0\2\331"+
    "\2\0\4\331\1\0\6\331\1\55\1\331\2\0\3\331"+
    "\10\0\7\331\4\0\2\332\2\0\4\332\1\0\6\332"+
    "\1\312\1\332\2\0\3\332\10\0\7\332\4\0\2\333"+
    "\2\0\4\333\1\0\6\333\1\140\1\333\2\0\3\333"+
    "\10\0\7\333\4\0\2\334\2\0\4\334\1\0\6\334"+
    "\1\114\1\334\2\0\3\334\10\0\7\334\4\0\2\335"+
    "\2\0\4\335\1\0\6\335\1\25\1\335\2\0\3\335"+
    "\10\0\7\335\4\0\2\336\2\0\4\336\1\0\6\336"+
    "\1\132\1\336\2\0\3\336\10\0\7\336\4\0\2\337"+
    "\2\0\4\337\1\0\6\337\1\276\1\337\2\0\3\337"+
    "\10\0\7\337\4\0\2\340\2\0\4\340\1\0\6\340"+
    "\1\74\1\340\2\0\3\340\10\0\7\340\4\0\2\341"+
    "\2\0\4\341\1\0\6\341\1\55\1\341\2\0\3\341"+
    "\10\0\7\341\4\0\2\342\2\0\4\342\1\0\6\342"+
    "\1\312\1\342\2\0\3\342\10\0\7\342\4\0\2\343"+
    "\2\0\4\343\1\0\6\343\1\140\1\343\2\0\3\343"+
    "\10\0\7\343\4\0\2\344\2\0\4\344\1\0\6\344"+
    "\1\114\1\344\2\0\3\344\10\0\7\344\4\0\2\345"+
    "\2\0\4\345\1\0\6\345\1\25\1\345\2\0\3\345"+
    "\10\0\7\345\4\0\2\346\2\0\4\346\1\0\6\346"+
    "\1\132\1\346\2\0\3\346\10\0\7\346\4\0\2\347"+
    "\2\0\4\347\1\0\6\347\1\276\1\347\2\0\3\347"+
    "\10\0\7\347\4\0\2\350\2\0\4\350\1\0\6\350"+
    "\1\74\1\350\2\0\3\350\10\0\7\350\4\0\2\351"+
    "\2\0\4\351\1\0\6\351\1\55\1\351\2\0\3\351"+
    "\10\0\7\351\4\0\2\352\2\0\4\352\1\0\6\352"+
    "\1\312\1\352\2\0\3\352\10\0\7\352\4\0\2\353"+
    "\2\0\4\353\1\0\6\353\1\140\1\353\2\0\3\353"+
    "\10\0\7\353\4\0\2\354\2\0\4\354\1\0\6\354"+
    "\1\114\1\354\2\0\3\354\10\0\7\354\4\0\2\355"+
    "\2\0\4\355\1\0\6\355\1\25\1\355\2\0\3\355"+
    "\10\0\7\355\4\0\2\356\2\0\4\356\1\0\6\356"+
    "\1\132\1\356\2\0\3\356\10\0\7\356\4\0\2\357"+
    "\2\0\4\357\1\0\6\357\1\276\1\357\2\0\3\357"+
    "\10\0\7\357\4\0\2\360\2\0\4\360\1\0\6\360"+
    "\1\74\1\360\2\0\3\360\10\0\7\360\4\0\2\361"+
    "\2\0\4\361\1\0\6\361\1\55\1\361\2\0\3\361"+
    "\10\0\7\361\4\0\2\362\2\0\4\362\1\0\6\362"+
    "\1\312\1\362\2\0\3\362\10\0\7\362\4\0\2\363"+
    "\2\0\4\363\1\0\6\363\1\140\1\363\2\0\3\363"+
    "\10\0\7\363\4\0\2\364\2\0\4\364\1\0\6\364"+
    "\1\114\1\364\2\0\3\364\10\0\7\364\4\0\2\365"+
    "\2\0\4\365\1\0\6\365\1\25\1\365\2\0\3\365"+
    "\10\0\7\365\4\0\2\366\2\0\4\366\1\0\6\366"+
    "\1\132\1\366\2\0\3\366\10\0\7\366\4\0\2\367"+
    "\2\0\4\367\1\0\6\367\1\276\1\367\2\0\3\367"+
    "\10\0\7\367\4\0\2\370\2\0\4\370\1\0\6\370"+
    "\1\74\1\370\2\0\3\370\10\0\7\370\4\0\2\371"+
    "\2\0\4\371\1\0\6\371\1\55\1\371\2\0\3\371"+
    "\10\0\7\371\4\0\2\372\2\0\4\372\1\0\6\372"+
    "\1\312\1\372\2\0\3\372\10\0\7\372\4\0\2\373"+
    "\2\0\4\373\1\0\6\373\1\140\1\373\2\0\3\373"+
    "\10\0\7\373\4\0\2\374\2\0\4\374\1\0\6\374"+
    "\1\114\1\374\2\0\3\374\10\0\7\374\4\0\2\375"+
    "\2\0\4\375\1\0\6\375\1\25\1\375\2\0\3\375"+
    "\10\0\7\375\4\0\2\376\2\0\4\376\1\0\6\376"+
    "\1\132\1\376\2\0\3\376\10\0\7\376\4\0\2\377"+
    "\2\0\4\377\1\0\6\377\1\276\1\377\2\0\3\377"+
    "\10\0\7\377\4\0\2\u0100\2\0\4\u0100\1\0\6\u0100"+
    "\1\74\1\u0100\2\0\3\u0100\10\0\7\u0100\4\0\2\u0101"+
    "\2\0\4\u0101\1\0\6\u0101\1\55\1\u0101\2\0\3\u0101"+
    "\10\0\7\u0101\4\0\2\u0102\2\0\4\u0102\1\0\6\u0102"+
    "\1\312\1\u0102\2\0\3\u0102\10\0\7\u0102\4\0\2\u0103"+
    "\2\0\4\u0103\1\0\6\u0103\1\140\1\u0103\2\0\3\u0103"+
    "\10\0\7\u0103\4\0\2\u0104\2\0\4\u0104\1\0\6\u0104"+
    "\1\114\1\u0104\2\0\3\u0104\10\0\7\u0104\4\0\2\u0105"+
    "\2\0\4\u0105\1\0\6\u0105\1\25\1\u0105\2\0\3\u0105"+
    "\10\0\7\u0105\4\0\2\u0106\2\0\4\u0106\1\0\6\u0106"+
    "\1\132\1\u0106\2\0\3\u0106\10\0\7\u0106\4\0\2\u0107"+
    "\2\0\4\u0107\1\0\6\u0107\1\276\1\u0107\2\0\3\u0107"+
    "\10\0\7\u0107\4\0\2\u0108\2\0\4\u0108\1\0\6\u0108"+
    "\1\74\1\u0108\2\0\3\u0108\10\0\7\u0108\4\0\2\u0109"+
    "\2\0\4\u0109\1\0\6\u0109\1\55\1\u0109\2\0\3\u0109"+
    "\10\0\7\u0109\4\0\2\u010a\2\0\4\u010a\1\0\6\u010a"+
    "\1\312\1\u010a\2\0\3\u010a\10\0\7\u010a\4\0\2\u010b"+
    "\2\0\4\u010b\1\0\6\u010b\1\140\1\u010b\2\0\3\u010b"+
    "\10\0\7\u010b\4\0\2\u010c\2\0\4\u010c\1\0\6\u010c"+
    "\1\114\1\u010c\2\0\3\u010c\10\0\7\u010c\4\0\2\u010d"+
    "\2\0\4\u010d\1\0\6\u010d\1\25\1\u010d\2\0\3\u010d"+
    "\10\0\7\u010d\4\0\2\u010e\2\0\4\u010e\1\0\6\u010e"+
    "\1\132\1\u010e\2\0\3\u010e\10\0\7\u010e\4\0\2\u010f"+
    "\2\0\4\u010f\1\0\6\u010f\1\276\1\u010f\2\0\3\u010f"+
    "\10\0\7\u010f\4\0\2\u0110\2\0\4\u0110\1\0\6\u0110"+
    "\1\74\1\u0110\2\0\3\u0110\10\0\7\u0110\4\0\2\u0111"+
    "\2\0\4\u0111\1\0\6\u0111\1\55\1\u0111\2\0\3\u0111"+
    "\10\0\7\u0111\4\0\2\u0112\2\0\4\u0112\1\0\6\u0112"+
    "\1\312\1\u0112\2\0\3\u0112\10\0\7\u0112\4\0\2\u0113"+
    "\2\0\4\u0113\1\0\6\u0113\1\140\1\u0113\2\0\3\u0113"+
    "\10\0\7\u0113\4\0\2\u0114\2\0\4\u0114\1\0\6\u0114"+
    "\1\114\1\u0114\2\0\3\u0114\10\0\7\u0114\4\0\2\u0115"+
    "\2\0\4\u0115\1\0\6\u0115\1\25\1\u0115\2\0\3\u0115"+
    "\10\0\7\u0115\4\0\2\u0116\2\0\4\u0116\1\0\6\u0116"+
    "\1\132\1\u0116\2\0\3\u0116\10\0\7\u0116\4\0\2\u0117"+
    "\2\0\4\u0117\1\0\6\u0117\1\276\1\u0117\2\0\3\u0117"+
    "\10\0\7\u0117\4\0\2\u0118\2\0\4\u0118\1\0\6\u0118"+
    "\1\74\1\u0118\2\0\3\u0118\10\0\7\u0118\4\0\2\u0119"+
    "\2\0\4\u0119\1\0\6\u0119\1\55\1\u0119\2\0\3\u0119"+
    "\10\0\7\u0119\4\0\2\u011a\2\0\4\u011a\1\0\6\u011a"+
    "\1\312\1\u011a\2\0\3\u011a\10\0\7\u011a\4\0\2\u011b"+
    "\2\0\4\u011b\1\0\6\u011b\1\140\1\u011b\2\0\3\u011b"+
    "\10\0\7\u011b\4\0\2\u011c\2\0\4\u011c\1\0\6\u011c"+
    "\1\114\1\u011c\2\0\3\u011c\10\0\7\u011c\23\0\1\25"+
    "\31\0\2\u011d\2\0\4\u011d\1\0\6\u011d\1\132\1\u011d"+
    "\2\0\3\u011d\10\0\7\u011d\4\0\2\u011e\2\0\4\u011e"+
    "\1\0\6\u011e\1\276\1\u011e\2\0\3\u011e\10\0\7\u011e"+
    "\4\0\2\u011f\2\0\4\u011f\1\0\6\u011f\1\74\1\u011f"+
    "\2\0\3\u011f\10\0\7\u011f\4\0\2\u0120\2\0\4\u0120"+
    "\1\0\6\u0120\1\55\1\u0120\2\0\3\u0120\10\0\7\u0120"+
    "\4\0\2\u0121\2\0\4\u0121\1\0\6\u0121\1\312\1\u0121"+
    "\2\0\3\u0121\10\0\7\u0121\4\0\2\u0122\2\0\4\u0122"+
    "\1\0\6\u0122\1\140\1\u0122\2\0\3\u0122\10\0\7\u0122"+
    "\4\0\2\u0123\2\0\4\u0123\1\0\6\u0123\1\114\1\u0123"+
    "\2\0\3\u0123\10\0\7\u0123\4\0\2\u0124\2\0\4\u0124"+
    "\1\0\6\u0124\1\132\1\u0124\2\0\3\u0124\10\0\7\u0124"+
    "\4\0\2\u0125\2\0\4\u0125\1\0\6\u0125\1\276\1\u0125"+
    "\2\0\3\u0125\10\0\7\u0125\4\0\2\u0126\2\0\4\u0126"+
    "\1\0\6\u0126\1\74\1\u0126\2\0\3\u0126\10\0\7\u0126"+
    "\4\0\2\u0127\2\0\4\u0127\1\0\6\u0127\1\55\1\u0127"+
    "\2\0\3\u0127\10\0\7\u0127\4\0\2\u0128\2\0\4\u0128"+
    "\1\0\6\u0128\1\312\1\u0128\2\0\3\u0128\10\0\7\u0128"+
    "\4\0\2\u0129\2\0\4\u0129\1\0\6\u0129\1\140\1\u0129"+
    "\2\0\3\u0129\10\0\7\u0129\4\0\2\u012a\2\0\4\u012a"+
    "\1\0\6\u012a\1\114\1\u012a\2\0\3\u012a\10\0\7\u012a"+
    "\4\0\2\u012b\2\0\4\u012b\1\0\6\u012b\1\132\1\u012b"+
    "\2\0\3\u012b\10\0\7\u012b\4\0\2\u012c\2\0\4\u012c"+
    "\1\0\6\u012c\1\276\1\u012c\2\0\3\u012c\10\0\7\u012c"+
    "\4\0\2\u012d\2\0\4\u012d\1\0\6\u012d\1\74\1\u012d"+
    "\2\0\3\u012d\10\0\7\u012d\23\0\1\55\31\0\2\u012e"+
    "\2\0\4\u012e\1\0\6\u012e\1\312\1\u012e\2\0\3\u012e"+
    "\10\0\7\u012e\4\0\2\u012f\2\0\4\u012f\1\0\6\u012f"+
    "\1\140\1\u012f\2\0\3\u012f\10\0\7\u012f\4\0\2\u0130"+
    "\2\0\4\u0130\1\0\6\u0130\1\114\1\u0130\2\0\3\u0130"+
    "\10\0\7\u0130\4\0\2\u0131\2\0\4\u0131\1\0\6\u0131"+
    "\1\132\1\u0131\2\0\3\u0131\10\0\7\u0131\4\0\2\u0132"+
    "\2\0\4\u0132\1\0\6\u0132\1\276\1\u0132\2\0\3\u0132"+
    "\10\0\7\u0132\4\0\2\u0133\2\0\4\u0133\1\0\6\u0133"+
    "\1\74\1\u0133\2\0\3\u0133\10\0\7\u0133\4\0\2\u0134"+
    "\2\0\4\u0134\1\0\6\u0134\1\312\1\u0134\2\0\3\u0134"+
    "\10\0\7\u0134\4\0\2\u0135\2\0\4\u0135\1\0\6\u0135"+
    "\1\140\1\u0135\2\0\3\u0135\10\0\7\u0135\4\0\2\u0136"+
    "\2\0\4\u0136\1\0\6\u0136\1\114\1\u0136\2\0\3\u0136"+
    "\10\0\7\u0136\4\0\2\u0137\2\0\4\u0137\1\0\6\u0137"+
    "\1\132\1\u0137\2\0\3\u0137\10\0\7\u0137\4\0\2\u0138"+
    "\2\0\4\u0138\1\0\6\u0138\1\276\1\u0138\2\0\3\u0138"+
    "\10\0\7\u0138\23\0\1\74\31\0\2\u0139\2\0\4\u0139"+
    "\1\0\6\u0139\1\312\1\u0139\2\0\3\u0139\10\0\7\u0139"+
    "\4\0\2\u013a\2\0\4\u013a\1\0\6\u013a\1\140\1\u013a"+
    "\2\0\3\u013a\10\0\7\u013a\4\0\2\u013b\2\0\4\u013b"+
    "\1\0\6\u013b\1\114\1\u013b\2\0\3\u013b\10\0\7\u013b"+
    "\4\0\2\u013c\2\0\4\u013c\1\0\6\u013c\1\132\1\u013c"+
    "\2\0\3\u013c\10\0\7\u013c\4\0\2\u013d\2\0\4\u013d"+
    "\1\0\6\u013d\1\276\1\u013d\2\0\3\u013d\10\0\7\u013d"+
    "\4\0\2\u013e\2\0\4\u013e\1\0\6\u013e\1\312\1\u013e"+
    "\2\0\3\u013e\10\0\7\u013e\4\0\2\u013f\2\0\4\u013f"+
    "\1\0\6\u013f\1\140\1\u013f\2\0\3\u013f\10\0\7\u013f"+
    "\23\0\1\114\31\0\2\u0140\2\0\4\u0140\1\0\6\u0140"+
    "\1\132\1\u0140\2\0\3\u0140\10\0\7\u0140\4\0\2\u0141"+
    "\2\0\4\u0141\1\0\6\u0141\1\276\1\u0141\2\0\3\u0141"+
    "\10\0\7\u0141\4\0\2\u0142\2\0\4\u0142\1\0\6\u0142"+
    "\1\312\1\u0142\2\0\3\u0142\10\0\7\u0142\4\0\2\u0143"+
    "\2\0\4\u0143\1\0\6\u0143\1\140\1\u0143\2\0\3\u0143"+
    "\10\0\7\u0143\23\0\1\132\31\0\2\u0144\2\0\4\u0144"+
    "\1\0\6\u0144\1\276\1\u0144\2\0\3\u0144\10\0\7\u0144"+
    "\4\0\2\u0145\2\0\4\u0145\1\0\6\u0145\1\312\1\u0145"+
    "\2\0\3\u0145\10\0\7\u0145\23\0\1\140\31\0\2\u0146"+
    "\2\0\4\u0146\1\0\6\u0146\1\276\1\u0146\2\0\3\u0146"+
    "\10\0\7\u0146\4\0\2\u0147\2\0\4\u0147\1\0\6\u0147"+
    "\1\312\1\u0147\2\0\3\u0147\10\0\7\u0147\4\0\2\u0148"+
    "\2\0\4\u0148\1\0\6\u0148\1\276\1\u0148\2\0\3\u0148"+
    "\10\0\7\u0148\4\0\2\u0149\2\0\4\u0149\1\0\6\u0149"+
    "\1\312\1\u0149\2\0\3\u0149\10\0\7\u0149\4\0\2\u014a"+
    "\2\0\4\u014a\1\0\6\u014a\1\276\1\u014a\2\0\3\u014a"+
    "\10\0\7\u014a\4\0\2\u014b\2\0\4\u014b\1\0\6\u014b"+
    "\1\312\1\u014b\2\0\3\u014b\10\0\7\u014b\4\0\2\u014c"+
    "\2\0\4\u014c\1\0\6\u014c\1\276\1\u014c\2\0\3\u014c"+
    "\10\0\7\u014c\4\0\2\u014d\2\0\4\u014d\1\0\6\u014d"+
    "\1\312\1\u014d\2\0\3\u014d\10\0\7\u014d\4\0\2\u014e"+
    "\2\0\4\u014e\1\0\6\u014e\1\276\1\u014e\2\0\3\u014e"+
    "\10\0\7\u014e\4\0\2\u014f\2\0\4\u014f\1\0\6\u014f"+
    "\1\312\1\u014f\2\0\3\u014f\10\0\7\u014f\4\0\2\u0150"+
    "\2\0\4\u0150\1\0\6\u0150\1\276\1\u0150\2\0\3\u0150"+
    "\10\0\7\u0150\4\0\2\u0151\2\0\4\u0151\1\0\6\u0151"+
    "\1\312\1\u0151\2\0\3\u0151\10\0\7\u0151\4\0\2\u0152"+
    "\2\0\4\u0152\1\0\6\u0152\1\276\1\u0152\2\0\3\u0152"+
    "\10\0\7\u0152\4\0\2\u0153\2\0\4\u0153\1\0\6\u0153"+
    "\1\312\1\u0153\2\0\3\u0153\10\0\7\u0153\4\0\2\u0154"+
    "\2\0\4\u0154\1\0\6\u0154\1\276\1\u0154\2\0\3\u0154"+
    "\10\0\7\u0154\4\0\2\u0155\2\0\4\u0155\1\0\6\u0155"+
    "\1\312\1\u0155\2\0\3\u0155\10\0\7\u0155\4\0\2\u0156"+
    "\2\0\4\u0156\1\0\6\u0156\1\276\1\u0156\2\0\3\u0156"+
    "\10\0\7\u0156\4\0\2\u0157\2\0\4\u0157\1\0\6\u0157"+
    "\1\312\1\u0157\2\0\3\u0157\10\0\7\u0157\4\0\2\u0158"+
    "\2\0\4\u0158\1\0\6\u0158\1\276\1\u0158\2\0\3\u0158"+
    "\10\0\7\u0158\4\0\2\u0159\2\0\4\u0159\1\0\6\u0159"+
    "\1\312\1\u0159\2\0\3\u0159\10\0\7\u0159\23\0\1\276"+
    "\31\0\2\u015a\2\0\4\u015a\1\0\6\u015a\1\312\1\u015a"+
    "\2\0\3\u015a\10\0\7\u015a\23\0\1\312\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13858];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\13\1\1\0\3\1\1\0"+
    "\1\11\1\1\1\11\1\1\2\0\3\1\1\0\1\1"+
    "\3\0\1\11\2\1\1\0\1\1\7\0\1\1\1\0"+
    "\1\1\7\0\1\1\11\0\1\1\116\0\1\11\14\0"+
    "\1\11\273\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3450) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 12: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 13: break;
          case 3: 
            { System.out.printf("\n>>> Identificador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 14: break;
          case 4: 
            { System.out.printf("\n>>> Integer encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 15: break;
          case 5: 
            { System.out.printf(">>> Operador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 16: break;
          case 6: 
            { System.out.printf("\n>>> String encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 17: break;
          case 7: 
            { System.out.printf("\n>>> Double encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 18: break;
          case 8: 
            { System.out.printf("\n>>> Sentencia encontrada: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 19: break;
          case 9: 
            { System.out.printf("\n>>> Bool encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 20: break;
          case 10: 
            { System.out.printf("\n>>> IF encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 21: break;
          case 11: 
            { System.out.printf("\n>>> WHILE encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
