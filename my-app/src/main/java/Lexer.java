/* The following code was generated by JFlex 1.7.0 */

import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/mr.grassho/Documents/Teoria1/teoria1/my-app/src/main/jflex/Lexico1.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENTS_A = 2;
  public static final int COMMENTS_B = 4;
  public static final int IF = 6;
  public static final int WHILE = 8;
  public static final int DISPLAY = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\27\1\4\1\2\1\0\1\4\1\1\16\27\4\0\1\0\1\21"+
    "\1\3\1\0\1\25\1\0\1\24\1\0\1\31\1\32\3\0\1\60"+
    "\1\7\1\61\1\5\11\5\1\0\1\30\1\23\1\20\1\22\2\0"+
    "\1\42\1\26\1\56\1\35\1\55\1\50\1\47\1\26\1\36\2\26"+
    "\1\41\1\57\1\46\1\51\1\40\1\26\1\45\1\37\1\44\4\26"+
    "\1\43\1\26\4\0\1\25\1\0\1\15\3\26\1\13\1\14\1\26"+
    "\1\53\1\54\2\26\1\16\5\26\1\11\1\17\1\10\1\12\1\26"+
    "\1\52\3\26\1\33\1\6\1\34\1\0\41\27\1\0\1\4\4\25"+
    "\4\0\1\25\2\0\1\27\7\0\1\25\4\0\1\25\5\0\21\25"+
    "\1\26\5\25\1\0\31\25\1\26\5\25\1\0\u01ca\25\4\0\14\25"+
    "\16\0\5\25\7\0\1\25\1\0\1\25\21\0\160\27\5\25\1\0"+
    "\2\25\2\0\4\25\10\0\1\25\1\0\3\25\1\0\1\25\1\0"+
    "\24\25\1\0\123\25\1\0\213\25\1\0\5\27\2\0\236\25\11\0"+
    "\46\25\2\0\1\25\7\0\47\25\7\0\1\25\1\0\55\27\1\0"+
    "\1\27\1\0\2\27\1\0\2\27\1\0\1\27\10\0\33\25\5\0"+
    "\3\25\15\0\5\27\6\0\1\25\4\0\13\27\5\0\53\25\37\27"+
    "\4\0\2\25\1\27\143\25\1\0\1\25\10\27\1\0\6\27\2\25"+
    "\2\27\1\0\4\27\2\25\12\27\3\25\2\0\1\25\17\0\1\27"+
    "\1\25\1\27\36\25\33\27\2\0\131\25\13\27\1\25\16\0\12\27"+
    "\41\25\11\27\2\25\4\0\1\25\5\0\26\25\4\27\1\25\11\27"+
    "\1\25\3\27\1\25\5\27\22\0\31\25\3\27\104\0\1\25\1\0"+
    "\13\25\67\0\33\27\1\0\4\27\66\25\3\27\1\25\22\27\1\25"+
    "\7\27\12\25\2\27\2\0\12\27\1\0\7\25\1\0\7\25\1\0"+
    "\3\27\1\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25\1\0"+
    "\1\25\3\0\4\25\2\0\1\27\1\25\7\27\2\0\2\27\2\0"+
    "\3\27\1\25\10\0\1\27\4\0\2\25\1\0\3\25\2\27\2\0"+
    "\12\27\4\25\7\0\1\25\5\0\3\27\1\0\6\25\4\0\2\25"+
    "\2\0\26\25\1\0\7\25\1\0\2\25\1\0\2\25\1\0\2\25"+
    "\2\0\1\27\1\0\5\27\4\0\2\27\2\0\3\27\3\0\1\27"+
    "\7\0\4\25\1\0\1\25\7\0\14\27\3\25\1\27\13\0\3\27"+
    "\1\0\11\25\1\0\3\25\1\0\26\25\1\0\7\25\1\0\2\25"+
    "\1\0\5\25\2\0\1\27\1\25\10\27\1\0\3\27\1\0\3\27"+
    "\2\0\1\25\17\0\2\25\2\27\2\0\12\27\1\0\1\25\17\0"+
    "\3\27\1\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25\1\0"+
    "\2\25\1\0\5\25\2\0\1\27\1\25\7\27\2\0\2\27\2\0"+
    "\3\27\10\0\2\27\4\0\2\25\1\0\3\25\2\27\2\0\12\27"+
    "\1\0\1\25\20\0\1\27\1\25\1\0\6\25\3\0\3\25\1\0"+
    "\4\25\3\0\2\25\1\0\1\25\1\0\2\25\3\0\2\25\3\0"+
    "\3\25\3\0\14\25\4\0\5\27\3\0\3\27\1\0\4\27\2\0"+
    "\1\25\6\0\1\27\16\0\12\27\11\0\1\25\7\0\3\27\1\0"+
    "\10\25\1\0\3\25\1\0\27\25\1\0\12\25\1\0\5\25\3\0"+
    "\1\25\7\27\1\0\3\27\1\0\4\27\7\0\2\27\1\0\2\25"+
    "\6\0\2\25\2\27\2\0\12\27\22\0\2\27\1\0\10\25\1\0"+
    "\3\25\1\0\27\25\1\0\12\25\1\0\5\25\2\0\1\27\1\25"+
    "\7\27\1\0\3\27\1\0\4\27\7\0\2\27\7\0\1\25\1\0"+
    "\2\25\2\27\2\0\12\27\1\0\2\25\17\0\2\27\1\0\10\25"+
    "\1\0\3\25\1\0\51\25\2\0\1\25\7\27\1\0\3\27\1\0"+
    "\4\27\1\25\10\0\1\27\10\0\2\25\2\27\2\0\12\27\12\0"+
    "\6\25\2\0\2\27\1\0\22\25\3\0\30\25\1\0\11\25\1\0"+
    "\1\25\2\0\7\25\3\0\1\27\4\0\6\27\1\0\1\27\1\0"+
    "\10\27\22\0\2\27\15\0\60\25\1\27\2\25\7\27\4\0\10\25"+
    "\10\27\1\0\12\27\47\0\2\25\1\0\1\25\2\0\2\25\1\0"+
    "\1\25\2\0\1\25\6\0\4\25\1\0\7\25\1\0\3\25\1\0"+
    "\1\25\1\0\1\25\2\0\2\25\1\0\4\25\1\27\2\25\6\27"+
    "\1\0\2\27\1\25\2\0\5\25\1\0\1\25\1\0\6\27\2\0"+
    "\12\27\2\0\4\25\40\0\1\25\27\0\2\27\6\0\12\27\13\0"+
    "\1\27\1\0\1\27\1\0\1\27\4\0\2\27\10\25\1\0\44\25"+
    "\4\0\24\27\1\0\2\27\5\25\13\27\1\0\44\27\11\0\1\27"+
    "\71\0\53\25\24\27\1\25\12\27\6\0\6\25\4\27\4\25\3\27"+
    "\1\25\3\27\2\25\7\27\3\25\4\27\15\25\14\27\1\25\17\27"+
    "\2\0\46\25\1\0\1\25\5\0\1\25\2\0\53\25\1\0\u014d\25"+
    "\1\0\4\25\2\0\7\25\1\0\1\25\1\0\4\25\2\0\51\25"+
    "\1\0\4\25\2\0\41\25\1\0\4\25\2\0\7\25\1\0\1\25"+
    "\1\0\4\25\2\0\17\25\1\0\71\25\1\0\4\25\2\0\103\25"+
    "\2\0\3\27\40\0\20\25\20\0\125\25\14\0\u026c\25\2\0\21\25"+
    "\1\0\32\25\5\0\113\25\3\0\3\25\17\0\15\25\1\0\4\25"+
    "\3\27\13\0\22\25\3\27\13\0\22\25\2\27\14\0\15\25\1\0"+
    "\3\25\1\0\2\27\14\0\64\25\40\27\3\0\1\25\3\0\2\25"+
    "\1\27\2\0\12\27\41\0\3\27\2\0\12\27\6\0\130\25\10\0"+
    "\51\25\1\27\1\25\5\0\106\25\12\0\35\25\3\0\14\27\4\0"+
    "\14\27\12\0\12\27\36\25\2\0\5\25\13\0\54\25\4\0\21\27"+
    "\7\25\2\27\6\0\12\27\46\0\27\25\5\27\4\0\65\25\12\27"+
    "\1\0\35\27\2\0\13\27\6\0\12\27\15\0\1\25\130\0\5\27"+
    "\57\25\21\27\7\25\4\0\12\27\21\0\11\27\14\0\3\27\36\25"+
    "\15\27\2\25\12\27\54\25\16\27\14\0\44\25\24\27\10\0\12\27"+
    "\3\0\3\25\12\27\44\25\122\0\3\27\1\0\25\27\4\25\1\27"+
    "\4\25\3\27\2\25\11\0\300\25\47\27\25\0\4\27\u0116\25\2\0"+
    "\6\25\2\0\46\25\2\0\6\25\2\0\10\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\37\25\2\0\65\25\1\0\7\25\1\0"+
    "\1\25\3\0\3\25\1\0\7\25\3\0\4\25\2\0\6\25\4\0"+
    "\15\25\5\0\3\25\1\0\7\25\16\0\5\27\32\0\5\27\20\0"+
    "\2\25\23\0\1\25\13\0\5\27\5\0\6\27\1\0\1\25\15\0"+
    "\1\25\20\0\15\25\3\0\33\25\25\0\15\27\4\0\1\27\3\0"+
    "\14\27\21\0\1\25\4\0\1\25\2\0\12\25\1\0\1\25\3\0"+
    "\5\25\6\0\1\25\1\0\1\25\1\0\1\25\1\0\4\25\1\0"+
    "\13\25\2\0\4\25\5\0\5\25\4\0\1\25\21\0\51\25\u0a77\0"+
    "\57\25\1\0\57\25\1\0\205\25\6\0\4\25\3\27\2\25\14\0"+
    "\46\25\1\0\1\25\5\0\1\25\2\0\70\25\7\0\1\25\17\0"+
    "\1\27\27\25\11\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25"+
    "\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0\40\27"+
    "\57\0\1\25\u01d5\0\3\25\31\0\11\25\6\27\1\0\5\25\2\0"+
    "\5\25\4\0\126\25\2\0\2\27\2\0\3\25\1\0\132\25\1\0"+
    "\4\25\5\0\51\25\3\0\136\25\21\0\33\25\65\0\20\25\u0200\0"+
    "\u19b6\25\112\0\u51cd\25\63\0\u048d\25\103\0\56\25\2\0\u010d\25\3\0"+
    "\20\25\12\27\2\25\24\0\57\25\1\27\4\0\12\27\1\0\31\25"+
    "\7\0\1\27\120\25\2\27\45\0\11\25\2\0\147\25\2\0\4\25"+
    "\1\0\4\25\14\0\13\25\115\0\12\25\1\27\3\25\1\27\4\25"+
    "\1\27\27\25\5\27\20\0\1\25\7\0\64\25\14\0\2\27\62\25"+
    "\21\27\13\0\12\27\6\0\22\27\6\25\3\0\1\25\4\0\12\27"+
    "\34\25\10\27\2\0\27\25\15\27\14\0\35\25\3\0\4\27\57\25"+
    "\16\27\16\0\1\25\12\27\46\0\51\25\16\27\11\0\3\25\1\27"+
    "\10\25\2\27\2\0\12\27\6\0\27\25\3\0\1\25\1\27\4\0"+
    "\60\25\1\27\1\25\3\27\2\25\2\27\5\25\2\27\1\25\1\27"+
    "\1\25\30\0\3\25\2\0\13\25\5\27\2\0\3\25\2\27\12\0"+
    "\6\25\2\0\6\25\2\0\6\25\11\0\7\25\1\0\7\25\221\0"+
    "\43\25\10\27\1\0\2\27\2\0\12\27\6\0\u2ba4\25\14\0\27\25"+
    "\4\0\61\25\u2104\0\u016e\25\2\0\152\25\46\0\7\25\14\0\5\25"+
    "\5\0\1\25\1\27\12\25\1\0\15\25\1\0\5\25\1\0\1\25"+
    "\1\0\2\25\1\0\2\25\1\0\154\25\41\0\u016b\25\22\0\100\25"+
    "\2\0\66\25\50\0\15\25\3\0\20\27\20\0\7\27\14\0\2\25"+
    "\30\0\3\25\31\0\1\25\6\0\5\25\1\0\207\25\2\0\1\27"+
    "\4\0\1\25\13\0\12\27\7\0\32\25\4\0\1\25\1\0\32\25"+
    "\13\0\131\25\3\0\6\25\2\0\6\25\2\0\6\25\2\0\3\25"+
    "\3\0\2\25\3\0\2\25\22\0\3\27\4\0\14\25\1\0\32\25"+
    "\1\0\23\25\1\0\2\25\1\0\17\25\2\0\16\25\42\0\173\25"+
    "\105\0\65\25\210\0\1\27\202\0\35\25\3\0\61\25\57\0\37\25"+
    "\21\0\33\25\65\0\36\25\2\0\44\25\4\0\10\25\1\0\5\25"+
    "\52\0\236\25\2\0\12\27\u0356\0\6\25\2\0\1\25\1\0\54\25"+
    "\1\0\2\25\3\0\1\25\2\0\27\25\252\0\26\25\12\0\32\25"+
    "\106\0\70\25\6\0\2\25\100\0\1\25\3\27\1\0\2\27\5\0"+
    "\4\27\4\25\1\0\3\25\1\0\33\25\4\0\3\27\4\0\1\27"+
    "\40\0\35\25\203\0\66\25\12\0\26\25\12\0\23\25\215\0\111\25"+
    "\u03b7\0\3\27\65\25\17\27\37\0\12\27\20\0\3\27\55\25\13\27"+
    "\2\0\1\27\22\0\31\25\7\0\12\27\6\0\3\27\44\25\16\27"+
    "\1\0\12\27\100\0\3\27\60\25\16\27\4\25\13\0\12\27\u04a6\0"+
    "\53\25\15\27\10\0\12\27\u0936\0\u036f\25\221\0\143\25\u0b9d\0\u042f\25"+
    "\u33d1\0\u0239\25\u04c7\0\105\25\13\0\1\25\56\27\20\0\4\27\15\25"+
    "\u4060\0\2\25\u2163\0\5\27\3\0\26\27\2\0\7\27\36\0\4\27"+
    "\224\0\3\27\u01bb\0\125\25\1\0\107\25\1\0\2\25\2\0\1\25"+
    "\2\0\2\25\2\0\4\25\1\0\14\25\1\0\1\25\1\0\7\25"+
    "\1\0\101\25\1\0\4\25\2\0\10\25\1\0\7\25\1\0\34\25"+
    "\1\0\4\25\1\0\5\25\1\0\1\25\3\0\7\25\1\0\u0154\25"+
    "\2\0\31\25\1\0\31\25\1\0\37\25\1\0\31\25\1\0\37\25"+
    "\1\0\31\25\1\0\37\25\1\0\31\25\1\0\37\25\1\0\31\25"+
    "\1\0\10\25\2\0\62\27\u1600\0\4\25\1\0\33\25\1\0\2\25"+
    "\1\0\1\25\2\0\1\25\1\0\12\25\1\0\4\25\1\0\1\25"+
    "\1\0\1\25\6\0\1\25\4\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\3\25\1\0\2\25\1\0\1\25\2\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\1\25\1\0\2\25\1\0\1\25"+
    "\2\0\4\25\1\0\7\25\1\0\4\25\1\0\4\25\1\0\1\25"+
    "\1\0\12\25\1\0\21\25\5\0\3\25\1\0\5\25\1\0\21\25"+
    "\u1144\0\ua6d7\25\51\0\u1035\25\13\0\336\25\u3fe2\0\u021e\25\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\27\36\0\140\27\200\0\360\27\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\2\1\2\2\3\3\1\4\1\1\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\10\3\1\1"+
    "\2\14\4\1\1\15\1\0\1\16\1\17\2\3\1\20"+
    "\1\21\1\22\1\23\1\24\7\3\1\25\1\3\5\0"+
    "\1\26\1\0\4\3\1\27\5\3\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\7\3\1\0\4\3\1\35\2\3"+
    "\1\0\5\3\1\0\4\3\3\0\2\3\3\0\2\3"+
    "\3\0\2\3\25\0\1\36\1\37\11\0\1\40\1\41"+
    "\15\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\372\0\372\0\372\0\372\0\372\0\u0352\0\u0384"+
    "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514"+
    "\0\372\0\u0546\0\u0578\0\u05aa\0\u05dc\0\372\0\u060e\0\u0640"+
    "\0\372\0\u0672\0\u06a4\0\372\0\372\0\372\0\372\0\372"+
    "\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u01f4"+
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u05dc\0\372\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u01f4\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\372\0\372\0\372\0\372\0\u0b22\0\u01f4"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u01f4\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130"+
    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0"+
    "\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450"+
    "\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0"+
    "\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\372\0\372"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u18ce\0\372\0\372\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\6\1\7\1\6\1\10\1\11\1\6\1\12\3\13"+
    "\1\14\3\13\1\15\1\16\1\17\1\20\1\21\2\13"+
    "\1\6\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\7\13\1\33\1\13\1\34\1\13\1\35"+
    "\1\36\2\13\1\37\2\6\1\40\1\41\55\6\1\42"+
    "\1\43\61\6\1\44\72\6\10\45\5\6\2\45\6\6"+
    "\23\45\2\6\65\0\1\46\2\47\1\0\11\47\1\0"+
    "\1\47\4\0\1\47\6\0\23\47\11\0\1\50\60\0"+
    "\1\51\1\50\57\0\1\13\2\0\1\13\1\52\6\13"+
    "\5\0\3\13\5\0\23\13\7\0\1\13\2\0\10\13"+
    "\5\0\3\13\5\0\23\13\7\0\1\13\2\0\5\13"+
    "\1\53\2\13\5\0\3\13\5\0\23\13\22\0\1\54"+
    "\61\0\1\55\61\0\1\56\61\0\1\57\65\0\1\60"+
    "\42\0\1\13\2\0\10\13\5\0\3\13\5\0\1\13"+
    "\1\61\16\13\1\62\2\13\7\0\1\13\2\0\10\13"+
    "\5\0\3\13\5\0\11\13\1\63\11\13\7\0\1\13"+
    "\2\0\10\13\5\0\3\13\5\0\7\13\1\64\13\13"+
    "\7\0\1\13\2\0\10\13\5\0\3\13\5\0\10\13"+
    "\1\65\12\13\7\0\1\13\2\0\10\13\5\0\3\13"+
    "\5\0\4\13\1\66\16\13\7\0\1\13\2\0\10\13"+
    "\5\0\3\13\5\0\16\13\1\67\4\13\7\0\1\13"+
    "\2\0\4\13\1\70\3\13\5\0\3\13\5\0\23\13"+
    "\7\0\1\13\2\0\10\13\5\0\3\13\5\0\11\13"+
    "\1\71\11\13\62\0\1\72\3\0\1\41\137\0\1\73"+
    "\61\0\1\74\61\0\1\75\6\0\1\76\2\0\10\76"+
    "\5\0\3\76\1\77\4\0\23\76\5\0\1\46\2\100"+
    "\1\0\11\100\1\0\1\100\4\0\1\100\6\0\23\100"+
    "\7\0\1\50\61\0\1\13\2\0\2\13\1\101\5\13"+
    "\5\0\3\13\5\0\23\13\7\0\1\13\2\0\6\13"+
    "\1\102\1\13\5\0\3\13\5\0\23\13\7\0\1\13"+
    "\2\0\10\13\5\0\3\13\5\0\2\13\1\103\20\13"+
    "\7\0\1\13\2\0\10\13\5\0\3\13\5\0\21\13"+
    "\1\104\1\13\7\0\1\13\2\0\10\13\5\0\3\13"+
    "\5\0\7\13\1\105\13\13\7\0\1\13\2\0\10\13"+
    "\5\0\3\13\5\0\10\13\1\106\12\13\7\0\1\13"+
    "\2\0\10\13\5\0\3\13\5\0\14\13\1\107\6\13"+
    "\7\0\1\13\2\0\10\13\5\0\3\13\5\0\14\13"+
    "\1\110\6\13\7\0\1\13\2\0\10\13\5\0\3\13"+
    "\5\0\17\13\1\111\3\13\7\0\1\13\2\0\10\13"+
    "\5\0\3\13\5\0\1\112\22\13\63\0\1\113\61\0"+
    "\1\114\60\0\1\115\61\0\1\116\4\0\1\46\2\117"+
    "\1\0\11\117\1\0\1\117\4\0\1\117\6\0\23\117"+
    "\7\0\1\13\2\0\3\13\1\120\4\13\5\0\3\13"+
    "\5\0\23\13\7\0\1\13\2\0\7\13\1\101\5\0"+
    "\3\13\5\0\23\13\7\0\1\13\2\0\10\13\5\0"+
    "\3\13\5\0\3\13\1\121\17\13\7\0\1\13\2\0"+
    "\10\13\5\0\3\13\5\0\4\13\1\122\16\13\7\0"+
    "\1\13\2\0\10\13\5\0\3\13\5\0\1\13\1\123"+
    "\21\13\7\0\1\13\2\0\10\13\5\0\3\13\5\0"+
    "\12\13\1\124\10\13\7\0\1\13\2\0\10\13\5\0"+
    "\3\13\5\0\5\13\1\63\15\13\7\0\1\13\2\0"+
    "\6\13\1\125\1\13\5\0\3\13\5\0\23\13\7\0"+
    "\1\13\2\0\10\13\5\0\3\13\5\0\1\126\2\13"+
    "\1\127\17\13\5\0\1\46\2\130\1\0\11\130\1\0"+
    "\1\130\4\0\1\130\6\0\23\130\7\0\1\13\2\0"+
    "\10\13\5\0\3\13\5\0\4\13\1\131\16\13\7\0"+
    "\1\13\2\0\10\13\5\0\3\13\5\0\5\13\1\132"+
    "\15\13\7\0\1\13\2\0\10\13\5\0\3\13\5\0"+
    "\11\13\1\133\11\13\7\0\1\13\2\0\10\13\5\0"+
    "\3\13\5\0\10\13\1\134\12\13\7\0\1\13\2\0"+
    "\3\13\1\135\4\13\5\0\3\13\5\0\23\13\7\0"+
    "\1\13\2\0\10\13\5\0\3\13\5\0\20\13\1\136"+
    "\2\13\7\0\1\13\2\0\10\13\5\0\3\13\5\0"+
    "\10\13\1\137\12\13\5\0\1\46\2\140\1\0\11\140"+
    "\1\0\1\140\4\0\1\140\6\0\23\140\7\0\1\13"+
    "\2\0\10\13\5\0\3\13\5\0\5\13\1\141\15\13"+
    "\7\0\1\13\2\0\10\13\5\0\3\13\5\0\10\13"+
    "\1\142\12\13\7\0\1\13\2\0\10\13\5\0\3\13"+
    "\5\0\12\13\1\105\10\13\7\0\1\13\2\0\10\13"+
    "\5\0\3\13\5\0\5\13\1\143\15\13\7\0\1\13"+
    "\2\0\10\13\5\0\3\13\5\0\21\13\1\144\1\13"+
    "\7\0\1\13\2\0\10\13\5\0\3\13\5\0\14\13"+
    "\1\145\6\13\5\0\1\46\2\146\1\0\11\146\1\0"+
    "\1\146\4\0\1\146\6\0\23\146\7\0\1\13\2\0"+
    "\10\13\5\0\3\13\5\0\6\13\1\105\14\13\7\0"+
    "\1\13\2\0\10\13\5\0\3\13\5\0\20\13\1\147"+
    "\2\13\7\0\1\13\2\0\10\13\5\0\3\13\5\0"+
    "\22\13\1\150\7\0\1\13\2\0\10\13\5\0\3\13"+
    "\5\0\4\13\1\151\16\13\7\0\1\13\2\0\10\13"+
    "\5\0\3\13\5\0\12\13\1\152\10\13\5\0\1\46"+
    "\2\153\1\0\11\153\1\0\1\153\4\0\1\153\6\0"+
    "\23\153\7\0\1\13\1\0\1\154\10\13\5\0\3\13"+
    "\5\0\23\13\7\0\1\13\1\0\1\155\10\13\5\0"+
    "\3\13\5\0\23\13\7\0\1\13\2\0\10\13\5\0"+
    "\3\13\5\0\5\13\1\156\15\13\7\0\1\13\2\0"+
    "\10\13\5\0\3\13\5\0\10\13\1\157\12\13\5\0"+
    "\1\46\2\160\1\0\11\160\1\0\1\160\4\0\1\160"+
    "\6\0\23\160\41\0\1\161\61\0\1\162\27\0\1\13"+
    "\2\0\10\13\5\0\3\13\5\0\10\13\1\163\12\13"+
    "\7\0\1\13\2\0\10\13\5\0\3\13\5\0\5\13"+
    "\1\164\15\13\5\0\1\46\2\165\1\0\11\165\1\0"+
    "\1\165\4\0\1\165\6\0\23\165\57\0\1\166\61\0"+
    "\1\167\11\0\1\13\2\0\10\13\5\0\3\13\5\0"+
    "\20\13\1\170\2\13\7\0\1\13\2\0\10\13\5\0"+
    "\3\13\5\0\22\13\1\171\5\0\1\46\2\172\1\0"+
    "\11\172\1\0\1\172\4\0\1\172\6\0\23\172\60\0"+
    "\1\173\61\0\1\174\10\0\1\13\1\0\1\175\10\13"+
    "\5\0\3\13\5\0\23\13\7\0\1\13\1\0\1\176"+
    "\10\13\5\0\3\13\5\0\23\13\5\0\1\46\2\177"+
    "\1\0\11\177\1\0\1\177\4\0\1\177\6\0\23\177"+
    "\46\0\1\200\61\0\1\201\54\0\1\202\61\0\1\203"+
    "\25\0\1\46\2\204\1\0\11\204\1\0\1\204\4\0"+
    "\1\204\6\0\23\204\40\0\1\205\61\0\1\206\100\0"+
    "\1\207\61\0\1\210\7\0\1\46\2\211\1\0\11\211"+
    "\1\0\1\211\4\0\1\211\6\0\23\211\53\0\1\212"+
    "\61\0\1\213\66\0\1\214\61\0\1\215\6\0\1\46"+
    "\2\216\1\0\11\216\1\0\1\216\4\0\1\216\6\0"+
    "\23\216\50\0\1\217\61\0\1\220\57\0\1\221\61\0"+
    "\1\222\20\0\1\46\2\223\1\0\11\223\1\0\1\223"+
    "\4\0\1\223\6\0\23\223\40\0\1\224\61\0\1\225"+
    "\26\0\1\46\2\226\1\0\11\226\1\0\1\226\4\0"+
    "\1\226\6\0\23\226\53\0\1\227\61\0\1\230\13\0"+
    "\1\46\2\231\1\0\11\231\1\0\1\231\4\0\1\231"+
    "\6\0\23\231\50\0\1\232\61\0\1\233\16\0\1\46"+
    "\2\234\1\0\11\234\1\0\1\234\4\0\1\234\6\0"+
    "\23\234\5\0\1\46\2\235\1\0\11\235\1\0\1\235"+
    "\4\0\1\235\6\0\23\235\5\0\1\46\2\236\1\0"+
    "\11\236\1\0\1\236\4\0\1\236\6\0\23\236\5\0"+
    "\1\46\2\237\1\0\11\237\1\0\1\237\4\0\1\237"+
    "\6\0\23\237\5\0\1\46\2\240\1\0\11\240\1\0"+
    "\1\240\4\0\1\240\6\0\23\240\5\0\1\46\2\241"+
    "\1\0\11\241\1\0\1\241\4\0\1\241\6\0\23\241"+
    "\5\0\1\46\2\242\1\0\11\242\1\0\1\242\4\0"+
    "\1\242\6\0\23\242\5\0\1\46\2\243\1\0\11\243"+
    "\1\0\1\243\4\0\1\243\6\0\23\243\5\0\1\46"+
    "\2\244\1\0\11\244\1\0\1\244\4\0\1\244\6\0"+
    "\23\244\5\0\1\46\2\245\1\0\11\245\1\0\1\245"+
    "\4\0\1\245\6\0\23\245\5\0\1\46\2\246\1\0"+
    "\11\246\1\0\1\246\4\0\1\246\6\0\23\246\5\0"+
    "\1\46\2\247\1\0\11\247\1\0\1\247\4\0\1\247"+
    "\6\0\23\247\5\0\1\46\2\250\1\0\11\250\1\0"+
    "\1\250\4\0\1\250\6\0\23\250\5\0\1\46\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\13\1\5\11\12\1\1\11\4\1\1\11"+
    "\1\0\1\1\1\11\2\1\5\11\11\1\5\0\1\11"+
    "\1\0\12\1\4\11\1\0\10\1\1\0\7\1\1\0"+
    "\5\1\1\0\4\1\3\0\2\1\3\0\2\1\3\0"+
    "\2\1\25\0\2\11\11\0\2\11\15\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  BufferedWriter  bw;
  File file;
  ArrayList<String> simbolos;

  public void writeTable(String str) throws IOException{
    if (!simbolos.contains(str.split(",")[0])) {
      bw.write(str);
      bw.newLine();
      bw.flush();
      simbolos.add(str.split(",")[0]);
    }
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    try {
    file = new File("../ts.txt");
    bw = new BufferedWriter(new FileWriter(file));
    bw.write("NOMBRE,TOKEN,TIPO,VALOR,LONG");
    bw.newLine();
    bw.flush();
    simbolos = new ArrayList<>();
  } catch (IOException e) {
    e.printStackTrace();
  }
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2876) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 34: break;
          case 2: 
            { System.out.printf("\n>>> Integer encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_INT,,"+yytext()+",");
            } 
            // fall through
          case 35: break;
          case 3: 
            { System.out.printf("\n>>> Identificador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",ID,,"+yytext()+",");
            } 
            // fall through
          case 36: break;
          case 4: 
            { System.out.printf("\n>>> Simbolo Asignacion encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 37: break;
          case 5: 
            { System.out.printf("\n>>> Simbolo Mayor encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 38: break;
          case 6: 
            { System.out.printf("\n>>> Simbolo Meno encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 39: break;
          case 7: 
            { System.out.printf("\n>>> Simbolo Punto y Coma encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 40: break;
          case 8: 
            { System.out.printf("\n>>> Simbolo Parentesis Abre encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 41: break;
          case 9: 
            { System.out.printf("\n>>> Simbolo Parentesis Cierra encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 42: break;
          case 10: 
            { System.out.printf("\n>>> Simbolo Llaves Abre encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 43: break;
          case 11: 
            { System.out.printf("\n>>> Simbolo Llaves Cierra encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 44: break;
          case 12: 
            { 
            } 
            // fall through
          case 45: break;
          case 13: 
            { System.out.printf("\n>>> String encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_STR,,"+yytext()+","+yytext().length());
            } 
            // fall through
          case 46: break;
          case 14: 
            { System.out.printf("\n>>> Float encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_FLOAT,,"+yytext()+",");
            } 
            // fall through
          case 47: break;
          case 15: 
            { System.out.printf("\n>>> Simbolo OR: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);
            } 
            // fall through
          case 48: break;
          case 16: 
            { System.out.printf("\n>>> Simbolo Igual encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 49: break;
          case 17: 
            { System.out.printf("\n>>> Simbolo Distinto encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 50: break;
          case 18: 
            { System.out.printf("\n>>> Simbolo MenorIgual  encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 51: break;
          case 19: 
            { System.out.printf("\n>>> Simbolo MayorIgual encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 52: break;
          case 20: 
            { System.out.printf("\n>>> Simbolo AND: [%s] encontrado en linea %d, columna %d\n",yytext(), yyline, yycolumn);
            } 
            // fall through
          case 53: break;
          case 21: 
            { System.out.printf("\n>>> if en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 54: break;
          case 22: 
            { System.out.printf("\n>>> DISPLAY encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);yybegin(YYINITIAL);
            } 
            // fall through
          case 55: break;
          case 23: 
            { System.out.printf("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn);yybegin(DISPLAY);
            } 
            // fall through
          case 56: break;
          case 24: 
            { yybegin(COMMENTS_A); System.out.printf("\n>>> Empieza comentario A en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 57: break;
          case 25: 
            { yybegin(COMMENTS_B); System.out.printf("\n>>> Empieza comentario B en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 58: break;
          case 26: 
            { yybegin(YYINITIAL); System.out.printf("\n>>> Termina comentario A en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 59: break;
          case 27: 
            { yybegin(COMMENTS_A); System.out.printf("\n>>> Termina comentario B en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 60: break;
          case 28: 
            { System.out.printf("\n>>> Bool encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_BOOL,,"+yytext()+",");
            } 
            // fall through
          case 61: break;
          case 29: 
            { System.out.printf("\n>>> while en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 62: break;
          case 30: 
            { System.out.printf("\n>>> DECLARE en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 63: break;
          case 31: 
            { System.out.printf("\n>>> PROGRAM en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 64: break;
          case 32: 
            { System.out.printf("\n>>> ENDDECLARE en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 65: break;
          case 33: 
            { System.out.printf("\n>>> ENDPROGRAM en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
