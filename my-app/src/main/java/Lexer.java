/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/mr.grassho/Documents/Teoria1/teoria1/my-app/src/main/jflex/Lexico1.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\40\1\3\1\2\1\53\1\54\1\1\16\40\4\0\1\14\1\33"+
    "\1\23\1\0\1\37\1\0\1\35\1\0\1\6\1\7\1\25\1\0"+
    "\1\0\1\51\1\26\1\52\1\24\11\24\1\0\1\41\1\34\1\32"+
    "\1\34\2\0\1\47\2\22\1\42\4\22\1\43\2\22\1\46\3\22"+
    "\1\45\2\22\1\44\5\22\1\50\1\22\4\0\1\37\1\0\1\31"+
    "\1\22\1\22\1\20\1\12\1\5\1\22\1\11\1\4\2\22\1\15"+
    "\1\22\1\13\1\21\2\22\1\27\1\16\1\10\1\30\1\22\1\17"+
    "\3\22\1\0\1\36\2\0\6\40\1\55\32\40\2\0\4\37\4\0"+
    "\1\37\2\0\1\40\7\0\1\37\4\0\1\37\5\0\27\37\1\0"+
    "\37\37\1\0\u01ca\37\4\0\14\37\16\0\5\37\7\0\1\37\1\0"+
    "\1\37\21\0\160\40\5\37\1\0\2\37\2\0\4\37\10\0\1\37"+
    "\1\0\3\37\1\0\1\37\1\0\24\37\1\0\123\37\1\0\213\37"+
    "\1\0\5\40\2\0\236\37\11\0\46\37\2\0\1\37\7\0\47\37"+
    "\7\0\1\37\1\0\55\40\1\0\1\40\1\0\2\40\1\0\2\40"+
    "\1\0\1\40\10\0\33\37\5\0\3\37\15\0\5\40\6\0\1\37"+
    "\4\0\13\40\5\0\53\37\37\40\4\0\2\37\1\40\143\37\1\0"+
    "\1\37\10\40\1\0\6\40\2\37\2\40\1\0\4\40\2\37\12\40"+
    "\3\37\2\0\1\37\17\0\1\40\1\37\1\40\36\37\33\40\2\0"+
    "\131\37\13\40\1\37\16\0\12\40\41\37\11\40\2\37\4\0\1\37"+
    "\5\0\26\37\4\40\1\37\11\40\1\37\3\40\1\37\5\40\22\0"+
    "\31\37\3\40\104\0\1\37\1\0\13\37\67\0\33\40\1\0\4\40"+
    "\66\37\3\40\1\37\22\40\1\37\7\40\12\37\2\40\2\0\12\40"+
    "\1\0\7\37\1\0\7\37\1\0\3\40\1\0\10\37\2\0\2\37"+
    "\2\0\26\37\1\0\7\37\1\0\1\37\3\0\4\37\2\0\1\40"+
    "\1\37\7\40\2\0\2\40\2\0\3\40\1\37\10\0\1\40\4\0"+
    "\2\37\1\0\3\37\2\40\2\0\12\40\4\37\7\0\1\37\5\0"+
    "\3\40\1\0\6\37\4\0\2\37\2\0\26\37\1\0\7\37\1\0"+
    "\2\37\1\0\2\37\1\0\2\37\2\0\1\40\1\0\5\40\4\0"+
    "\2\40\2\0\3\40\3\0\1\40\7\0\4\37\1\0\1\37\7\0"+
    "\14\40\3\37\1\40\13\0\3\40\1\0\11\37\1\0\3\37\1\0"+
    "\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\40\1\37"+
    "\10\40\1\0\3\40\1\0\3\40\2\0\1\37\17\0\2\37\2\40"+
    "\2\0\12\40\1\0\1\37\17\0\3\40\1\0\10\37\2\0\2\37"+
    "\2\0\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\40"+
    "\1\37\7\40\2\0\2\40\2\0\3\40\10\0\2\40\4\0\2\37"+
    "\1\0\3\37\2\40\2\0\12\40\1\0\1\37\20\0\1\40\1\37"+
    "\1\0\6\37\3\0\3\37\1\0\4\37\3\0\2\37\1\0\1\37"+
    "\1\0\2\37\3\0\2\37\3\0\3\37\3\0\14\37\4\0\5\40"+
    "\3\0\3\40\1\0\4\40\2\0\1\37\6\0\1\40\16\0\12\40"+
    "\11\0\1\37\7\0\3\40\1\0\10\37\1\0\3\37\1\0\27\37"+
    "\1\0\12\37\1\0\5\37\3\0\1\37\7\40\1\0\3\40\1\0"+
    "\4\40\7\0\2\40\1\0\2\37\6\0\2\37\2\40\2\0\12\40"+
    "\22\0\2\40\1\0\10\37\1\0\3\37\1\0\27\37\1\0\12\37"+
    "\1\0\5\37\2\0\1\40\1\37\7\40\1\0\3\40\1\0\4\40"+
    "\7\0\2\40\7\0\1\37\1\0\2\37\2\40\2\0\12\40\1\0"+
    "\2\37\17\0\2\40\1\0\10\37\1\0\3\37\1\0\51\37\2\0"+
    "\1\37\7\40\1\0\3\40\1\0\4\40\1\37\10\0\1\40\10\0"+
    "\2\37\2\40\2\0\12\40\12\0\6\37\2\0\2\40\1\0\22\37"+
    "\3\0\30\37\1\0\11\37\1\0\1\37\2\0\7\37\3\0\1\40"+
    "\4\0\6\40\1\0\1\40\1\0\10\40\22\0\2\40\15\0\60\37"+
    "\1\40\2\37\7\40\4\0\10\37\10\40\1\0\12\40\47\0\2\37"+
    "\1\0\1\37\2\0\2\37\1\0\1\37\2\0\1\37\6\0\4\37"+
    "\1\0\7\37\1\0\3\37\1\0\1\37\1\0\1\37\2\0\2\37"+
    "\1\0\4\37\1\40\2\37\6\40\1\0\2\40\1\37\2\0\5\37"+
    "\1\0\1\37\1\0\6\40\2\0\12\40\2\0\4\37\40\0\1\37"+
    "\27\0\2\40\6\0\12\40\13\0\1\40\1\0\1\40\1\0\1\40"+
    "\4\0\2\40\10\37\1\0\44\37\4\0\24\40\1\0\2\40\5\37"+
    "\13\40\1\0\44\40\11\0\1\40\71\0\53\37\24\40\1\37\12\40"+
    "\6\0\6\37\4\40\4\37\3\40\1\37\3\40\2\37\7\40\3\37"+
    "\4\40\15\37\14\40\1\37\17\40\2\0\46\37\1\0\1\37\5\0"+
    "\1\37\2\0\53\37\1\0\u014d\37\1\0\4\37\2\0\7\37\1\0"+
    "\1\37\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37\1\0"+
    "\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37\1\0"+
    "\71\37\1\0\4\37\2\0\103\37\2\0\3\40\40\0\20\37\20\0"+
    "\125\37\14\0\u026c\37\2\0\21\37\1\0\32\37\5\0\113\37\3\0"+
    "\3\37\17\0\15\37\1\0\4\37\3\40\13\0\22\37\3\40\13\0"+
    "\22\37\2\40\14\0\15\37\1\0\3\37\1\0\2\40\14\0\64\37"+
    "\40\40\3\0\1\37\3\0\2\37\1\40\2\0\12\40\41\0\3\40"+
    "\2\0\12\40\6\0\130\37\10\0\51\37\1\40\1\37\5\0\106\37"+
    "\12\0\35\37\3\0\14\40\4\0\14\40\12\0\12\40\36\37\2\0"+
    "\5\37\13\0\54\37\4\0\21\40\7\37\2\40\6\0\12\40\46\0"+
    "\27\37\5\40\4\0\65\37\12\40\1\0\35\40\2\0\13\40\6\0"+
    "\12\40\15\0\1\37\130\0\5\40\57\37\21\40\7\37\4\0\12\40"+
    "\21\0\11\40\14\0\3\40\36\37\15\40\2\37\12\40\54\37\16\40"+
    "\14\0\44\37\24\40\10\0\12\40\3\0\3\37\12\40\44\37\122\0"+
    "\3\40\1\0\25\40\4\37\1\40\4\37\3\40\2\37\11\0\300\37"+
    "\47\40\25\0\4\40\u0116\37\2\0\6\37\2\0\46\37\2\0\6\37"+
    "\2\0\10\37\1\0\1\37\1\0\1\37\1\0\1\37\1\0\37\37"+
    "\2\0\65\37\1\0\7\37\1\0\1\37\3\0\3\37\1\0\7\37"+
    "\3\0\4\37\2\0\6\37\4\0\15\37\5\0\3\37\1\0\7\37"+
    "\16\0\5\40\30\0\1\53\1\53\5\40\20\0\2\37\23\0\1\37"+
    "\13\0\5\40\5\0\6\40\1\0\1\37\15\0\1\37\20\0\15\37"+
    "\3\0\33\37\25\0\15\40\4\0\1\40\3\0\14\40\21\0\1\37"+
    "\4\0\1\37\2\0\12\37\1\0\1\37\3\0\5\37\6\0\1\37"+
    "\1\0\1\37\1\0\1\37\1\0\4\37\1\0\13\37\2\0\4\37"+
    "\5\0\5\37\4\0\1\37\21\0\51\37\u0a77\0\57\37\1\0\57\37"+
    "\1\0\205\37\6\0\4\37\3\40\2\37\14\0\46\37\1\0\1\37"+
    "\5\0\1\37\2\0\70\37\7\0\1\37\17\0\1\40\27\37\11\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\40\40\57\0\1\37\u01d5\0"+
    "\3\37\31\0\11\37\6\40\1\0\5\37\2\0\5\37\4\0\126\37"+
    "\2\0\2\40\2\0\3\37\1\0\132\37\1\0\4\37\5\0\51\37"+
    "\3\0\136\37\21\0\33\37\65\0\20\37\u0200\0\u19b6\37\112\0\u51cd\37"+
    "\63\0\u048d\37\103\0\56\37\2\0\u010d\37\3\0\20\37\12\40\2\37"+
    "\24\0\57\37\1\40\4\0\12\40\1\0\31\37\7\0\1\40\120\37"+
    "\2\40\45\0\11\37\2\0\147\37\2\0\4\37\1\0\4\37\14\0"+
    "\13\37\115\0\12\37\1\40\3\37\1\40\4\37\1\40\27\37\5\40"+
    "\20\0\1\37\7\0\64\37\14\0\2\40\62\37\21\40\13\0\12\40"+
    "\6\0\22\40\6\37\3\0\1\37\4\0\12\40\34\37\10\40\2\0"+
    "\27\37\15\40\14\0\35\37\3\0\4\40\57\37\16\40\16\0\1\37"+
    "\12\40\46\0\51\37\16\40\11\0\3\37\1\40\10\37\2\40\2\0"+
    "\12\40\6\0\27\37\3\0\1\37\1\40\4\0\60\37\1\40\1\37"+
    "\3\40\2\37\2\40\5\37\2\40\1\37\1\40\1\37\30\0\3\37"+
    "\2\0\13\37\5\40\2\0\3\37\2\40\12\0\6\37\2\0\6\37"+
    "\2\0\6\37\11\0\7\37\1\0\7\37\221\0\43\37\10\40\1\0"+
    "\2\40\2\0\12\40\6\0\u2ba4\37\14\0\27\37\4\0\61\37\u2104\0"+
    "\u016e\37\2\0\152\37\46\0\7\37\14\0\5\37\5\0\1\37\1\40"+
    "\12\37\1\0\15\37\1\0\5\37\1\0\1\37\1\0\2\37\1\0"+
    "\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37\2\0\66\37\50\0"+
    "\15\37\3\0\20\40\20\0\7\40\14\0\2\37\30\0\3\37\31\0"+
    "\1\37\6\0\5\37\1\0\207\37\2\0\1\40\4\0\1\37\13\0"+
    "\12\40\7\0\32\37\4\0\1\37\1\0\32\37\13\0\131\37\3\0"+
    "\6\37\2\0\6\37\2\0\6\37\2\0\3\37\3\0\2\37\3\0"+
    "\2\37\22\0\3\40\4\0\14\37\1\0\32\37\1\0\23\37\1\0"+
    "\2\37\1\0\17\37\2\0\16\37\42\0\173\37\105\0\65\37\210\0"+
    "\1\40\202\0\35\37\3\0\61\37\57\0\37\37\21\0\33\37\65\0"+
    "\36\37\2\0\44\37\4\0\10\37\1\0\5\37\52\0\236\37\2\0"+
    "\12\40\u0356\0\6\37\2\0\1\37\1\0\54\37\1\0\2\37\3\0"+
    "\1\37\2\0\27\37\252\0\26\37\12\0\32\37\106\0\70\37\6\0"+
    "\2\37\100\0\1\37\3\40\1\0\2\40\5\0\4\40\4\37\1\0"+
    "\3\37\1\0\33\37\4\0\3\40\4\0\1\40\40\0\35\37\203\0"+
    "\66\37\12\0\26\37\12\0\23\37\215\0\111\37\u03b7\0\3\40\65\37"+
    "\17\40\37\0\12\40\20\0\3\40\55\37\13\40\2\0\1\40\22\0"+
    "\31\37\7\0\12\40\6\0\3\40\44\37\16\40\1\0\12\40\100\0"+
    "\3\40\60\37\16\40\4\37\13\0\12\40\u04a6\0\53\37\15\40\10\0"+
    "\12\40\u0936\0\u036f\37\221\0\143\37\u0b9d\0\u042f\37\u33d1\0\u0239\37\u04c7\0"+
    "\105\37\13\0\1\37\56\40\20\0\4\40\15\37\u4060\0\2\37\u2163\0"+
    "\5\40\3\0\26\40\2\0\7\40\36\0\4\40\224\0\3\40\u01bb\0"+
    "\125\37\1\0\107\37\1\0\2\37\2\0\1\37\2\0\2\37\2\0"+
    "\4\37\1\0\14\37\1\0\1\37\1\0\7\37\1\0\101\37\1\0"+
    "\4\37\2\0\10\37\1\0\7\37\1\0\34\37\1\0\4\37\1\0"+
    "\5\37\1\0\1\37\3\0\7\37\1\0\u0154\37\2\0\31\37\1\0"+
    "\31\37\1\0\37\37\1\0\31\37\1\0\37\37\1\0\31\37\1\0"+
    "\37\37\1\0\31\37\1\0\37\37\1\0\31\37\1\0\10\37\2\0"+
    "\62\40\u1600\0\4\37\1\0\33\37\1\0\2\37\1\0\1\37\2\0"+
    "\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37\6\0"+
    "\1\37\4\0\1\37\1\0\1\37\1\0\1\37\1\0\3\37\1\0"+
    "\2\37\1\0\1\37\2\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\2\37\1\0\1\37\2\0\4\37\1\0"+
    "\7\37\1\0\4\37\1\0\4\37\1\0\1\37\1\0\12\37\1\0"+
    "\21\37\5\0\3\37\1\0\5\37\1\0\21\37\u1144\0\ua6d7\37\51\0"+
    "\u1035\37\13\0\336\37\u3fe2\0\u021e\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\40\36\0\140\40\200\0\360\40\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\5\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\3\1\1\1\0\1\3\1\0\3\3\1\0"+
    "\1\7\1\10\1\6\1\3\3\0\3\3\1\0\1\3"+
    "\4\0\1\11\1\12\1\3\1\0\1\3\11\0\1\3"+
    "\1\0\1\3\11\0\1\3\13\0\1\3\14\0\1\3"+
    "\47\0\1\13\34\0\1\14\13\0\1\15\147\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\56\0\212\0\270\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01cc\0\u01cc\0\u01fa\0\u0228"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\56"+
    "\0\u0398\0\56\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac"+
    "\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\56"+
    "\0\u0114\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730"+
    "\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0"+
    "\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10"+
    "\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0"+
    "\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590"+
    "\0\u15be\0\u15ec\0\u10e4\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2"+
    "\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842"+
    "\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2"+
    "\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\56"+
    "\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64"+
    "\0\u1c92\0\u1cc0\0\u1cee\0\56\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6"+
    "\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16"+
    "\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086"+
    "\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6"+
    "\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366"+
    "\0\u2394\0\u23c2\0\u23f0\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6"+
    "\0\u2504\0\u2532\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646"+
    "\0\u2674\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6"+
    "\0\u27e4\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926"+
    "\0\u2954\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96"+
    "\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06"+
    "\0\u2c34\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76"+
    "\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6"+
    "\0\u2f14\0\u2f42\0\u2f70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\2\2\1\7\3\10"+
    "\1\4\2\10\1\11\3\10\1\12\2\13\1\2\3\10"+
    "\1\14\1\15\1\16\1\2\1\13\1\10\2\2\1\17"+
    "\6\10\1\20\2\2\1\4\1\2\60\0\1\4\54\0"+
    "\3\21\1\10\1\22\2\0\4\10\1\21\6\10\1\0"+
    "\1\10\2\0\3\10\1\23\4\0\2\10\1\0\7\10"+
    "\3\0\1\21\1\10\1\0\3\21\2\10\2\0\4\10"+
    "\1\21\6\10\1\0\1\10\2\0\2\10\1\24\1\23"+
    "\4\0\2\10\1\0\7\10\3\0\1\21\1\10\1\0"+
    "\3\21\2\10\2\0\4\10\1\21\6\10\1\0\1\10"+
    "\2\0\1\25\2\10\1\23\4\0\2\10\1\0\7\10"+
    "\3\0\1\21\1\10\1\0\3\21\2\10\2\0\4\10"+
    "\1\21\6\10\1\0\1\10\2\0\3\10\1\23\4\0"+
    "\2\10\1\0\7\10\3\0\1\21\1\10\1\0\3\21"+
    "\2\10\2\0\1\10\1\26\2\10\1\21\6\10\1\0"+
    "\1\10\2\0\3\10\1\23\4\0\2\10\1\0\7\10"+
    "\3\0\1\21\1\10\4\0\2\27\2\0\4\27\1\0"+
    "\6\27\1\30\1\27\2\0\3\27\10\0\7\27\33\0"+
    "\1\31\61\0\1\32\24\0\3\21\2\10\2\0\4\10"+
    "\1\21\6\10\1\0\1\10\2\0\3\10\1\23\4\0"+
    "\2\10\1\0\1\10\1\33\5\10\3\0\1\21\1\10"+
    "\51\0\1\34\5\0\3\21\10\0\1\21\15\0\1\23"+
    "\21\0\1\21\2\0\3\21\2\10\1\35\1\0\4\10"+
    "\1\21\6\10\1\0\1\10\2\0\3\10\1\23\4\0"+
    "\2\10\1\0\7\10\3\0\1\21\1\10\1\0\3\23"+
    "\2\36\2\0\4\36\1\23\6\36\4\0\3\36\5\0"+
    "\1\36\2\0\7\36\3\0\1\23\2\0\3\21\2\10"+
    "\2\0\4\10\1\21\1\37\5\10\1\0\1\10\2\0"+
    "\3\10\1\23\4\0\2\10\1\0\7\10\3\0\1\21"+
    "\1\10\1\0\3\21\2\10\2\0\4\10\1\21\6\10"+
    "\1\0\1\10\2\0\1\10\1\40\1\10\1\23\4\0"+
    "\2\10\1\0\7\10\3\0\1\21\1\10\1\0\3\21"+
    "\1\41\1\10\2\0\4\10\1\21\6\10\1\0\1\10"+
    "\2\0\3\10\1\23\4\0\2\10\1\0\7\10\3\0"+
    "\1\21\1\10\4\0\2\42\2\0\4\42\1\0\6\42"+
    "\1\30\1\42\2\0\3\42\10\0\7\42\31\0\1\31"+
    "\32\0\3\21\2\10\2\0\4\10\1\21\6\10\1\0"+
    "\1\10\2\0\3\10\1\23\4\0\2\10\1\0\2\10"+
    "\1\43\4\10\3\0\1\21\1\10\52\0\1\44\7\0"+
    "\2\45\2\0\4\45\1\0\6\45\1\46\2\47\1\0"+
    "\3\45\4\0\1\47\1\45\2\0\7\45\11\0\2\36"+
    "\2\0\4\36\1\0\6\36\1\0\1\36\2\0\3\36"+
    "\5\0\2\36\1\50\7\36\4\0\1\36\1\0\3\21"+
    "\2\10\2\0\4\10\1\21\1\10\1\40\4\10\1\0"+
    "\1\10\2\0\3\10\1\23\4\0\2\10\1\0\7\10"+
    "\3\0\1\21\1\10\1\0\3\21\2\10\2\0\2\10"+
    "\1\51\1\10\1\21\6\10\1\0\1\10\2\0\3\10"+
    "\1\23\4\0\2\10\1\0\7\10\3\0\1\21\1\10"+
    "\1\0\3\21\2\10\2\0\4\10\1\21\1\52\5\10"+
    "\1\0\1\10\2\0\3\10\1\23\4\0\2\10\1\0"+
    "\7\10\3\0\1\21\1\10\4\0\2\53\2\0\4\53"+
    "\1\0\6\53\1\30\1\53\2\0\3\53\10\0\7\53"+
    "\6\0\3\21\2\10\2\0\4\10\1\21\6\10\1\0"+
    "\1\10\2\0\3\10\1\23\4\0\2\10\1\0\3\10"+
    "\1\54\3\10\3\0\1\21\1\10\1\44\2\55\46\44"+
    "\1\56\1\44\7\0\2\45\2\0\4\45\1\0\6\45"+
    "\1\0\1\45\2\0\3\45\2\57\1\60\1\61\1\62"+
    "\2\45\1\0\7\45\4\0\1\45\4\0\2\63\2\0"+
    "\4\63\1\0\6\63\1\64\1\63\2\0\3\63\10\0"+
    "\7\63\33\0\1\65\3\0\2\57\1\60\1\61\1\62"+
    "\20\0\3\21\2\10\2\0\2\10\1\66\1\10\1\21"+
    "\6\10\1\0\1\10\2\0\3\10\1\23\4\0\2\10"+
    "\1\0\7\10\3\0\1\21\1\10\4\0\2\67\2\0"+
    "\4\67\1\0\6\67\1\30\1\67\2\0\3\67\10\0"+
    "\7\67\6\0\3\21\2\10\2\0\4\10\1\21\6\10"+
    "\1\0\1\10\2\0\3\10\1\23\4\0\2\10\1\0"+
    "\4\10\1\70\2\10\3\0\1\21\1\10\1\0\2\55"+
    "\46\0\1\71\4\0\1\44\2\55\46\44\1\72\1\44"+
    "\35\0\1\73\27\0\2\74\2\0\4\74\1\0\6\74"+
    "\1\75\2\76\1\0\3\74\1\73\3\0\1\76\1\74"+
    "\2\0\7\74\42\0\1\73\56\0\1\73\23\0\2\77"+
    "\2\0\4\77\1\0\6\77\1\64\1\77\2\0\3\77"+
    "\10\0\7\77\37\0\2\57\1\60\1\61\1\62\43\0"+
    "\1\65\5\0\2\57\1\60\1\61\1\62\20\0\3\21"+
    "\2\10\1\100\1\0\4\10\1\21\6\10\1\0\1\10"+
    "\2\0\3\10\1\23\4\0\2\10\1\0\7\10\3\0"+
    "\1\21\1\10\4\0\2\101\2\0\4\101\1\0\6\101"+
    "\1\30\1\101\2\0\3\101\10\0\7\101\6\0\3\21"+
    "\2\10\2\0\4\10\1\21\6\10\1\0\1\10\2\0"+
    "\3\10\1\23\4\0\2\10\1\0\5\10\1\102\1\10"+
    "\3\0\1\21\1\10\51\0\1\103\4\0\1\44\2\55"+
    "\46\44\1\72\1\104\7\0\2\74\2\0\4\74\1\0"+
    "\6\74\1\75\2\76\1\0\3\74\4\0\1\76\1\74"+
    "\2\0\7\74\11\0\2\74\1\0\1\105\4\74\1\0"+
    "\6\74\1\0\1\74\2\0\3\74\5\0\2\74\1\0"+
    "\7\74\4\0\1\74\4\0\2\106\2\0\4\106\1\0"+
    "\6\106\1\107\1\106\2\0\3\106\10\0\7\106\14\0"+
    "\1\105\16\0\1\110\33\0\2\111\2\0\4\111\1\0"+
    "\6\111\1\64\1\111\2\0\3\111\10\0\7\111\11\0"+
    "\2\112\2\0\4\112\1\0\6\112\1\113\2\114\1\0"+
    "\3\112\4\0\1\114\1\112\2\0\7\112\11\0\2\115"+
    "\2\0\4\115\1\0\6\115\1\30\1\115\2\0\3\115"+
    "\10\0\7\115\6\0\3\21\2\10\2\0\4\10\1\21"+
    "\6\10\1\0\1\10\2\0\3\10\1\23\4\0\2\10"+
    "\1\0\6\10\1\116\3\0\1\21\1\10\52\0\1\104"+
    "\3\0\52\104\1\117\13\0\1\120\51\0\2\121\2\0"+
    "\4\121\1\0\6\121\1\107\1\121\2\0\3\121\10\0"+
    "\7\121\14\0\1\105\55\0\1\105\14\0\1\110\35\0"+
    "\2\122\2\0\4\122\1\0\6\122\1\64\1\122\2\0"+
    "\3\122\10\0\7\122\11\0\2\112\2\0\4\112\1\0"+
    "\6\112\1\0\1\112\2\0\3\112\2\123\1\124\1\125"+
    "\1\126\2\112\1\0\7\112\4\0\1\112\4\0\2\127"+
    "\2\0\4\127\1\0\6\127\1\130\1\127\2\0\3\127"+
    "\10\0\7\127\33\0\1\131\3\0\2\123\1\124\1\125"+
    "\1\126\23\0\2\132\2\0\4\132\1\0\6\132\1\30"+
    "\1\132\2\0\3\132\10\0\7\132\6\0\3\21\2\133"+
    "\2\0\4\133\1\21\6\133\1\0\1\10\2\0\3\133"+
    "\1\23\4\0\1\133\1\10\1\0\7\133\3\0\1\21"+
    "\1\10\51\104\1\134\1\117\14\0\1\135\50\0\2\136"+
    "\2\0\4\136\1\0\6\136\1\107\1\136\2\0\3\136"+
    "\10\0\7\136\11\0\2\137\2\0\4\137\1\0\6\137"+
    "\1\64\1\137\2\0\3\137\10\0\7\137\37\0\1\140"+
    "\27\0\2\141\2\0\4\141\1\0\6\141\1\142\2\143"+
    "\1\0\3\141\1\140\3\0\1\143\1\141\2\0\7\141"+
    "\42\0\1\140\56\0\1\140\23\0\2\144\2\0\4\144"+
    "\1\0\6\144\1\130\1\144\2\0\3\144\10\0\7\144"+
    "\37\0\2\123\1\124\1\125\1\126\43\0\1\131\5\0"+
    "\2\123\1\124\1\125\1\126\23\0\2\145\2\0\4\145"+
    "\1\0\6\145\1\30\1\145\2\0\3\145\10\0\7\145"+
    "\6\0\3\21\2\133\2\0\4\133\1\21\6\133\1\0"+
    "\1\133\2\0\3\133\1\23\4\0\2\133\1\50\7\133"+
    "\3\0\1\21\1\133\51\104\1\146\1\117\15\0\1\147"+
    "\47\0\2\150\2\0\4\150\1\0\6\150\1\107\1\150"+
    "\2\0\3\150\10\0\7\150\11\0\2\151\2\0\4\151"+
    "\1\0\6\151\1\64\1\151\2\0\3\151\10\0\7\151"+
    "\11\0\2\141\2\0\4\141\1\0\6\141\1\142\2\143"+
    "\1\0\3\141\4\0\1\143\1\141\2\0\7\141\11\0"+
    "\2\141\1\0\1\152\4\141\1\0\6\141\1\0\1\141"+
    "\2\0\3\141\5\0\2\141\1\0\7\141\4\0\1\141"+
    "\4\0\2\153\2\0\4\153\1\0\6\153\1\154\1\153"+
    "\2\0\3\153\10\0\7\153\14\0\1\152\16\0\1\155"+
    "\33\0\2\156\2\0\4\156\1\0\6\156\1\130\1\156"+
    "\2\0\3\156\10\0\7\156\11\0\2\157\2\0\4\157"+
    "\1\0\6\157\1\30\1\157\2\0\3\157\10\0\7\157"+
    "\5\0\1\146\2\160\47\146\1\161\16\0\1\162\46\0"+
    "\2\163\2\0\4\163\1\0\6\163\1\107\1\163\2\0"+
    "\3\163\10\0\7\163\11\0\2\164\2\0\4\164\1\0"+
    "\6\164\1\64\1\164\2\0\3\164\10\0\7\164\25\0"+
    "\1\165\41\0\2\166\2\0\4\166\1\0\6\166\1\154"+
    "\1\166\2\0\3\166\10\0\7\166\14\0\1\152\55\0"+
    "\1\152\14\0\1\155\35\0\2\167\2\0\4\167\1\0"+
    "\6\167\1\130\1\167\2\0\3\167\10\0\7\167\11\0"+
    "\2\170\2\0\4\170\1\0\6\170\1\30\1\170\2\0"+
    "\3\170\10\0\7\170\5\0\1\104\2\160\47\104\1\171"+
    "\3\0\1\146\2\160\46\146\1\172\1\161\17\0\1\173"+
    "\45\0\2\174\2\0\4\174\1\0\6\174\1\107\1\174"+
    "\2\0\3\174\10\0\7\174\11\0\2\175\2\0\4\175"+
    "\1\0\6\175\1\64\1\175\2\0\3\175\10\0\7\175"+
    "\26\0\1\176\40\0\2\177\2\0\4\177\1\0\6\177"+
    "\1\154\1\177\2\0\3\177\10\0\7\177\11\0\2\200"+
    "\2\0\4\200\1\0\6\200\1\130\1\200\2\0\3\200"+
    "\10\0\7\200\11\0\2\201\2\0\4\201\1\0\6\201"+
    "\1\30\1\201\2\0\3\201\10\0\7\201\5\0\51\104"+
    "\1\202\1\117\3\0\1\146\2\160\46\146\1\203\1\161"+
    "\7\0\2\204\2\0\4\204\1\0\6\204\4\0\3\204"+
    "\5\0\1\204\2\0\1\205\6\204\11\0\2\206\2\0"+
    "\4\206\1\0\6\206\1\107\1\206\2\0\3\206\10\0"+
    "\7\206\11\0\2\207\2\0\4\207\1\0\6\207\1\64"+
    "\1\207\2\0\3\207\10\0\7\207\21\0\1\210\45\0"+
    "\2\211\2\0\4\211\1\0\6\211\1\154\1\211\2\0"+
    "\3\211\10\0\7\211\11\0\2\212\2\0\4\212\1\0"+
    "\6\212\1\130\1\212\2\0\3\212\10\0\7\212\11\0"+
    "\2\213\2\0\4\213\1\0\6\213\1\30\1\213\2\0"+
    "\3\213\10\0\7\213\5\0\51\104\1\203\1\117\4\0"+
    "\3\214\2\204\2\0\4\204\1\214\6\204\1\0\1\204"+
    "\2\0\3\204\1\215\4\0\2\204\1\0\7\204\3\0"+
    "\1\214\1\204\1\0\3\214\2\204\2\0\4\204\1\214"+
    "\6\204\1\0\1\204\2\0\3\204\1\215\4\0\2\204"+
    "\1\0\1\204\1\216\5\204\3\0\1\214\1\204\4\0"+
    "\2\217\2\0\4\217\1\0\6\217\1\107\1\217\2\0"+
    "\3\217\10\0\7\217\11\0\2\220\2\0\4\220\1\0"+
    "\6\220\1\64\1\220\2\0\3\220\10\0\7\220\11\0"+
    "\2\221\2\0\4\221\1\0\6\221\4\0\3\221\5\0"+
    "\1\221\2\0\1\222\6\221\11\0\2\223\2\0\4\223"+
    "\1\0\6\223\1\154\1\223\2\0\3\223\10\0\7\223"+
    "\11\0\2\224\2\0\4\224\1\0\6\224\1\130\1\224"+
    "\2\0\3\224\10\0\7\224\11\0\2\225\2\0\4\225"+
    "\1\0\6\225\1\30\1\225\2\0\3\225\10\0\7\225"+
    "\6\0\3\214\10\0\1\214\15\0\1\215\21\0\1\214"+
    "\2\0\3\215\2\226\2\0\4\226\1\215\6\226\4\0"+
    "\3\226\5\0\1\226\2\0\7\226\3\0\1\215\2\0"+
    "\3\214\2\204\2\0\4\204\1\214\6\204\1\0\1\204"+
    "\2\0\3\204\1\215\4\0\2\204\1\0\2\204\1\227"+
    "\4\204\3\0\1\214\1\204\4\0\2\230\2\0\4\230"+
    "\1\0\6\230\1\107\1\230\2\0\3\230\10\0\7\230"+
    "\11\0\2\231\2\0\4\231\1\0\6\231\1\64\1\231"+
    "\2\0\3\231\10\0\7\231\6\0\3\232\2\221\2\0"+
    "\4\221\1\232\6\221\1\0\1\221\2\0\3\221\1\233"+
    "\4\0\2\221\1\0\7\221\3\0\1\232\1\221\1\0"+
    "\3\232\2\221\2\0\4\221\1\232\6\221\1\0\1\221"+
    "\2\0\3\221\1\233\4\0\2\221\1\0\1\221\1\234"+
    "\5\221\3\0\1\232\1\221\4\0\2\235\2\0\4\235"+
    "\1\0\6\235\1\154\1\235\2\0\3\235\10\0\7\235"+
    "\11\0\2\236\2\0\4\236\1\0\6\236\1\130\1\236"+
    "\2\0\3\236\10\0\7\236\11\0\2\237\2\0\4\237"+
    "\1\0\6\237\1\30\1\237\2\0\3\237\10\0\7\237"+
    "\11\0\2\226\2\0\4\226\1\0\6\226\1\0\1\226"+
    "\2\0\3\226\5\0\2\226\1\240\7\226\4\0\1\226"+
    "\1\0\3\214\2\204\2\0\4\204\1\214\6\204\1\0"+
    "\1\204\2\0\3\204\1\215\4\0\2\204\1\0\3\204"+
    "\1\241\3\204\3\0\1\214\1\204\4\0\2\242\2\0"+
    "\4\242\1\0\6\242\1\107\1\242\2\0\3\242\10\0"+
    "\7\242\11\0\2\243\2\0\4\243\1\0\6\243\1\64"+
    "\1\243\2\0\3\243\10\0\7\243\6\0\3\232\10\0"+
    "\1\232\15\0\1\233\21\0\1\232\2\0\3\233\2\244"+
    "\2\0\4\244\1\233\6\244\4\0\3\244\5\0\1\244"+
    "\2\0\7\244\3\0\1\233\2\0\3\232\2\221\2\0"+
    "\4\221\1\232\6\221\1\0\1\221\2\0\3\221\1\233"+
    "\4\0\2\221\1\0\2\221\1\245\4\221\3\0\1\232"+
    "\1\221\4\0\2\246\2\0\4\246\1\0\6\246\1\154"+
    "\1\246\2\0\3\246\10\0\7\246\11\0\2\247\2\0"+
    "\4\247\1\0\6\247\1\130\1\247\2\0\3\247\10\0"+
    "\7\247\11\0\2\250\2\0\4\250\1\0\6\250\1\30"+
    "\1\250\2\0\3\250\10\0\7\250\6\0\3\214\2\204"+
    "\2\0\4\204\1\214\6\204\1\0\1\204\2\0\3\204"+
    "\1\215\4\0\2\204\1\0\4\204\1\251\2\204\3\0"+
    "\1\214\1\204\4\0\2\252\2\0\4\252\1\0\6\252"+
    "\1\107\1\252\2\0\3\252\10\0\7\252\11\0\2\253"+
    "\2\0\4\253\1\0\6\253\1\64\1\253\2\0\3\253"+
    "\10\0\7\253\11\0\2\244\2\0\4\244\1\0\6\244"+
    "\1\0\1\244\2\0\3\244\5\0\2\244\1\254\7\244"+
    "\4\0\1\244\1\0\3\232\2\221\2\0\4\221\1\232"+
    "\6\221\1\0\1\221\2\0\3\221\1\233\4\0\2\221"+
    "\1\0\3\221\1\255\3\221\3\0\1\232\1\221\4\0"+
    "\2\256\2\0\4\256\1\0\6\256\1\154\1\256\2\0"+
    "\3\256\10\0\7\256\11\0\2\257\2\0\4\257\1\0"+
    "\6\257\1\130\1\257\2\0\3\257\10\0\7\257\11\0"+
    "\2\260\2\0\4\260\1\0\6\260\1\30\1\260\2\0"+
    "\3\260\10\0\7\260\6\0\3\214\2\204\2\0\4\204"+
    "\1\214\6\204\1\0\1\204\2\0\3\204\1\215\4\0"+
    "\2\204\1\0\5\204\1\261\1\204\3\0\1\214\1\204"+
    "\4\0\2\262\2\0\4\262\1\0\6\262\1\107\1\262"+
    "\2\0\3\262\10\0\7\262\11\0\2\263\2\0\4\263"+
    "\1\0\6\263\1\64\1\263\2\0\3\263\10\0\7\263"+
    "\6\0\3\232\2\221\2\0\4\221\1\232\6\221\1\0"+
    "\1\221\2\0\3\221\1\233\4\0\2\221\1\0\4\221"+
    "\1\264\2\221\3\0\1\232\1\221\4\0\2\265\2\0"+
    "\4\265\1\0\6\265\1\154\1\265\2\0\3\265\10\0"+
    "\7\265\11\0\2\266\2\0\4\266\1\0\6\266\1\130"+
    "\1\266\2\0\3\266\10\0\7\266\11\0\2\267\2\0"+
    "\4\267\1\0\6\267\1\30\1\267\2\0\3\267\10\0"+
    "\7\267\6\0\3\214\2\204\2\0\4\204\1\214\6\204"+
    "\1\0\1\204\2\0\3\204\1\215\4\0\2\204\1\0"+
    "\6\204\1\270\3\0\1\214\1\204\4\0\2\271\2\0"+
    "\4\271\1\0\6\271\1\107\1\271\2\0\3\271\10\0"+
    "\7\271\11\0\2\272\2\0\4\272\1\0\6\272\1\64"+
    "\1\272\2\0\3\272\10\0\7\272\6\0\3\232\2\221"+
    "\2\0\4\221\1\232\6\221\1\0\1\221\2\0\3\221"+
    "\1\233\4\0\2\221\1\0\5\221\1\273\1\221\3\0"+
    "\1\232\1\221\4\0\2\274\2\0\4\274\1\0\6\274"+
    "\1\154\1\274\2\0\3\274\10\0\7\274\11\0\2\275"+
    "\2\0\4\275\1\0\6\275\1\130\1\275\2\0\3\275"+
    "\10\0\7\275\11\0\2\276\2\0\4\276\1\0\6\276"+
    "\1\30\1\276\2\0\3\276\10\0\7\276\6\0\3\214"+
    "\2\277\2\0\4\277\1\214\6\277\1\0\1\204\2\0"+
    "\3\277\1\215\4\0\1\277\1\204\1\0\7\277\3\0"+
    "\1\214\1\204\4\0\2\300\2\0\4\300\1\0\6\300"+
    "\1\107\1\300\2\0\3\300\10\0\7\300\11\0\2\301"+
    "\2\0\4\301\1\0\6\301\1\64\1\301\2\0\3\301"+
    "\10\0\7\301\6\0\3\232\2\221\2\0\4\221\1\232"+
    "\6\221\1\0\1\221\2\0\3\221\1\233\4\0\2\221"+
    "\1\0\6\221\1\302\3\0\1\232\1\221\4\0\2\303"+
    "\2\0\4\303\1\0\6\303\1\154\1\303\2\0\3\303"+
    "\10\0\7\303\11\0\2\304\2\0\4\304\1\0\6\304"+
    "\1\130\1\304\2\0\3\304\10\0\7\304\11\0\2\305"+
    "\2\0\4\305\1\0\6\305\1\30\1\305\2\0\3\305"+
    "\10\0\7\305\6\0\3\214\2\277\2\0\4\277\1\214"+
    "\6\277\1\0\1\277\2\0\3\277\1\215\4\0\2\277"+
    "\1\240\7\277\3\0\1\214\1\277\4\0\2\306\2\0"+
    "\4\306\1\0\6\306\1\107\1\306\2\0\3\306\10\0"+
    "\7\306\11\0\2\307\2\0\4\307\1\0\6\307\1\64"+
    "\1\307\2\0\3\307\10\0\7\307\6\0\3\232\2\310"+
    "\2\0\4\310\1\232\6\310\1\0\1\221\2\0\3\310"+
    "\1\233\4\0\1\310\1\221\1\0\7\310\3\0\1\232"+
    "\1\221\4\0\2\311\2\0\4\311\1\0\6\311\1\154"+
    "\1\311\2\0\3\311\10\0\7\311\11\0\2\312\2\0"+
    "\4\312\1\0\6\312\1\130\1\312\2\0\3\312\10\0"+
    "\7\312\11\0\2\313\2\0\4\313\1\0\6\313\1\30"+
    "\1\313\2\0\3\313\10\0\7\313\11\0\2\314\2\0"+
    "\4\314\1\0\6\314\1\107\1\314\2\0\3\314\10\0"+
    "\7\314\11\0\2\315\2\0\4\315\1\0\6\315\1\64"+
    "\1\315\2\0\3\315\10\0\7\315\6\0\3\232\2\310"+
    "\2\0\4\310\1\232\6\310\1\0\1\310\2\0\3\310"+
    "\1\233\4\0\2\310\1\254\7\310\3\0\1\232\1\310"+
    "\4\0\2\316\2\0\4\316\1\0\6\316\1\154\1\316"+
    "\2\0\3\316\10\0\7\316\11\0\2\317\2\0\4\317"+
    "\1\0\6\317\1\130\1\317\2\0\3\317\10\0\7\317"+
    "\11\0\2\320\2\0\4\320\1\0\6\320\1\30\1\320"+
    "\2\0\3\320\10\0\7\320\11\0\2\321\2\0\4\321"+
    "\1\0\6\321\1\107\1\321\2\0\3\321\10\0\7\321"+
    "\11\0\2\322\2\0\4\322\1\0\6\322\1\64\1\322"+
    "\2\0\3\322\10\0\7\322\11\0\2\323\2\0\4\323"+
    "\1\0\6\323\1\154\1\323\2\0\3\323\10\0\7\323"+
    "\11\0\2\324\2\0\4\324\1\0\6\324\1\130\1\324"+
    "\2\0\3\324\10\0\7\324\11\0\2\325\2\0\4\325"+
    "\1\0\6\325\1\30\1\325\2\0\3\325\10\0\7\325"+
    "\11\0\2\326\2\0\4\326\1\0\6\326\1\107\1\326"+
    "\2\0\3\326\10\0\7\326\11\0\2\327\2\0\4\327"+
    "\1\0\6\327\1\64\1\327\2\0\3\327\10\0\7\327"+
    "\11\0\2\330\2\0\4\330\1\0\6\330\1\154\1\330"+
    "\2\0\3\330\10\0\7\330\11\0\2\331\2\0\4\331"+
    "\1\0\6\331\1\130\1\331\2\0\3\331\10\0\7\331"+
    "\11\0\2\332\2\0\4\332\1\0\6\332\1\30\1\332"+
    "\2\0\3\332\10\0\7\332\11\0\2\333\2\0\4\333"+
    "\1\0\6\333\1\107\1\333\2\0\3\333\10\0\7\333"+
    "\11\0\2\334\2\0\4\334\1\0\6\334\1\64\1\334"+
    "\2\0\3\334\10\0\7\334\11\0\2\335\2\0\4\335"+
    "\1\0\6\335\1\154\1\335\2\0\3\335\10\0\7\335"+
    "\11\0\2\336\2\0\4\336\1\0\6\336\1\130\1\336"+
    "\2\0\3\336\10\0\7\336\11\0\2\337\2\0\4\337"+
    "\1\0\6\337\1\30\1\337\2\0\3\337\10\0\7\337"+
    "\11\0\2\340\2\0\4\340\1\0\6\340\1\107\1\340"+
    "\2\0\3\340\10\0\7\340\11\0\2\341\2\0\4\341"+
    "\1\0\6\341\1\64\1\341\2\0\3\341\10\0\7\341"+
    "\11\0\2\342\2\0\4\342\1\0\6\342\1\154\1\342"+
    "\2\0\3\342\10\0\7\342\11\0\2\343\2\0\4\343"+
    "\1\0\6\343\1\130\1\343\2\0\3\343\10\0\7\343"+
    "\11\0\2\344\2\0\4\344\1\0\6\344\1\30\1\344"+
    "\2\0\3\344\10\0\7\344\11\0\2\345\2\0\4\345"+
    "\1\0\6\345\1\107\1\345\2\0\3\345\10\0\7\345"+
    "\11\0\2\346\2\0\4\346\1\0\6\346\1\64\1\346"+
    "\2\0\3\346\10\0\7\346\11\0\2\347\2\0\4\347"+
    "\1\0\6\347\1\154\1\347\2\0\3\347\10\0\7\347"+
    "\11\0\2\350\2\0\4\350\1\0\6\350\1\130\1\350"+
    "\2\0\3\350\10\0\7\350\11\0\2\351\2\0\4\351"+
    "\1\0\6\351\1\30\1\351\2\0\3\351\10\0\7\351"+
    "\11\0\2\352\2\0\4\352\1\0\6\352\1\107\1\352"+
    "\2\0\3\352\10\0\7\352\11\0\2\353\2\0\4\353"+
    "\1\0\6\353\1\64\1\353\2\0\3\353\10\0\7\353"+
    "\11\0\2\354\2\0\4\354\1\0\6\354\1\154\1\354"+
    "\2\0\3\354\10\0\7\354\11\0\2\355\2\0\4\355"+
    "\1\0\6\355\1\130\1\355\2\0\3\355\10\0\7\355"+
    "\11\0\2\356\2\0\4\356\1\0\6\356\1\30\1\356"+
    "\2\0\3\356\10\0\7\356\11\0\2\357\2\0\4\357"+
    "\1\0\6\357\1\107\1\357\2\0\3\357\10\0\7\357"+
    "\11\0\2\360\2\0\4\360\1\0\6\360\1\64\1\360"+
    "\2\0\3\360\10\0\7\360\11\0\2\361\2\0\4\361"+
    "\1\0\6\361\1\154\1\361\2\0\3\361\10\0\7\361"+
    "\11\0\2\362\2\0\4\362\1\0\6\362\1\130\1\362"+
    "\2\0\3\362\10\0\7\362\11\0\2\363\2\0\4\363"+
    "\1\0\6\363\1\30\1\363\2\0\3\363\10\0\7\363"+
    "\11\0\2\364\2\0\4\364\1\0\6\364\1\107\1\364"+
    "\2\0\3\364\10\0\7\364\11\0\2\365\2\0\4\365"+
    "\1\0\6\365\1\64\1\365\2\0\3\365\10\0\7\365"+
    "\11\0\2\366\2\0\4\366\1\0\6\366\1\154\1\366"+
    "\2\0\3\366\10\0\7\366\11\0\2\367\2\0\4\367"+
    "\1\0\6\367\1\130\1\367\2\0\3\367\10\0\7\367"+
    "\11\0\2\370\2\0\4\370\1\0\6\370\1\30\1\370"+
    "\2\0\3\370\10\0\7\370\11\0\2\371\2\0\4\371"+
    "\1\0\6\371\1\107\1\371\2\0\3\371\10\0\7\371"+
    "\11\0\2\372\2\0\4\372\1\0\6\372\1\64\1\372"+
    "\2\0\3\372\10\0\7\372\11\0\2\373\2\0\4\373"+
    "\1\0\6\373\1\154\1\373\2\0\3\373\10\0\7\373"+
    "\11\0\2\374\2\0\4\374\1\0\6\374\1\130\1\374"+
    "\2\0\3\374\10\0\7\374\11\0\2\375\2\0\4\375"+
    "\1\0\6\375\1\30\1\375\2\0\3\375\10\0\7\375"+
    "\11\0\2\376\2\0\4\376\1\0\6\376\1\107\1\376"+
    "\2\0\3\376\10\0\7\376\11\0\2\377\2\0\4\377"+
    "\1\0\6\377\1\64\1\377\2\0\3\377\10\0\7\377"+
    "\11\0\2\u0100\2\0\4\u0100\1\0\6\u0100\1\154\1\u0100"+
    "\2\0\3\u0100\10\0\7\u0100\11\0\2\u0101\2\0\4\u0101"+
    "\1\0\6\u0101\1\130\1\u0101\2\0\3\u0101\10\0\7\u0101"+
    "\30\0\1\30\36\0\2\u0102\2\0\4\u0102\1\0\6\u0102"+
    "\1\107\1\u0102\2\0\3\u0102\10\0\7\u0102\11\0\2\u0103"+
    "\2\0\4\u0103\1\0\6\u0103\1\64\1\u0103\2\0\3\u0103"+
    "\10\0\7\u0103\11\0\2\u0104\2\0\4\u0104\1\0\6\u0104"+
    "\1\154\1\u0104\2\0\3\u0104\10\0\7\u0104\11\0\2\u0105"+
    "\2\0\4\u0105\1\0\6\u0105\1\130\1\u0105\2\0\3\u0105"+
    "\10\0\7\u0105\11\0\2\u0106\2\0\4\u0106\1\0\6\u0106"+
    "\1\107\1\u0106\2\0\3\u0106\10\0\7\u0106\11\0\2\u0107"+
    "\2\0\4\u0107\1\0\6\u0107\1\64\1\u0107\2\0\3\u0107"+
    "\10\0\7\u0107\11\0\2\u0108\2\0\4\u0108\1\0\6\u0108"+
    "\1\154\1\u0108\2\0\3\u0108\10\0\7\u0108\11\0\2\u0109"+
    "\2\0\4\u0109\1\0\6\u0109\1\130\1\u0109\2\0\3\u0109"+
    "\10\0\7\u0109\11\0\2\u010a\2\0\4\u010a\1\0\6\u010a"+
    "\1\107\1\u010a\2\0\3\u010a\10\0\7\u010a\30\0\1\64"+
    "\36\0\2\u010b\2\0\4\u010b\1\0\6\u010b\1\154\1\u010b"+
    "\2\0\3\u010b\10\0\7\u010b\11\0\2\u010c\2\0\4\u010c"+
    "\1\0\6\u010c\1\130\1\u010c\2\0\3\u010c\10\0\7\u010c"+
    "\11\0\2\u010d\2\0\4\u010d\1\0\6\u010d\1\107\1\u010d"+
    "\2\0\3\u010d\10\0\7\u010d\11\0\2\u010e\2\0\4\u010e"+
    "\1\0\6\u010e\1\154\1\u010e\2\0\3\u010e\10\0\7\u010e"+
    "\11\0\2\u010f\2\0\4\u010f\1\0\6\u010f\1\130\1\u010f"+
    "\2\0\3\u010f\10\0\7\u010f\30\0\1\107\36\0\2\u0110"+
    "\2\0\4\u0110\1\0\6\u0110\1\154\1\u0110\2\0\3\u0110"+
    "\10\0\7\u0110\11\0\2\u0111\2\0\4\u0111\1\0\6\u0111"+
    "\1\130\1\u0111\2\0\3\u0111\10\0\7\u0111\11\0\2\u0112"+
    "\2\0\4\u0112\1\0\6\u0112\1\154\1\u0112\2\0\3\u0112"+
    "\10\0\7\u0112\30\0\1\130\36\0\2\u0113\2\0\4\u0113"+
    "\1\0\6\u0113\1\154\1\u0113\2\0\3\u0113\10\0\7\u0113"+
    "\30\0\1\154\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12190];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\14\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\11\1\1\1\11\1\1\3\0\3\1"+
    "\1\0\1\1\4\0\1\11\2\1\1\0\1\1\11\0"+
    "\1\1\1\0\1\1\11\0\1\1\13\0\1\1\14\0"+
    "\1\1\47\0\1\1\34\0\1\11\13\0\1\11\147\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2870) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 14: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 15: break;
          case 3: 
            { System.out.printf("\n>>> Identificador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 16: break;
          case 4: 
            { System.out.printf("\n>>> Integer encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 17: break;
          case 5: 
            { System.out.printf("\n>>> Simbolo Asignacion encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 18: break;
          case 6: 
            { System.out.printf("\n>>> Operador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 19: break;
          case 7: 
            { System.out.printf("\n>>> String encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 20: break;
          case 8: 
            { System.out.printf("\n>>> Double encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 21: break;
          case 9: 
            { System.out.printf("\n>>> Sentencia encontrada: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 22: break;
          case 10: 
            { System.out.printf("\n>>> Bool encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 23: break;
          case 11: 
            { System.out.printf("\n>>> Commentario encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 24: break;
          case 12: 
            { System.out.printf("\n>>> IF encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 25: break;
          case 13: 
            { System.out.printf("\n>>> WHILE encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
