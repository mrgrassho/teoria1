/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/mr.grassho/Documents/Teoria1/teoria1/my-app/src/main/jflex/Lexico1.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\27\1\3\1\2\1\0\1\3\1\1\16\27\4\0\1\3\1\22"+
    "\1\4\1\0\1\26\1\0\1\24\1\0\1\41\1\42\1\7\1\0"+
    "\2\0\1\10\1\0\1\6\11\6\1\0\1\30\1\23\1\21\1\23"+
    "\2\0\1\36\2\5\1\31\1\45\1\40\1\5\1\44\1\32\2\5"+
    "\1\35\1\5\1\46\1\5\1\34\2\5\1\33\1\43\4\5\1\37"+
    "\1\5\4\0\1\26\1\0\1\16\3\5\1\14\1\15\5\5\1\17"+
    "\5\5\1\12\1\20\1\11\1\13\5\5\1\0\1\25\2\0\41\27"+
    "\2\0\4\26\4\0\1\26\2\0\1\27\7\0\1\26\4\0\1\26"+
    "\5\0\27\26\1\0\37\26\1\0\u01ca\26\4\0\14\26\16\0\5\26"+
    "\7\0\1\26\1\0\1\26\21\0\160\27\5\26\1\0\2\26\2\0"+
    "\4\26\10\0\1\26\1\0\3\26\1\0\1\26\1\0\24\26\1\0"+
    "\123\26\1\0\213\26\1\0\5\27\2\0\236\26\11\0\46\26\2\0"+
    "\1\26\7\0\47\26\7\0\1\26\1\0\55\27\1\0\1\27\1\0"+
    "\2\27\1\0\2\27\1\0\1\27\10\0\33\26\5\0\3\26\15\0"+
    "\5\27\6\0\1\26\4\0\13\27\5\0\53\26\37\27\4\0\2\26"+
    "\1\27\143\26\1\0\1\26\10\27\1\0\6\27\2\26\2\27\1\0"+
    "\4\27\2\26\12\27\3\26\2\0\1\26\17\0\1\27\1\26\1\27"+
    "\36\26\33\27\2\0\131\26\13\27\1\26\16\0\12\27\41\26\11\27"+
    "\2\26\4\0\1\26\5\0\26\26\4\27\1\26\11\27\1\26\3\27"+
    "\1\26\5\27\22\0\31\26\3\27\104\0\1\26\1\0\13\26\67\0"+
    "\33\27\1\0\4\27\66\26\3\27\1\26\22\27\1\26\7\27\12\26"+
    "\2\27\2\0\12\27\1\0\7\26\1\0\7\26\1\0\3\27\1\0"+
    "\10\26\2\0\2\26\2\0\26\26\1\0\7\26\1\0\1\26\3\0"+
    "\4\26\2\0\1\27\1\26\7\27\2\0\2\27\2\0\3\27\1\26"+
    "\10\0\1\27\4\0\2\26\1\0\3\26\2\27\2\0\12\27\4\26"+
    "\7\0\1\26\5\0\3\27\1\0\6\26\4\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\27"+
    "\1\0\5\27\4\0\2\27\2\0\3\27\3\0\1\27\7\0\4\26"+
    "\1\0\1\26\7\0\14\27\3\26\1\27\13\0\3\27\1\0\11\26"+
    "\1\0\3\26\1\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26"+
    "\2\0\1\27\1\26\10\27\1\0\3\27\1\0\3\27\2\0\1\26"+
    "\17\0\2\26\2\27\2\0\12\27\1\0\1\26\17\0\3\27\1\0"+
    "\10\26\2\0\2\26\2\0\26\26\1\0\7\26\1\0\2\26\1\0"+
    "\5\26\2\0\1\27\1\26\7\27\2\0\2\27\2\0\3\27\10\0"+
    "\2\27\4\0\2\26\1\0\3\26\2\27\2\0\12\27\1\0\1\26"+
    "\20\0\1\27\1\26\1\0\6\26\3\0\3\26\1\0\4\26\3\0"+
    "\2\26\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26\3\0"+
    "\14\26\4\0\5\27\3\0\3\27\1\0\4\27\2\0\1\26\6\0"+
    "\1\27\16\0\12\27\11\0\1\26\7\0\3\27\1\0\10\26\1\0"+
    "\3\26\1\0\27\26\1\0\12\26\1\0\5\26\3\0\1\26\7\27"+
    "\1\0\3\27\1\0\4\27\7\0\2\27\1\0\2\26\6\0\2\26"+
    "\2\27\2\0\12\27\22\0\2\27\1\0\10\26\1\0\3\26\1\0"+
    "\27\26\1\0\12\26\1\0\5\26\2\0\1\27\1\26\7\27\1\0"+
    "\3\27\1\0\4\27\7\0\2\27\7\0\1\26\1\0\2\26\2\27"+
    "\2\0\12\27\1\0\2\26\17\0\2\27\1\0\10\26\1\0\3\26"+
    "\1\0\51\26\2\0\1\26\7\27\1\0\3\27\1\0\4\27\1\26"+
    "\10\0\1\27\10\0\2\26\2\27\2\0\12\27\12\0\6\26\2\0"+
    "\2\27\1\0\22\26\3\0\30\26\1\0\11\26\1\0\1\26\2\0"+
    "\7\26\3\0\1\27\4\0\6\27\1\0\1\27\1\0\10\27\22\0"+
    "\2\27\15\0\60\26\1\27\2\26\7\27\4\0\10\26\10\27\1\0"+
    "\12\27\47\0\2\26\1\0\1\26\2\0\2\26\1\0\1\26\2\0"+
    "\1\26\6\0\4\26\1\0\7\26\1\0\3\26\1\0\1\26\1\0"+
    "\1\26\2\0\2\26\1\0\4\26\1\27\2\26\6\27\1\0\2\27"+
    "\1\26\2\0\5\26\1\0\1\26\1\0\6\27\2\0\12\27\2\0"+
    "\4\26\40\0\1\26\27\0\2\27\6\0\12\27\13\0\1\27\1\0"+
    "\1\27\1\0\1\27\4\0\2\27\10\26\1\0\44\26\4\0\24\27"+
    "\1\0\2\27\5\26\13\27\1\0\44\27\11\0\1\27\71\0\53\26"+
    "\24\27\1\26\12\27\6\0\6\26\4\27\4\26\3\27\1\26\3\27"+
    "\2\26\7\27\3\26\4\27\15\26\14\27\1\26\17\27\2\0\46\26"+
    "\1\0\1\26\5\0\1\26\2\0\53\26\1\0\u014d\26\1\0\4\26"+
    "\2\0\7\26\1\0\1\26\1\0\4\26\2\0\51\26\1\0\4\26"+
    "\2\0\41\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0\4\26"+
    "\2\0\17\26\1\0\71\26\1\0\4\26\2\0\103\26\2\0\3\27"+
    "\40\0\20\26\20\0\125\26\14\0\u026c\26\2\0\21\26\1\0\32\26"+
    "\5\0\113\26\3\0\3\26\17\0\15\26\1\0\4\26\3\27\13\0"+
    "\22\26\3\27\13\0\22\26\2\27\14\0\15\26\1\0\3\26\1\0"+
    "\2\27\14\0\64\26\40\27\3\0\1\26\3\0\2\26\1\27\2\0"+
    "\12\27\41\0\3\27\2\0\12\27\6\0\130\26\10\0\51\26\1\27"+
    "\1\26\5\0\106\26\12\0\35\26\3\0\14\27\4\0\14\27\12\0"+
    "\12\27\36\26\2\0\5\26\13\0\54\26\4\0\21\27\7\26\2\27"+
    "\6\0\12\27\46\0\27\26\5\27\4\0\65\26\12\27\1\0\35\27"+
    "\2\0\13\27\6\0\12\27\15\0\1\26\130\0\5\27\57\26\21\27"+
    "\7\26\4\0\12\27\21\0\11\27\14\0\3\27\36\26\15\27\2\26"+
    "\12\27\54\26\16\27\14\0\44\26\24\27\10\0\12\27\3\0\3\26"+
    "\12\27\44\26\122\0\3\27\1\0\25\27\4\26\1\27\4\26\3\27"+
    "\2\26\11\0\300\26\47\27\25\0\4\27\u0116\26\2\0\6\26\2\0"+
    "\46\26\2\0\6\26\2\0\10\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\37\26\2\0\65\26\1\0\7\26\1\0\1\26\3\0"+
    "\3\26\1\0\7\26\3\0\4\26\2\0\6\26\4\0\15\26\5\0"+
    "\3\26\1\0\7\26\16\0\5\27\32\0\5\27\20\0\2\26\23\0"+
    "\1\26\13\0\5\27\5\0\6\27\1\0\1\26\15\0\1\26\20\0"+
    "\15\26\3\0\33\26\25\0\15\27\4\0\1\27\3\0\14\27\21\0"+
    "\1\26\4\0\1\26\2\0\12\26\1\0\1\26\3\0\5\26\6\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\1\0\13\26\2\0"+
    "\4\26\5\0\5\26\4\0\1\26\21\0\51\26\u0a77\0\57\26\1\0"+
    "\57\26\1\0\205\26\6\0\4\26\3\27\2\26\14\0\46\26\1\0"+
    "\1\26\5\0\1\26\2\0\70\26\7\0\1\26\17\0\1\27\27\26"+
    "\11\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26"+
    "\1\0\7\26\1\0\7\26\1\0\7\26\1\0\40\27\57\0\1\26"+
    "\u01d5\0\3\26\31\0\11\26\6\27\1\0\5\26\2\0\5\26\4\0"+
    "\126\26\2\0\2\27\2\0\3\26\1\0\132\26\1\0\4\26\5\0"+
    "\51\26\3\0\136\26\21\0\33\26\65\0\20\26\u0200\0\u19b6\26\112\0"+
    "\u51cd\26\63\0\u048d\26\103\0\56\26\2\0\u010d\26\3\0\20\26\12\27"+
    "\2\26\24\0\57\26\1\27\4\0\12\27\1\0\31\26\7\0\1\27"+
    "\120\26\2\27\45\0\11\26\2\0\147\26\2\0\4\26\1\0\4\26"+
    "\14\0\13\26\115\0\12\26\1\27\3\26\1\27\4\26\1\27\27\26"+
    "\5\27\20\0\1\26\7\0\64\26\14\0\2\27\62\26\21\27\13\0"+
    "\12\27\6\0\22\27\6\26\3\0\1\26\4\0\12\27\34\26\10\27"+
    "\2\0\27\26\15\27\14\0\35\26\3\0\4\27\57\26\16\27\16\0"+
    "\1\26\12\27\46\0\51\26\16\27\11\0\3\26\1\27\10\26\2\27"+
    "\2\0\12\27\6\0\27\26\3\0\1\26\1\27\4\0\60\26\1\27"+
    "\1\26\3\27\2\26\2\27\5\26\2\27\1\26\1\27\1\26\30\0"+
    "\3\26\2\0\13\26\5\27\2\0\3\26\2\27\12\0\6\26\2\0"+
    "\6\26\2\0\6\26\11\0\7\26\1\0\7\26\221\0\43\26\10\27"+
    "\1\0\2\27\2\0\12\27\6\0\u2ba4\26\14\0\27\26\4\0\61\26"+
    "\u2104\0\u016e\26\2\0\152\26\46\0\7\26\14\0\5\26\5\0\1\26"+
    "\1\27\12\26\1\0\15\26\1\0\5\26\1\0\1\26\1\0\2\26"+
    "\1\0\2\26\1\0\154\26\41\0\u016b\26\22\0\100\26\2\0\66\26"+
    "\50\0\15\26\3\0\20\27\20\0\7\27\14\0\2\26\30\0\3\26"+
    "\31\0\1\26\6\0\5\26\1\0\207\26\2\0\1\27\4\0\1\26"+
    "\13\0\12\27\7\0\32\26\4\0\1\26\1\0\32\26\13\0\131\26"+
    "\3\0\6\26\2\0\6\26\2\0\6\26\2\0\3\26\3\0\2\26"+
    "\3\0\2\26\22\0\3\27\4\0\14\26\1\0\32\26\1\0\23\26"+
    "\1\0\2\26\1\0\17\26\2\0\16\26\42\0\173\26\105\0\65\26"+
    "\210\0\1\27\202\0\35\26\3\0\61\26\57\0\37\26\21\0\33\26"+
    "\65\0\36\26\2\0\44\26\4\0\10\26\1\0\5\26\52\0\236\26"+
    "\2\0\12\27\u0356\0\6\26\2\0\1\26\1\0\54\26\1\0\2\26"+
    "\3\0\1\26\2\0\27\26\252\0\26\26\12\0\32\26\106\0\70\26"+
    "\6\0\2\26\100\0\1\26\3\27\1\0\2\27\5\0\4\27\4\26"+
    "\1\0\3\26\1\0\33\26\4\0\3\27\4\0\1\27\40\0\35\26"+
    "\203\0\66\26\12\0\26\26\12\0\23\26\215\0\111\26\u03b7\0\3\27"+
    "\65\26\17\27\37\0\12\27\20\0\3\27\55\26\13\27\2\0\1\27"+
    "\22\0\31\26\7\0\12\27\6\0\3\27\44\26\16\27\1\0\12\27"+
    "\100\0\3\27\60\26\16\27\4\26\13\0\12\27\u04a6\0\53\26\15\27"+
    "\10\0\12\27\u0936\0\u036f\26\221\0\143\26\u0b9d\0\u042f\26\u33d1\0\u0239\26"+
    "\u04c7\0\105\26\13\0\1\26\56\27\20\0\4\27\15\26\u4060\0\2\26"+
    "\u2163\0\5\27\3\0\26\27\2\0\7\27\36\0\4\27\224\0\3\27"+
    "\u01bb\0\125\26\1\0\107\26\1\0\2\26\2\0\1\26\2\0\2\26"+
    "\2\0\4\26\1\0\14\26\1\0\1\26\1\0\7\26\1\0\101\26"+
    "\1\0\4\26\2\0\10\26\1\0\7\26\1\0\34\26\1\0\4\26"+
    "\1\0\5\26\1\0\1\26\3\0\7\26\1\0\u0154\26\2\0\31\26"+
    "\1\0\31\26\1\0\37\26\1\0\31\26\1\0\37\26\1\0\31\26"+
    "\1\0\37\26\1\0\31\26\1\0\37\26\1\0\31\26\1\0\10\26"+
    "\2\0\62\27\u1600\0\4\26\1\0\33\26\1\0\2\26\1\0\1\26"+
    "\2\0\1\26\1\0\12\26\1\0\4\26\1\0\1\26\1\0\1\26"+
    "\6\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\1\0\2\26\1\0\1\26\2\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\2\26\1\0\1\26\2\0\4\26"+
    "\1\0\7\26\1\0\4\26\1\0\4\26\1\0\1\26\1\0\12\26"+
    "\1\0\21\26\5\0\3\26\1\0\5\26\1\0\21\26\u1144\0\ua6d7\26"+
    "\51\0\u1035\26\13\0\336\26\u3fe2\0\u021e\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\27\36\0\140\27\200\0\360\27\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\2\3\1\1"+
    "\1\5\2\3\1\6\2\0\1\7\2\3\1\5\2\3"+
    "\2\0\3\3\2\0\1\10\1\11\1\3\4\0\1\3"+
    "\10\0\1\3\6\0\1\3\60\0\1\12\5\0\2\12"+
    "\231\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\47\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u0138\0\u015f\0\u0186\0\47\0\u01ad\0\u01d4"+
    "\0\u01fb\0\u0222\0\u0249\0\47\0\u0270\0\u0297\0\u02be\0\u02e5"+
    "\0\u030c\0\u0333\0\u035a\0\u0381\0\u03a8\0\47\0\234\0\u03cf"+
    "\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507"+
    "\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f"+
    "\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af"+
    "\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7"+
    "\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f"+
    "\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57"+
    "\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f"+
    "\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7"+
    "\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff"+
    "\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137"+
    "\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f"+
    "\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u0e79"+
    "\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8"+
    "\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0"+
    "\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u1701\0\u1728"+
    "\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u1839\0\u1860"+
    "\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923\0\u194a\0\u1971\0\u1998"+
    "\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0"+
    "\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba\0\u1be1\0\u1c08"+
    "\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40"+
    "\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51\0\u1e78"+
    "\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\u1f89\0\u1fb0"+
    "\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1\0\u20e8"+
    "\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab\0\u21d2\0\u21f9\0\u2220"+
    "\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a\0\u2331\0\u2358"+
    "\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442\0\u2469\0\u2490"+
    "\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553\0\u257a\0\u25a1\0\u25c8"+
    "\0\u25ef\0\u2616\0\u263d\0\u2664\0\u268b\0\u26b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\2\7\1\2\1\10"+
    "\3\6\1\11\3\6\2\12\1\13\1\2\1\7\1\6"+
    "\2\2\1\14\1\15\6\6\2\2\4\6\51\0\1\4"+
    "\50\0\1\16\2\17\2\0\10\17\10\0\10\17\2\0"+
    "\4\17\5\0\2\6\2\0\10\6\1\20\4\0\2\6"+
    "\1\0\10\6\2\0\4\6\10\0\1\21\43\0\2\6"+
    "\2\0\1\6\1\22\6\6\1\20\4\0\2\6\1\0"+
    "\10\6\2\0\4\6\5\0\2\6\2\0\5\6\1\23"+
    "\2\6\1\20\4\0\2\6\1\0\10\6\2\0\4\6"+
    "\21\0\1\24\32\0\2\6\2\0\10\6\1\20\4\0"+
    "\2\6\1\0\1\6\1\25\6\6\2\0\4\6\5\0"+
    "\2\6\2\0\10\6\1\20\4\0\2\6\1\0\7\6"+
    "\1\26\2\0\4\6\4\0\1\16\2\27\2\0\10\27"+
    "\10\0\10\27\2\0\4\27\5\0\1\30\3\0\10\30"+
    "\5\0\1\30\2\0\10\30\2\0\4\30\6\0\1\21"+
    "\45\0\2\6\2\0\2\6\1\31\5\6\1\20\4\0"+
    "\2\6\1\0\10\6\2\0\4\6\5\0\2\6\2\0"+
    "\6\6\1\32\1\6\1\20\4\0\2\6\1\0\10\6"+
    "\2\0\4\6\5\0\2\6\2\0\10\6\1\20\4\0"+
    "\2\6\1\0\2\6\1\33\5\6\2\0\4\6\5\0"+
    "\2\6\2\0\10\6\1\20\4\0\2\6\1\0\10\6"+
    "\1\34\1\0\4\6\4\0\1\16\2\35\2\0\10\35"+
    "\10\0\10\35\2\0\4\35\5\0\2\30\2\0\10\30"+
    "\5\0\2\30\1\36\10\30\2\0\4\30\5\0\2\6"+
    "\2\0\3\6\1\37\4\6\1\20\4\0\2\6\1\0"+
    "\10\6\2\0\4\6\5\0\2\6\2\0\7\6\1\31"+
    "\1\20\4\0\2\6\1\0\10\6\2\0\4\6\5\0"+
    "\2\6\2\0\10\6\1\20\4\0\2\6\1\0\3\6"+
    "\1\40\4\6\2\0\4\6\4\0\1\41\1\42\2\43"+
    "\1\0\10\42\4\0\1\43\1\42\2\0\10\42\2\0"+
    "\4\42\4\0\1\16\2\44\2\0\10\44\10\0\10\44"+
    "\2\0\4\44\5\0\2\6\2\0\10\6\1\20\4\0"+
    "\2\6\1\0\4\6\1\45\3\6\2\0\4\6\4\0"+
    "\1\46\2\47\2\0\10\47\10\0\10\47\2\0\4\47"+
    "\5\0\2\42\2\0\10\42\2\50\1\51\1\52\1\53"+
    "\2\42\1\0\10\42\2\0\4\42\10\0\1\54\10\0"+
    "\2\50\1\51\1\52\1\53\25\0\1\16\2\55\2\0"+
    "\10\55\10\0\10\55\2\0\4\55\5\0\2\6\2\0"+
    "\10\6\1\20\4\0\2\6\1\0\5\6\1\56\2\6"+
    "\2\0\4\6\21\0\2\50\1\51\1\52\1\53\25\0"+
    "\1\46\2\57\2\0\10\57\10\0\10\57\2\0\4\57"+
    "\21\0\1\60\31\0\1\61\1\62\2\63\1\0\10\62"+
    "\1\60\3\0\1\63\1\62\2\0\10\62\2\0\4\62"+
    "\24\0\1\60\47\0\1\60\27\0\1\54\12\0\2\50"+
    "\1\51\1\52\1\53\25\0\1\16\2\64\2\0\10\64"+
    "\10\0\10\64\2\0\4\64\5\0\2\6\2\0\10\6"+
    "\1\20\4\0\2\6\1\0\6\6\1\65\1\6\2\0"+
    "\4\6\4\0\1\46\2\66\2\0\10\66\10\0\10\66"+
    "\2\0\4\66\4\0\1\61\1\62\2\63\1\0\10\62"+
    "\4\0\1\63\1\62\2\0\10\62\2\0\4\62\4\0"+
    "\1\67\2\70\2\0\10\70\10\0\10\70\2\0\4\70"+
    "\5\0\2\62\2\0\10\62\5\0\2\62\1\0\10\62"+
    "\1\0\1\71\4\62\10\0\1\72\31\0\1\71\10\0"+
    "\1\16\2\73\2\0\10\73\10\0\10\73\2\0\4\73"+
    "\4\0\1\74\2\6\2\0\10\6\1\20\4\0\2\6"+
    "\1\0\10\6\2\0\4\6\4\0\1\46\2\75\2\0"+
    "\10\75\10\0\10\75\2\0\4\75\42\0\1\71\10\0"+
    "\1\67\2\76\2\0\10\76\10\0\10\76\2\0\4\76"+
    "\43\0\1\77\11\0\1\72\33\0\1\71\10\0\1\16"+
    "\2\100\2\0\10\100\10\0\10\100\2\0\4\100\4\0"+
    "\1\101\2\102\2\0\10\102\10\0\10\102\2\0\4\102"+
    "\4\0\1\46\2\103\2\0\10\103\10\0\10\103\2\0"+
    "\4\103\4\0\1\67\2\104\2\0\10\104\10\0\10\104"+
    "\2\0\4\104\44\0\1\105\6\0\1\16\2\106\2\0"+
    "\10\106\10\0\10\106\2\0\4\106\30\0\1\36\22\0"+
    "\1\101\2\107\2\0\10\107\10\0\10\107\2\0\4\107"+
    "\4\0\1\46\2\110\2\0\10\110\10\0\10\110\2\0"+
    "\4\110\4\0\1\67\2\111\2\0\10\111\10\0\10\111"+
    "\2\0\4\111\45\0\1\112\5\0\1\16\2\113\2\0"+
    "\10\113\10\0\10\113\2\0\4\113\4\0\1\101\2\114"+
    "\2\0\10\114\10\0\10\114\2\0\4\114\4\0\1\46"+
    "\2\115\2\0\10\115\10\0\10\115\2\0\4\115\4\0"+
    "\1\67\2\116\2\0\10\116\10\0\10\116\2\0\4\116"+
    "\46\0\1\117\4\0\1\16\2\120\2\0\10\120\10\0"+
    "\10\120\2\0\4\120\4\0\1\101\2\121\2\0\10\121"+
    "\10\0\10\121\2\0\4\121\4\0\1\46\2\122\2\0"+
    "\10\122\10\0\10\122\2\0\4\122\4\0\1\67\2\123"+
    "\2\0\10\123\10\0\10\123\2\0\4\123\5\0\1\124"+
    "\3\0\10\124\5\0\1\124\2\0\1\125\7\124\2\0"+
    "\4\124\4\0\1\16\2\126\2\0\10\126\10\0\10\126"+
    "\2\0\4\126\4\0\1\101\2\127\2\0\10\127\10\0"+
    "\10\127\2\0\4\127\4\0\1\46\2\130\2\0\10\130"+
    "\10\0\10\130\2\0\4\130\4\0\1\67\2\131\2\0"+
    "\10\131\10\0\10\131\2\0\4\131\5\0\2\124\2\0"+
    "\10\124\1\132\4\0\2\124\1\0\10\124\2\0\4\124"+
    "\5\0\2\124\2\0\10\124\1\132\4\0\2\124\1\0"+
    "\1\124\1\133\6\124\2\0\4\124\4\0\1\16\2\134"+
    "\2\0\10\134\10\0\10\134\2\0\4\134\4\0\1\101"+
    "\2\135\2\0\10\135\10\0\10\135\2\0\4\135\4\0"+
    "\1\46\2\136\2\0\10\136\10\0\10\136\2\0\4\136"+
    "\4\0\1\67\2\137\2\0\10\137\10\0\10\137\2\0"+
    "\4\137\5\0\1\140\3\0\10\140\5\0\1\140\2\0"+
    "\10\140\2\0\4\140\5\0\2\124\2\0\10\124\1\132"+
    "\4\0\2\124\1\0\2\124\1\141\5\124\2\0\4\124"+
    "\4\0\1\16\2\142\2\0\10\142\10\0\10\142\2\0"+
    "\4\142\4\0\1\101\2\143\2\0\10\143\10\0\10\143"+
    "\2\0\4\143\4\0\1\46\2\144\2\0\10\144\10\0"+
    "\10\144\2\0\4\144\4\0\1\67\2\145\2\0\10\145"+
    "\10\0\10\145\2\0\4\145\5\0\2\140\2\0\10\140"+
    "\5\0\2\140\1\146\10\140\2\0\4\140\5\0\2\124"+
    "\2\0\10\124\1\132\4\0\2\124\1\0\3\124\1\147"+
    "\4\124\2\0\4\124\4\0\1\16\2\150\2\0\10\150"+
    "\10\0\10\150\2\0\4\150\4\0\1\101\2\151\2\0"+
    "\10\151\10\0\10\151\2\0\4\151\4\0\1\46\2\152"+
    "\2\0\10\152\10\0\10\152\2\0\4\152\4\0\1\67"+
    "\2\153\2\0\10\153\10\0\10\153\2\0\4\153\1\0"+
    "\1\154\1\155\51\0\2\124\2\0\10\124\1\132\4\0"+
    "\2\124\1\0\4\124\1\156\3\124\2\0\4\124\4\0"+
    "\1\16\2\157\2\0\10\157\10\0\10\157\2\0\4\157"+
    "\4\0\1\101\2\160\2\0\10\160\10\0\10\160\2\0"+
    "\4\160\4\0\1\46\2\161\2\0\10\161\10\0\10\161"+
    "\2\0\4\161\4\0\1\67\2\162\2\0\10\162\10\0"+
    "\10\162\2\0\4\162\2\0\1\155\2\0\1\163\3\0"+
    "\10\163\5\0\1\163\2\0\1\164\7\163\2\0\4\163"+
    "\5\0\1\163\3\0\10\163\5\0\1\163\2\0\1\164"+
    "\7\163\2\0\4\163\5\0\2\124\2\0\10\124\1\132"+
    "\4\0\2\124\1\0\5\124\1\165\2\124\2\0\4\124"+
    "\4\0\1\16\2\166\2\0\10\166\10\0\10\166\2\0"+
    "\4\166\4\0\1\101\2\167\2\0\10\167\10\0\10\167"+
    "\2\0\4\167\4\0\1\46\2\170\2\0\10\170\10\0"+
    "\10\170\2\0\4\170\4\0\1\67\2\171\2\0\10\171"+
    "\10\0\10\171\2\0\4\171\5\0\2\163\2\0\10\163"+
    "\1\172\4\0\2\163\1\0\10\163\2\0\4\163\5\0"+
    "\2\163\2\0\10\163\1\172\4\0\2\163\1\0\1\163"+
    "\1\173\6\163\2\0\4\163\5\0\2\124\2\0\10\124"+
    "\1\132\4\0\2\124\1\0\6\124\1\174\1\124\2\0"+
    "\4\124\4\0\1\16\2\175\2\0\10\175\10\0\10\175"+
    "\2\0\4\175\4\0\1\101\2\176\2\0\10\176\10\0"+
    "\10\176\2\0\4\176\4\0\1\46\2\177\2\0\10\177"+
    "\10\0\10\177\2\0\4\177\4\0\1\67\2\200\2\0"+
    "\10\200\10\0\10\200\2\0\4\200\5\0\1\201\3\0"+
    "\10\201\5\0\1\201\2\0\10\201\2\0\4\201\5\0"+
    "\2\163\2\0\10\163\1\172\4\0\2\163\1\0\2\163"+
    "\1\202\5\163\2\0\4\163\4\0\1\203\2\124\2\0"+
    "\10\124\1\132\4\0\2\124\1\0\10\124\2\0\4\124"+
    "\4\0\1\16\2\204\2\0\10\204\10\0\10\204\2\0"+
    "\4\204\4\0\1\101\2\205\2\0\10\205\10\0\10\205"+
    "\2\0\4\205\4\0\1\46\2\206\2\0\10\206\10\0"+
    "\10\206\2\0\4\206\4\0\1\67\2\207\2\0\10\207"+
    "\10\0\10\207\2\0\4\207\5\0\2\201\2\0\10\201"+
    "\5\0\2\201\1\210\10\201\2\0\4\201\5\0\2\163"+
    "\2\0\10\163\1\172\4\0\2\163\1\0\3\163\1\211"+
    "\4\163\2\0\4\163\4\0\1\212\2\213\2\0\10\213"+
    "\10\0\10\213\2\0\4\213\4\0\1\16\2\214\2\0"+
    "\10\214\10\0\10\214\2\0\4\214\4\0\1\101\2\215"+
    "\2\0\10\215\10\0\10\215\2\0\4\215\4\0\1\46"+
    "\2\216\2\0\10\216\10\0\10\216\2\0\4\216\4\0"+
    "\1\67\2\217\2\0\10\217\10\0\10\217\2\0\4\217"+
    "\5\0\2\163\2\0\10\163\1\172\4\0\2\163\1\0"+
    "\4\163\1\220\3\163\2\0\4\163\30\0\1\146\22\0"+
    "\1\212\2\221\2\0\10\221\10\0\10\221\2\0\4\221"+
    "\4\0\1\16\2\222\2\0\10\222\10\0\10\222\2\0"+
    "\4\222\4\0\1\101\2\223\2\0\10\223\10\0\10\223"+
    "\2\0\4\223\4\0\1\46\2\224\2\0\10\224\10\0"+
    "\10\224\2\0\4\224\4\0\1\67\2\225\2\0\10\225"+
    "\10\0\10\225\2\0\4\225\5\0\2\163\2\0\10\163"+
    "\1\172\4\0\2\163\1\0\5\163\1\226\2\163\2\0"+
    "\4\163\4\0\1\212\2\227\2\0\10\227\10\0\10\227"+
    "\2\0\4\227\4\0\1\16\2\230\2\0\10\230\10\0"+
    "\10\230\2\0\4\230\4\0\1\101\2\231\2\0\10\231"+
    "\10\0\10\231\2\0\4\231\4\0\1\46\2\232\2\0"+
    "\10\232\10\0\10\232\2\0\4\232\4\0\1\67\2\233"+
    "\2\0\10\233\10\0\10\233\2\0\4\233\5\0\2\163"+
    "\2\0\10\163\1\172\4\0\2\163\1\0\6\163\1\234"+
    "\1\163\2\0\4\163\4\0\1\212\2\235\2\0\10\235"+
    "\10\0\10\235\2\0\4\235\4\0\1\16\2\236\2\0"+
    "\10\236\10\0\10\236\2\0\4\236\4\0\1\101\2\237"+
    "\2\0\10\237\10\0\10\237\2\0\4\237\4\0\1\46"+
    "\2\240\2\0\10\240\10\0\10\240\2\0\4\240\4\0"+
    "\1\67\2\241\2\0\10\241\10\0\10\241\2\0\4\241"+
    "\4\0\1\242\2\163\2\0\10\163\1\172\4\0\2\163"+
    "\1\0\10\163\2\0\4\163\4\0\1\212\2\243\2\0"+
    "\10\243\10\0\10\243\2\0\4\243\4\0\1\16\2\244"+
    "\2\0\10\244\10\0\10\244\2\0\4\244\4\0\1\101"+
    "\2\245\2\0\10\245\10\0\10\245\2\0\4\245\4\0"+
    "\1\46\2\246\2\0\10\246\10\0\10\246\2\0\4\246"+
    "\4\0\1\67\2\247\2\0\10\247\10\0\10\247\2\0"+
    "\4\247\4\0\1\250\2\251\2\0\10\251\10\0\10\251"+
    "\2\0\4\251\4\0\1\212\2\252\2\0\10\252\10\0"+
    "\10\252\2\0\4\252\4\0\1\16\2\253\2\0\10\253"+
    "\10\0\10\253\2\0\4\253\4\0\1\101\2\254\2\0"+
    "\10\254\10\0\10\254\2\0\4\254\4\0\1\46\2\255"+
    "\2\0\10\255\10\0\10\255\2\0\4\255\4\0\1\67"+
    "\2\256\2\0\10\256\10\0\10\256\2\0\4\256\30\0"+
    "\1\210\22\0\1\250\2\257\2\0\10\257\10\0\10\257"+
    "\2\0\4\257\4\0\1\212\2\260\2\0\10\260\10\0"+
    "\10\260\2\0\4\260\4\0\1\16\2\261\2\0\10\261"+
    "\10\0\10\261\2\0\4\261\4\0\1\101\2\262\2\0"+
    "\10\262\10\0\10\262\2\0\4\262\4\0\1\46\2\263"+
    "\2\0\10\263\10\0\10\263\2\0\4\263\4\0\1\67"+
    "\2\264\2\0\10\264\10\0\10\264\2\0\4\264\4\0"+
    "\1\250\2\265\2\0\10\265\10\0\10\265\2\0\4\265"+
    "\4\0\1\212\2\266\2\0\10\266\10\0\10\266\2\0"+
    "\4\266\4\0\1\16\2\267\2\0\10\267\10\0\10\267"+
    "\2\0\4\267\4\0\1\101\2\270\2\0\10\270\10\0"+
    "\10\270\2\0\4\270\4\0\1\46\2\271\2\0\10\271"+
    "\10\0\10\271\2\0\4\271\4\0\1\67\2\272\2\0"+
    "\10\272\10\0\10\272\2\0\4\272\4\0\1\250\2\273"+
    "\2\0\10\273\10\0\10\273\2\0\4\273\4\0\1\212"+
    "\2\274\2\0\10\274\10\0\10\274\2\0\4\274\4\0"+
    "\1\16\2\275\2\0\10\275\10\0\10\275\2\0\4\275"+
    "\4\0\1\101\2\276\2\0\10\276\10\0\10\276\2\0"+
    "\4\276\4\0\1\46\2\277\2\0\10\277\10\0\10\277"+
    "\2\0\4\277\4\0\1\67\2\300\2\0\10\300\10\0"+
    "\10\300\2\0\4\300\4\0\1\250\2\301\2\0\10\301"+
    "\10\0\10\301\2\0\4\301\4\0\1\212\2\302\2\0"+
    "\10\302\10\0\10\302\2\0\4\302\4\0\1\16\2\303"+
    "\2\0\10\303\10\0\10\303\2\0\4\303\4\0\1\101"+
    "\2\304\2\0\10\304\10\0\10\304\2\0\4\304\4\0"+
    "\1\46\2\305\2\0\10\305\10\0\10\305\2\0\4\305"+
    "\4\0\1\67\2\306\2\0\10\306\10\0\10\306\2\0"+
    "\4\306\4\0\1\250\2\307\2\0\10\307\10\0\10\307"+
    "\2\0\4\307\4\0\1\212\2\310\2\0\10\310\10\0"+
    "\10\310\2\0\4\310\4\0\1\16\2\311\2\0\10\311"+
    "\10\0\10\311\2\0\4\311\4\0\1\101\2\312\2\0"+
    "\10\312\10\0\10\312\2\0\4\312\4\0\1\46\2\313"+
    "\2\0\10\313\10\0\10\313\2\0\4\313\4\0\1\67"+
    "\2\314\2\0\10\314\10\0\10\314\2\0\4\314\4\0"+
    "\1\250\2\315\2\0\10\315\10\0\10\315\2\0\4\315"+
    "\4\0\1\212\2\316\2\0\10\316\10\0\10\316\2\0"+
    "\4\316\4\0\1\16\46\0\1\101\2\317\2\0\10\317"+
    "\10\0\10\317\2\0\4\317\4\0\1\46\2\320\2\0"+
    "\10\320\10\0\10\320\2\0\4\320\4\0\1\67\2\321"+
    "\2\0\10\321\10\0\10\321\2\0\4\321\4\0\1\250"+
    "\2\322\2\0\10\322\10\0\10\322\2\0\4\322\4\0"+
    "\1\212\2\323\2\0\10\323\10\0\10\323\2\0\4\323"+
    "\4\0\1\101\2\324\2\0\10\324\10\0\10\324\2\0"+
    "\4\324\4\0\1\46\2\325\2\0\10\325\10\0\10\325"+
    "\2\0\4\325\4\0\1\67\2\326\2\0\10\326\10\0"+
    "\10\326\2\0\4\326\4\0\1\250\2\327\2\0\10\327"+
    "\10\0\10\327\2\0\4\327\4\0\1\212\2\330\2\0"+
    "\10\330\10\0\10\330\2\0\4\330\4\0\1\101\2\331"+
    "\2\0\10\331\10\0\10\331\2\0\4\331\4\0\1\46"+
    "\2\332\2\0\10\332\10\0\10\332\2\0\4\332\4\0"+
    "\1\67\2\333\2\0\10\333\10\0\10\333\2\0\4\333"+
    "\4\0\1\250\2\334\2\0\10\334\10\0\10\334\2\0"+
    "\4\334\4\0\1\212\2\335\2\0\10\335\10\0\10\335"+
    "\2\0\4\335\4\0\1\101\2\336\2\0\10\336\10\0"+
    "\10\336\2\0\4\336\4\0\1\46\46\0\1\67\2\337"+
    "\2\0\10\337\10\0\10\337\2\0\4\337\4\0\1\250"+
    "\2\340\2\0\10\340\10\0\10\340\2\0\4\340\4\0"+
    "\1\212\2\341\2\0\10\341\10\0\10\341\2\0\4\341"+
    "\4\0\1\101\2\342\2\0\10\342\10\0\10\342\2\0"+
    "\4\342\4\0\1\67\2\343\2\0\10\343\10\0\10\343"+
    "\2\0\4\343\4\0\1\250\2\344\2\0\10\344\10\0"+
    "\10\344\2\0\4\344\4\0\1\212\2\345\2\0\10\345"+
    "\10\0\10\345\2\0\4\345\4\0\1\101\2\346\2\0"+
    "\10\346\10\0\10\346\2\0\4\346\4\0\1\67\46\0"+
    "\1\250\2\347\2\0\10\347\10\0\10\347\2\0\4\347"+
    "\4\0\1\212\2\350\2\0\10\350\10\0\10\350\2\0"+
    "\4\350\4\0\1\101\2\351\2\0\10\351\10\0\10\351"+
    "\2\0\4\351\4\0\1\250\2\352\2\0\10\352\10\0"+
    "\10\352\2\0\4\352\4\0\1\212\2\353\2\0\10\353"+
    "\10\0\10\353\2\0\4\353\4\0\1\101\46\0\1\250"+
    "\2\354\2\0\10\354\10\0\10\354\2\0\4\354\4\0"+
    "\1\212\2\355\2\0\10\355\10\0\10\355\2\0\4\355"+
    "\4\0\1\250\2\356\2\0\10\356\10\0\10\356\2\0"+
    "\4\356\4\0\1\212\2\357\2\0\10\357\10\0\10\357"+
    "\2\0\4\357\4\0\1\250\2\360\2\0\10\360\10\0"+
    "\10\360\2\0\4\360\4\0\1\212\2\361\2\0\10\361"+
    "\10\0\10\361\2\0\4\361\4\0\1\250\2\362\2\0"+
    "\10\362\10\0\10\362\2\0\4\362\4\0\1\212\2\363"+
    "\2\0\10\363\10\0\10\363\2\0\4\363\4\0\1\250"+
    "\2\364\2\0\10\364\10\0\10\364\2\0\4\364\4\0"+
    "\1\212\2\365\2\0\10\365\10\0\10\365\2\0\4\365"+
    "\4\0\1\250\2\366\2\0\10\366\10\0\10\366\2\0"+
    "\4\366\4\0\1\212\2\367\2\0\10\367\10\0\10\367"+
    "\2\0\4\367\4\0\1\250\2\370\2\0\10\370\10\0"+
    "\10\370\2\0\4\370\4\0\1\212\2\371\2\0\10\371"+
    "\10\0\10\371\2\0\4\371\4\0\1\250\2\372\2\0"+
    "\10\372\10\0\10\372\2\0\4\372\4\0\1\212\2\373"+
    "\2\0\10\373\10\0\10\373\2\0\4\373\4\0\1\250"+
    "\2\374\2\0\10\374\10\0\10\374\2\0\4\374\4\0"+
    "\1\212\2\375\2\0\10\375\10\0\10\375\2\0\4\375"+
    "\4\0\1\250\2\376\2\0\10\376\10\0\10\376\2\0"+
    "\4\376\4\0\1\212\2\377\2\0\10\377\10\0\10\377"+
    "\2\0\4\377\4\0\1\250\2\u0100\2\0\10\u0100\10\0"+
    "\10\u0100\2\0\4\u0100\4\0\1\212\2\u0101\2\0\10\u0101"+
    "\10\0\10\u0101\2\0\4\u0101\4\0\1\250\2\u0102\2\0"+
    "\10\u0102\10\0\10\u0102\2\0\4\u0102\4\0\1\212\46\0"+
    "\1\250\2\u0103\2\0\10\u0103\10\0\10\u0103\2\0\4\u0103"+
    "\4\0\1\250\2\u0104\2\0\10\u0104\10\0\10\u0104\2\0"+
    "\4\u0104\4\0\1\250\2\u0105\2\0\10\u0105\10\0\10\u0105"+
    "\2\0\4\u0105\4\0\1\250\2\u0106\2\0\10\u0106\10\0"+
    "\10\u0106\2\0\4\u0106\4\0\1\250\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9945];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\11\1\1\11\2\0\3\1"+
    "\1\11\2\1\2\0\3\1\2\0\1\11\2\1\4\0"+
    "\1\1\10\0\1\1\6\0\1\1\60\0\1\1\5\0"+
    "\2\1\231\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2852) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 11: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 12: break;
          case 3: 
            { System.out.printf("\n>>> Identificador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 13: break;
          case 4: 
            { System.out.printf("\n>>> Integer encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 14: break;
          case 5: 
            { System.out.printf(">>> Operador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 15: break;
          case 6: 
            { System.out.printf("\n>>> String encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 16: break;
          case 7: 
            { System.out.printf("\n>>> Double encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 17: break;
          case 8: 
            { System.out.printf("\n>>> Sentencia encontrada: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 18: break;
          case 9: 
            { System.out.printf("\n>>> Bool encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 19: break;
          case 10: 
            { System.out.printf(">>> If encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
