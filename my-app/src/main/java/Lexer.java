/* The following code was generated by JFlex 1.7.0 */

import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Integer;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/matiasrolon/Documentos/Universidad/2019/2do Cuatrimestre/Teoria de la Computacion I/TP Integrador/teoria1/my-app/src/main/jflex/Lexico1.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENTS_A = 2;
  public static final int COMMENTS_B = 4;
  public static final int DISPLAY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\4\1\2\1\0\1\4\1\1\16\30\4\0\1\0\1\21"+
    "\1\3\1\0\1\26\1\0\1\24\1\0\1\32\1\33\3\0\1\61"+
    "\1\7\1\62\1\6\11\5\1\0\1\31\1\23\1\20\1\22\2\0"+
    "\1\43\1\27\1\57\1\36\1\56\1\51\1\50\1\27\1\37\2\27"+
    "\1\42\1\60\1\47\1\52\1\41\1\27\1\46\1\40\1\45\4\27"+
    "\1\44\1\27\4\0\1\26\1\0\1\15\3\27\1\13\1\14\1\27"+
    "\1\54\1\55\2\27\1\16\5\27\1\11\1\17\1\10\1\12\1\27"+
    "\1\53\3\27\1\34\1\25\1\35\1\0\41\30\1\0\1\4\4\26"+
    "\4\0\1\26\2\0\1\30\7\0\1\26\4\0\1\26\5\0\21\26"+
    "\1\27\5\26\1\0\31\26\1\27\5\26\1\0\u01ca\26\4\0\14\26"+
    "\16\0\5\26\7\0\1\26\1\0\1\26\21\0\160\30\5\26\1\0"+
    "\2\26\2\0\4\26\1\0\1\26\6\0\1\26\1\0\3\26\1\0"+
    "\1\26\1\0\24\26\1\0\123\26\1\0\213\26\1\0\5\30\2\0"+
    "\246\26\1\0\46\26\2\0\1\26\7\0\47\26\7\0\1\26\1\0"+
    "\55\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0\1\30\10\0"+
    "\33\26\5\0\3\26\15\0\6\30\5\0\1\26\4\0\13\30\1\0"+
    "\1\30\3\0\53\26\37\30\4\0\2\26\1\30\143\26\1\0\1\26"+
    "\10\30\1\0\6\30\2\26\2\30\1\0\4\30\2\26\12\30\3\26"+
    "\2\0\1\26\17\0\1\30\1\26\1\30\36\26\33\30\2\0\131\26"+
    "\13\30\1\26\16\0\12\30\41\26\11\30\2\26\4\0\1\26\5\0"+
    "\26\26\4\30\1\26\11\30\1\26\3\30\1\26\5\30\22\0\31\26"+
    "\3\30\4\0\13\26\65\0\25\26\1\0\10\26\26\0\60\30\66\26"+
    "\3\30\1\26\22\30\1\26\7\30\12\26\2\30\2\0\12\30\1\0"+
    "\20\26\3\30\1\0\10\26\2\0\2\26\2\0\26\26\1\0\7\26"+
    "\1\0\1\26\3\0\4\26\2\0\1\30\1\26\7\30\2\0\2\30"+
    "\2\0\3\30\1\26\10\0\1\30\4\0\2\26\1\0\3\26\2\30"+
    "\2\0\12\30\4\26\7\0\2\26\4\0\3\30\1\0\6\26\4\0"+
    "\2\26\2\0\26\26\1\0\7\26\1\0\2\26\1\0\2\26\1\0"+
    "\2\26\2\0\1\30\1\0\5\30\4\0\2\30\2\0\3\30\3\0"+
    "\1\30\7\0\4\26\1\0\1\26\7\0\14\30\3\26\1\30\13\0"+
    "\3\30\1\0\11\26\1\0\3\26\1\0\26\26\1\0\7\26\1\0"+
    "\2\26\1\0\5\26\2\0\1\30\1\26\10\30\1\0\3\30\1\0"+
    "\3\30\2\0\1\26\17\0\2\26\2\30\2\0\12\30\1\0\1\26"+
    "\7\0\1\26\6\30\1\0\3\30\1\0\10\26\2\0\2\26\2\0"+
    "\26\26\1\0\7\26\1\0\2\26\1\0\5\26\2\0\1\30\1\26"+
    "\7\30\2\0\2\30\2\0\3\30\10\0\2\30\4\0\2\26\1\0"+
    "\3\26\2\30\2\0\12\30\1\0\1\26\20\0\1\30\1\26\1\0"+
    "\6\26\3\0\3\26\1\0\4\26\3\0\2\26\1\0\1\26\1\0"+
    "\2\26\3\0\2\26\3\0\3\26\3\0\14\26\4\0\5\30\3\0"+
    "\3\30\1\0\4\30\2\0\1\26\6\0\1\30\16\0\12\30\11\0"+
    "\1\26\6\0\4\30\1\0\10\26\1\0\3\26\1\0\27\26\1\0"+
    "\20\26\3\0\1\26\7\30\1\0\3\30\1\0\4\30\7\0\2\30"+
    "\1\0\3\26\5\0\2\26\2\30\2\0\12\30\20\0\1\26\3\30"+
    "\1\0\10\26\1\0\3\26\1\0\27\26\1\0\12\26\1\0\5\26"+
    "\2\0\1\30\1\26\7\30\1\0\3\30\1\0\4\30\7\0\2\30"+
    "\7\0\1\26\1\0\2\26\2\30\2\0\12\30\1\0\2\26\15\0"+
    "\4\30\1\0\10\26\1\0\3\26\1\0\51\26\2\30\1\26\7\30"+
    "\1\0\3\30\1\0\4\30\1\26\5\0\3\26\1\30\7\0\3\26"+
    "\2\30\2\0\12\30\12\0\6\26\2\0\2\30\1\0\22\26\3\0"+
    "\30\26\1\0\11\26\1\0\1\26\2\0\7\26\3\0\1\30\4\0"+
    "\6\30\1\0\1\30\1\0\10\30\6\0\12\30\2\0\2\30\15\0"+
    "\60\26\1\30\2\26\7\30\4\0\10\26\10\30\1\0\12\30\47\0"+
    "\2\26\1\0\1\26\2\0\2\26\1\0\1\26\2\0\1\26\6\0"+
    "\4\26\1\0\7\26\1\0\3\26\1\0\1\26\1\0\1\26\2\0"+
    "\2\26\1\0\4\26\1\30\2\26\6\30\1\0\2\30\1\26\2\0"+
    "\5\26\1\0\1\26\1\0\6\30\2\0\12\30\2\0\4\26\40\0"+
    "\1\26\27\0\2\30\6\0\12\30\13\0\1\30\1\0\1\30\1\0"+
    "\1\30\4\0\2\30\10\26\1\0\44\26\4\0\24\30\1\0\2\30"+
    "\5\26\13\30\1\0\44\30\11\0\1\30\71\0\53\26\24\30\1\26"+
    "\12\30\6\0\6\26\4\30\4\26\3\30\1\26\3\30\2\26\7\30"+
    "\3\26\4\30\15\26\14\30\1\26\17\30\2\0\46\26\1\0\1\26"+
    "\5\0\1\26\2\0\53\26\1\0\u014d\26\1\0\4\26\2\0\7\26"+
    "\1\0\1\26\1\0\4\26\2\0\51\26\1\0\4\26\2\0\41\26"+
    "\1\0\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0\17\26"+
    "\1\0\71\26\1\0\4\26\2\0\103\26\2\0\3\30\40\0\20\26"+
    "\20\0\126\26\2\0\6\26\3\0\u026c\26\2\0\21\26\1\0\32\26"+
    "\5\0\113\26\3\0\13\26\7\0\15\26\1\0\4\26\3\30\13\0"+
    "\22\26\3\30\13\0\22\26\2\30\14\0\15\26\1\0\3\26\1\0"+
    "\2\30\14\0\64\26\40\30\3\0\1\26\3\0\2\26\1\30\2\0"+
    "\12\30\41\0\4\30\1\0\12\30\6\0\130\26\10\0\5\26\2\30"+
    "\42\26\1\30\1\26\5\0\106\26\12\0\37\26\1\0\14\30\4\0"+
    "\14\30\12\0\12\30\36\26\2\0\5\26\13\0\54\26\4\0\32\26"+
    "\6\0\12\30\46\0\27\26\5\30\4\0\65\26\12\30\1\0\35\30"+
    "\2\0\13\30\6\0\12\30\15\0\1\26\10\0\16\30\102\0\5\30"+
    "\57\26\21\30\7\26\4\0\12\30\21\0\11\30\14\0\3\30\36\26"+
    "\15\30\2\26\12\30\54\26\16\30\14\0\44\26\24\30\10\0\12\30"+
    "\3\0\3\26\12\30\44\26\2\0\11\26\107\0\3\30\1\0\25\30"+
    "\4\26\1\30\4\26\3\30\2\26\3\30\6\0\300\26\72\30\1\0"+
    "\5\30\u0116\26\2\0\6\26\2\0\46\26\2\0\6\26\2\0\10\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\37\26\2\0\65\26"+
    "\1\0\7\26\1\0\1\26\3\0\3\26\1\0\7\26\3\0\4\26"+
    "\2\0\6\26\4\0\15\26\5\0\3\26\1\0\7\26\16\0\5\30"+
    "\32\0\5\30\20\0\2\26\23\0\1\26\13\0\5\30\1\0\12\30"+
    "\1\0\1\26\15\0\1\26\20\0\15\26\3\0\40\26\20\0\15\30"+
    "\4\0\1\30\3\0\14\30\21\0\1\26\4\0\1\26\2\0\12\26"+
    "\1\0\1\26\3\0\5\26\6\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\1\0\13\26\2\0\4\26\5\0\5\26\4\0\1\26"+
    "\21\0\51\26\u0a77\0\57\26\1\0\57\26\1\0\205\26\6\0\4\26"+
    "\3\30\2\26\14\0\46\26\1\0\1\26\5\0\1\26\2\0\70\26"+
    "\7\0\1\26\17\0\1\30\27\26\11\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\40\30\57\0\1\26\u01d5\0\3\26\31\0\11\26\6\30"+
    "\1\0\5\26\2\0\5\26\4\0\126\26\2\0\2\30\2\0\3\26"+
    "\1\0\132\26\1\0\4\26\5\0\52\26\2\0\136\26\21\0\33\26"+
    "\65\0\20\26\u0200\0\u19b6\26\112\0\u51eb\26\25\0\u048d\26\103\0\56\26"+
    "\2\0\u010d\26\3\0\20\26\12\30\2\26\24\0\57\26\1\30\4\0"+
    "\12\30\1\0\37\26\2\30\120\26\2\30\45\0\11\26\2\0\147\26"+
    "\2\0\44\26\1\0\10\26\77\0\13\26\1\30\3\26\1\30\4\26"+
    "\1\30\27\26\5\30\20\0\1\26\7\0\64\26\14\0\2\30\62\26"+
    "\22\30\12\0\12\30\6\0\22\30\6\26\3\0\1\26\1\0\1\26"+
    "\2\0\12\30\34\26\10\30\2\0\27\26\15\30\14\0\35\26\3\0"+
    "\4\30\57\26\16\30\16\0\1\26\12\30\6\0\5\26\1\30\12\26"+
    "\12\30\5\26\1\0\51\26\16\30\11\0\3\26\1\30\10\26\2\30"+
    "\2\0\12\30\6\0\27\26\3\0\1\26\3\30\62\26\1\30\1\26"+
    "\3\30\2\26\2\30\5\26\2\30\1\26\1\30\1\26\30\0\3\26"+
    "\2\0\13\26\5\30\2\0\3\26\2\30\12\0\6\26\2\0\6\26"+
    "\2\0\6\26\11\0\7\26\1\0\7\26\1\0\53\26\1\0\12\26"+
    "\12\0\163\26\10\30\1\0\2\30\2\0\12\30\6\0\u2ba4\26\14\0"+
    "\27\26\4\0\61\26\u2104\0\u016e\26\2\0\152\26\46\0\7\26\14\0"+
    "\5\26\5\0\1\26\1\30\12\26\1\0\15\26\1\0\5\26\1\0"+
    "\1\26\1\0\2\26\1\0\2\26\1\0\154\26\41\0\u016b\26\22\0"+
    "\100\26\2\0\66\26\50\0\15\26\3\0\20\30\20\0\20\30\3\0"+
    "\2\26\30\0\3\26\31\0\1\26\6\0\5\26\1\0\207\26\2\0"+
    "\1\30\4\0\1\26\13\0\12\30\7\0\32\26\4\0\1\26\1\0"+
    "\32\26\13\0\131\26\3\0\6\26\2\0\6\26\2\0\6\26\2\0"+
    "\3\26\3\0\2\26\3\0\2\26\22\0\3\30\4\0\14\26\1\0"+
    "\32\26\1\0\23\26\1\0\2\26\1\0\17\26\2\0\16\26\42\0"+
    "\173\26\105\0\65\26\210\0\1\30\202\0\35\26\3\0\61\26\17\0"+
    "\1\30\37\0\40\26\15\0\36\26\5\0\46\26\5\30\5\0\36\26"+
    "\2\0\44\26\4\0\10\26\1\0\5\26\52\0\236\26\2\0\12\30"+
    "\6\0\44\26\4\0\44\26\4\0\50\26\10\0\64\26\234\0\u0137\26"+
    "\11\0\26\26\12\0\10\26\230\0\6\26\2\0\1\26\1\0\54\26"+
    "\1\0\2\26\3\0\1\26\2\0\27\26\12\0\27\26\11\0\37\26"+
    "\101\0\23\26\1\0\2\26\12\0\26\26\12\0\32\26\106\0\70\26"+
    "\6\0\2\26\100\0\1\26\3\30\1\0\2\30\5\0\4\30\4\26"+
    "\1\0\3\26\1\0\33\26\4\0\3\30\4\0\1\30\40\0\35\26"+
    "\3\0\35\26\43\0\10\26\1\0\34\26\2\30\31\0\66\26\12\0"+
    "\26\26\12\0\23\26\15\0\22\26\156\0\111\26\67\0\63\26\15\0"+
    "\63\26\u030d\0\3\30\65\26\17\30\37\0\12\30\17\0\4\30\55\26"+
    "\13\30\2\0\1\30\22\0\31\26\7\0\12\30\6\0\3\30\44\26"+
    "\16\30\1\0\12\30\20\0\43\26\1\30\2\0\1\26\11\0\3\30"+
    "\60\26\16\30\4\26\5\0\3\30\3\0\12\30\1\26\1\0\1\26"+
    "\43\0\22\26\1\0\31\26\14\30\6\0\1\30\101\0\7\26\1\0"+
    "\1\26\1\0\4\26\1\0\17\26\1\0\12\26\7\0\57\26\14\30"+
    "\5\0\12\30\6\0\4\30\1\0\10\26\2\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\2\26\1\0\5\26\2\0\1\30\1\26\7\30"+
    "\2\0\2\30\2\0\3\30\2\0\1\26\6\0\1\30\5\0\5\26"+
    "\2\30\2\0\7\30\3\0\5\30\213\0\65\26\22\30\4\26\5\0"+
    "\12\30\46\0\60\26\24\30\2\26\1\0\1\26\10\0\12\30\246\0"+
    "\57\26\7\30\2\0\11\30\27\0\4\26\2\30\42\0\60\26\21\30"+
    "\3\0\1\26\13\0\12\30\46\0\53\26\15\30\10\0\12\30\66\0"+
    "\32\26\3\0\17\30\4\0\12\30\u0166\0\100\26\12\30\25\0\1\26"+
    "\u0100\0\1\26\12\30\50\26\7\30\1\26\4\30\10\0\1\30\10\0"+
    "\1\26\13\30\50\26\2\0\4\26\20\30\46\0\71\26\u0107\0\11\26"+
    "\1\0\45\26\10\30\1\0\10\30\1\26\17\0\12\30\30\0\36\26"+
    "\2\0\26\30\1\0\16\30\111\0\7\26\1\0\2\26\1\0\46\26"+
    "\6\30\3\0\1\30\1\0\2\30\1\0\7\30\1\26\1\30\10\0"+
    "\12\30\u02a6\0\u039a\26\146\0\157\26\21\0\304\26\u0abc\0\u042f\26\u0fd1\0"+
    "\u0247\26\u21b9\0\u0239\26\7\0\37\26\1\0\12\30\146\0\36\26\2\0"+
    "\5\30\13\0\60\26\7\30\11\0\4\26\14\0\12\30\11\0\25\26"+
    "\5\0\23\26\u0370\0\105\26\13\0\1\26\56\30\20\0\4\30\15\26"+
    "\100\0\2\26\36\0\u17ed\26\23\0\u02f3\26\u250d\0\u011f\26\121\0\u018c\26"+
    "\u0904\0\153\26\5\0\15\26\3\0\11\26\7\0\12\26\3\0\2\30"+
    "\1\0\4\30\u14c1\0\5\30\3\0\26\30\2\0\7\30\36\0\4\30"+
    "\224\0\3\30\u01bb\0\125\26\1\0\107\26\1\0\2\26\2\0\1\26"+
    "\2\0\2\26\2\0\4\26\1\0\14\26\1\0\1\26\1\0\7\26"+
    "\1\0\101\26\1\0\4\26\2\0\10\26\1\0\7\26\1\0\34\26"+
    "\1\0\4\26\1\0\5\26\1\0\1\26\3\0\7\26\1\0\u0154\26"+
    "\2\0\31\26\1\0\31\26\1\0\37\26\1\0\31\26\1\0\37\26"+
    "\1\0\31\26\1\0\37\26\1\0\31\26\1\0\37\26\1\0\31\26"+
    "\1\0\10\26\2\0\62\30\u0200\0\67\30\4\0\62\30\10\0\1\30"+
    "\16\0\1\30\26\0\5\30\1\0\17\30\u0550\0\7\30\1\0\21\30"+
    "\2\0\7\30\1\0\2\30\1\0\5\30\u07d5\0\305\26\13\0\7\30"+
    "\51\0\104\26\7\30\5\0\12\30\u04a6\0\4\26\1\0\33\26\1\0"+
    "\2\26\1\0\1\26\2\0\1\26\1\0\12\26\1\0\4\26\1\0"+
    "\1\26\1\0\1\26\6\0\1\26\4\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\1\0\2\26\1\0\1\26\2\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\2\26\1\0"+
    "\1\26\2\0\4\26\1\0\7\26\1\0\4\26\1\0\4\26\1\0"+
    "\1\26\1\0\12\26\1\0\21\26\5\0\3\26\1\0\5\26\1\0"+
    "\21\26\u1144\0\ua6d7\26\51\0\u1035\26\13\0\336\26\2\0\u1682\26\16\0"+
    "\u1d31\26\u0c1f\0\u021e\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\30\36\0\140\30\200\0\360\30\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\3\3\1\4\1\1\1\5\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\10\3\1\1"+
    "\2\14\4\1\1\15\1\0\1\16\2\3\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\7\3\1\25\1\3\5\0"+
    "\1\26\1\0\4\3\1\27\5\3\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\7\3\1\0\4\3\1\35\2\3"+
    "\1\0\5\3\1\0\4\3\3\0\2\3\3\0\2\3"+
    "\3\0\2\3\25\0\1\36\1\37\11\0\1\40\1\41"+
    "\15\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed  string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\314\0\314\0\314\0\314\0\314\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\314\0\u0561\0\u0594\0\u05c7\0\u05fa\0\314\0\u062d\0\u0660"+
    "\0\u0693\0\u06c6\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u01cb"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u05fa\0\314\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u01cb\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\314\0\314\0\314\0\314\0\u0b5b\0\u01cb"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3"+
    "\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u01cb\0\u0df2\0\u0e25\0\u0e58"+
    "\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0"+
    "\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188"+
    "\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8"+
    "\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\314\0\314"+
    "\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a"+
    "\0\u194d\0\314\0\314\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\5\1\6\1\5\1\7\1\10\1\5\1\11\3\12"+
    "\1\13\3\12\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\2\12\1\5\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\7\12\1\33\1\12\1\34\1\12"+
    "\1\35\1\36\2\12\1\37\2\5\1\40\1\41\56\5"+
    "\1\42\1\43\62\5\1\44\10\5\10\45\6\5\2\45"+
    "\6\5\23\45\2\5\66\0\1\46\14\47\1\0\1\47"+
    "\5\0\1\47\6\0\23\47\7\0\2\7\1\50\62\0"+
    "\1\50\60\0\2\12\1\0\1\12\1\51\6\12\6\0"+
    "\3\12\5\0\23\12\7\0\2\12\1\0\10\12\6\0"+
    "\3\12\5\0\23\12\7\0\2\12\1\0\5\12\1\52"+
    "\2\12\6\0\3\12\5\0\23\12\22\0\1\53\62\0"+
    "\1\54\62\0\1\55\62\0\1\56\66\0\1\57\63\0"+
    "\1\60\42\0\2\12\1\0\10\12\6\0\3\12\5\0"+
    "\1\12\1\61\16\12\1\62\2\12\7\0\2\12\1\0"+
    "\10\12\6\0\3\12\5\0\11\12\1\63\11\12\7\0"+
    "\2\12\1\0\10\12\6\0\3\12\5\0\7\12\1\64"+
    "\13\12\7\0\2\12\1\0\10\12\6\0\3\12\5\0"+
    "\10\12\1\65\12\12\7\0\2\12\1\0\10\12\6\0"+
    "\3\12\5\0\4\12\1\66\16\12\7\0\2\12\1\0"+
    "\10\12\6\0\3\12\5\0\16\12\1\67\4\12\7\0"+
    "\2\12\1\0\4\12\1\70\3\12\6\0\3\12\5\0"+
    "\23\12\7\0\2\12\1\0\10\12\6\0\3\12\5\0"+
    "\11\12\1\71\11\12\63\0\1\72\3\0\1\41\141\0"+
    "\1\73\62\0\1\74\62\0\1\75\6\0\2\76\1\0"+
    "\10\76\6\0\3\76\1\77\4\0\23\76\5\0\1\46"+
    "\14\100\1\0\1\100\5\0\1\100\6\0\23\100\7\0"+
    "\2\50\61\0\2\12\1\0\2\12\1\101\5\12\6\0"+
    "\3\12\5\0\23\12\7\0\2\12\1\0\6\12\1\102"+
    "\1\12\6\0\3\12\5\0\23\12\7\0\2\12\1\0"+
    "\10\12\6\0\3\12\5\0\2\12\1\103\20\12\7\0"+
    "\2\12\1\0\10\12\6\0\3\12\5\0\21\12\1\104"+
    "\1\12\7\0\2\12\1\0\10\12\6\0\3\12\5\0"+
    "\7\12\1\105\13\12\7\0\2\12\1\0\10\12\6\0"+
    "\3\12\5\0\10\12\1\106\12\12\7\0\2\12\1\0"+
    "\10\12\6\0\3\12\5\0\14\12\1\107\6\12\7\0"+
    "\2\12\1\0\10\12\6\0\3\12\5\0\14\12\1\110"+
    "\6\12\7\0\2\12\1\0\10\12\6\0\3\12\5\0"+
    "\17\12\1\111\3\12\7\0\2\12\1\0\10\12\6\0"+
    "\3\12\5\0\1\112\22\12\64\0\1\113\62\0\1\114"+
    "\61\0\1\115\62\0\1\116\4\0\1\46\14\117\1\0"+
    "\1\117\5\0\1\117\6\0\23\117\7\0\2\12\1\0"+
    "\3\12\1\120\4\12\6\0\3\12\5\0\23\12\7\0"+
    "\2\12\1\0\7\12\1\101\6\0\3\12\5\0\23\12"+
    "\7\0\2\12\1\0\10\12\6\0\3\12\5\0\3\12"+
    "\1\121\17\12\7\0\2\12\1\0\10\12\6\0\3\12"+
    "\5\0\4\12\1\122\16\12\7\0\2\12\1\0\10\12"+
    "\6\0\3\12\5\0\1\12\1\123\21\12\7\0\2\12"+
    "\1\0\10\12\6\0\3\12\5\0\12\12\1\124\10\12"+
    "\7\0\2\12\1\0\10\12\6\0\3\12\5\0\5\12"+
    "\1\63\15\12\7\0\2\12\1\0\6\12\1\125\1\12"+
    "\6\0\3\12\5\0\23\12\7\0\2\12\1\0\10\12"+
    "\6\0\3\12\5\0\1\126\2\12\1\127\17\12\5\0"+
    "\1\46\14\130\1\0\1\130\5\0\1\130\6\0\23\130"+
    "\7\0\2\12\1\0\10\12\6\0\3\12\5\0\4\12"+
    "\1\131\16\12\7\0\2\12\1\0\10\12\6\0\3\12"+
    "\5\0\5\12\1\132\15\12\7\0\2\12\1\0\10\12"+
    "\6\0\3\12\5\0\11\12\1\133\11\12\7\0\2\12"+
    "\1\0\10\12\6\0\3\12\5\0\10\12\1\134\12\12"+
    "\7\0\2\12\1\0\3\12\1\135\4\12\6\0\3\12"+
    "\5\0\23\12\7\0\2\12\1\0\10\12\6\0\3\12"+
    "\5\0\20\12\1\136\2\12\7\0\2\12\1\0\10\12"+
    "\6\0\3\12\5\0\10\12\1\137\12\12\5\0\1\46"+
    "\14\140\1\0\1\140\5\0\1\140\6\0\23\140\7\0"+
    "\2\12\1\0\10\12\6\0\3\12\5\0\5\12\1\141"+
    "\15\12\7\0\2\12\1\0\10\12\6\0\3\12\5\0"+
    "\10\12\1\142\12\12\7\0\2\12\1\0\10\12\6\0"+
    "\3\12\5\0\12\12\1\105\10\12\7\0\2\12\1\0"+
    "\10\12\6\0\3\12\5\0\5\12\1\143\15\12\7\0"+
    "\2\12\1\0\10\12\6\0\3\12\5\0\21\12\1\144"+
    "\1\12\7\0\2\12\1\0\10\12\6\0\3\12\5\0"+
    "\14\12\1\145\6\12\5\0\1\46\14\146\1\0\1\146"+
    "\5\0\1\146\6\0\23\146\7\0\2\12\1\0\10\12"+
    "\6\0\3\12\5\0\6\12\1\105\14\12\7\0\2\12"+
    "\1\0\10\12\6\0\3\12\5\0\20\12\1\147\2\12"+
    "\7\0\2\12\1\0\10\12\6\0\3\12\5\0\22\12"+
    "\1\150\7\0\2\12\1\0\10\12\6\0\3\12\5\0"+
    "\4\12\1\151\16\12\7\0\2\12\1\0\10\12\6\0"+
    "\3\12\5\0\12\12\1\152\10\12\5\0\1\46\14\153"+
    "\1\0\1\153\5\0\1\153\6\0\23\153\7\0\2\12"+
    "\1\154\10\12\6\0\3\12\5\0\23\12\7\0\2\12"+
    "\1\155\10\12\6\0\3\12\5\0\23\12\7\0\2\12"+
    "\1\0\10\12\6\0\3\12\5\0\5\12\1\156\15\12"+
    "\7\0\2\12\1\0\10\12\6\0\3\12\5\0\10\12"+
    "\1\157\12\12\5\0\1\46\14\160\1\0\1\160\5\0"+
    "\1\160\6\0\23\160\42\0\1\161\62\0\1\162\27\0"+
    "\2\12\1\0\10\12\6\0\3\12\5\0\10\12\1\163"+
    "\12\12\7\0\2\12\1\0\10\12\6\0\3\12\5\0"+
    "\5\12\1\164\15\12\5\0\1\46\14\165\1\0\1\165"+
    "\5\0\1\165\6\0\23\165\60\0\1\166\62\0\1\167"+
    "\11\0\2\12\1\0\10\12\6\0\3\12\5\0\20\12"+
    "\1\170\2\12\7\0\2\12\1\0\10\12\6\0\3\12"+
    "\5\0\22\12\1\171\5\0\1\46\14\172\1\0\1\172"+
    "\5\0\1\172\6\0\23\172\61\0\1\173\62\0\1\174"+
    "\10\0\2\12\1\175\10\12\6\0\3\12\5\0\23\12"+
    "\7\0\2\12\1\176\10\12\6\0\3\12\5\0\23\12"+
    "\5\0\1\46\14\177\1\0\1\177\5\0\1\177\6\0"+
    "\23\177\47\0\1\200\62\0\1\201\55\0\1\202\62\0"+
    "\1\203\25\0\1\46\14\204\1\0\1\204\5\0\1\204"+
    "\6\0\23\204\41\0\1\205\62\0\1\206\101\0\1\207"+
    "\62\0\1\210\7\0\1\46\14\211\1\0\1\211\5\0"+
    "\1\211\6\0\23\211\54\0\1\212\62\0\1\213\67\0"+
    "\1\214\62\0\1\215\6\0\1\46\14\216\1\0\1\216"+
    "\5\0\1\216\6\0\23\216\51\0\1\217\62\0\1\220"+
    "\60\0\1\221\62\0\1\222\20\0\1\46\14\223\1\0"+
    "\1\223\5\0\1\223\6\0\23\223\41\0\1\224\62\0"+
    "\1\225\26\0\1\46\14\226\1\0\1\226\5\0\1\226"+
    "\6\0\23\226\54\0\1\227\62\0\1\230\13\0\1\46"+
    "\14\231\1\0\1\231\5\0\1\231\6\0\23\231\51\0"+
    "\1\232\62\0\1\233\16\0\1\46\14\234\1\0\1\234"+
    "\5\0\1\234\6\0\23\234\5\0\1\46\14\235\1\0"+
    "\1\235\5\0\1\235\6\0\23\235\5\0\1\46\14\236"+
    "\1\0\1\236\5\0\1\236\6\0\23\236\5\0\1\46"+
    "\14\237\1\0\1\237\5\0\1\237\6\0\23\237\5\0"+
    "\1\46\14\240\1\0\1\240\5\0\1\240\6\0\23\240"+
    "\5\0\1\46\14\241\1\0\1\241\5\0\1\241\6\0"+
    "\23\241\5\0\1\46\14\242\1\0\1\242\5\0\1\242"+
    "\6\0\23\242\5\0\1\46\14\243\1\0\1\243\5\0"+
    "\1\243\6\0\23\243\5\0\1\46\14\244\1\0\1\244"+
    "\5\0\1\244\6\0\23\244\5\0\1\46\14\245\1\0"+
    "\1\245\5\0\1\245\6\0\23\245\5\0\1\46\14\246"+
    "\1\0\1\246\5\0\1\246\6\0\23\246\5\0\1\46"+
    "\14\247\1\0\1\247\5\0\1\247\6\0\23\247\5\0"+
    "\1\46\14\250\1\0\1\250\5\0\1\250\6\0\23\250"+
    "\5\0\1\46\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7191];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\14\1\5\11\12\1\1\11\4\1\1\11"+
    "\1\0\3\1\6\11\11\1\5\0\1\11\1\0\12\1"+
    "\4\11\1\0\10\1\1\0\7\1\1\0\5\1\1\0"+
    "\4\1\3\0\2\1\3\0\2\1\3\0\2\1\25\0"+
    "\2\11\11\0\2\11\15\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  BufferedWriter  bw;
  File file;
  ArrayList<String> simbolos;

  public void writeTable(String str) throws IOException{
    if (!simbolos.contains(str.split(",")[0])) {
      bw.write(str);
      bw.newLine();
      bw.flush();
      simbolos.add(str.split(",")[0]);
    }
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    try {
    file = new File("../ts.txt");
    bw = new BufferedWriter(new FileWriter(file));
    bw.write("NOMBRE,TOKEN,TIPO,VALOR,LONG");
    bw.newLine();
    bw.flush();
    simbolos = new ArrayList<>();
  } catch (IOException e) {
    e.printStackTrace();
  }
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3466) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 34: break;
          case 2: 
            { if ((Integer.valueOf(yytext()) > -32768) && (Integer.valueOf(yytext()) < 32768)) {
                                    System.out.printf("\n>>> Integer encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                    writeTable("_"+yytext()+",CTE_INT,,"+yytext()+",");
                                  }
            } 
            // fall through
          case 35: break;
          case 3: 
            { System.out.printf("\n>>> Identificador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",ID,,"+yytext()+",");
            } 
            // fall through
          case 36: break;
          case 4: 
            { System.out.printf("\n>>> Simbolo Asignacion encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 37: break;
          case 5: 
            { System.out.printf("\n>>> Simbolo Mayor encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 38: break;
          case 6: 
            { System.out.printf("\n>>> Simbolo Meno encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 39: break;
          case 7: 
            { System.out.printf("\n>>> Simbolo Punto y Coma encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 40: break;
          case 8: 
            { System.out.printf("\n>>> Simbolo Parentesis Abre encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 41: break;
          case 9: 
            { System.out.printf("\n>>> Simbolo Parentesis Cierra encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 42: break;
          case 10: 
            { System.out.printf("\n>>> Simbolo Llaves Abre encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 43: break;
          case 11: 
            { System.out.printf("\n>>> Simbolo Llaves Cierra encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 44: break;
          case 12: 
            { 
            } 
            // fall through
          case 45: break;
          case 13: 
            { System.out.printf("\n>>> String encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_STR,,"+yytext()+","+yytext().length());
            } 
            // fall through
          case 46: break;
          case 14: 
            { int indexDecimal = yytext().indexOf(".");
								    String entero = yytext().substring(0, indexDecimal);
								    String decimal = yytext().substring(indexDecimal+1,yytext().length());
								    	
								  if ( (Integer.valueOf(entero) > -32768) && (Integer.valueOf(entero) < 32768) 
								       && (Integer.valueOf(decimal) > -32768) && (Integer.valueOf(decimal) < 32768) ) {
                                  	System.out.printf("\n>>> Float encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  	writeTable("_"+yytext()+",CTE_FLOAT,,"+yytext()+",");
                                  }
            } 
            // fall through
          case 47: break;
          case 15: 
            { System.out.printf("\n>>> Simbolo Igual encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 48: break;
          case 16: 
            { System.out.printf("\n>>> Simbolo Distinto encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 49: break;
          case 17: 
            { System.out.printf("\n>>> Simbolo MenorIgual  encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 50: break;
          case 18: 
            { System.out.printf("\n>>> Simbolo MayorIgual encontrado en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 51: break;
          case 19: 
            { System.out.printf("\n>>> Simbolo AND: [%s] encontrado en linea %d, columna %d\n",yytext(), yyline, yycolumn);
            } 
            // fall through
          case 52: break;
          case 20: 
            { System.out.printf("\n>>> Simbolo OR: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);
            } 
            // fall through
          case 53: break;
          case 21: 
            { System.out.printf("\n>>> if en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 54: break;
          case 22: 
            { System.out.printf("\n>>> DISPLAY encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);yybegin(YYINITIAL);
            } 
            // fall through
          case 55: break;
          case 23: 
            { System.out.printf("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn);yybegin(DISPLAY);
            } 
            // fall through
          case 56: break;
          case 24: 
            { yybegin(COMMENTS_A); System.out.printf("\n>>> Empieza comentario A en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 57: break;
          case 25: 
            { yybegin(COMMENTS_B); System.out.printf("\n>>> Empieza comentario B en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 58: break;
          case 26: 
            { yybegin(YYINITIAL); System.out.printf("\n>>> Termina comentario A en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 59: break;
          case 27: 
            { yybegin(COMMENTS_A); System.out.printf("\n>>> Termina comentario B en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 60: break;
          case 28: 
            { System.out.printf("\n>>> Bool encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_BOOL,,"+yytext()+",");
            } 
            // fall through
          case 61: break;
          case 29: 
            { System.out.printf("\n>>> while en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 62: break;
          case 30: 
            { System.out.printf("\n>>> DECLARE en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 63: break;
          case 31: 
            { System.out.printf("\n>>> PROGRAM en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 64: break;
          case 32: 
            { System.out.printf("\n>>> ENDDECLARE en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 65: break;
          case 33: 
            { System.out.printf("\n>>> ENDPROGRAM en linea %d, columna %d\n", yyline, yycolumn);
            } 
            // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
