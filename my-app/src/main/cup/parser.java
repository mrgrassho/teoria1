
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler;

import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Integer;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\006\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\007\005\000\002" +
    "\007\007\000\002\007\007\000\002\007\013\000\002\010" +
    "\007\000\002\011\004\000\002\003\005\000\002\014\004" +
    "\000\002\014\003\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\015\006\000\002\016\005\000\002" +
    "\016\003\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\013\007\000\002\013\007\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\013\007\000\002\013\007\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\040\004\001\002\000\004\036\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\012\032\045\033\040\034\046\046\050\001\002\000" +
    "\012\042\012\043\015\044\011\045\014\001\002\000\004" +
    "\004\035\001\002\000\004\004\032\001\002\000\014\037" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\001\002\000\004" +
    "\004\027\001\002\000\004\004\021\001\002\000\014\037" +
    "\017\042\012\043\015\044\011\045\014\001\002\000\012" +
    "\032\ufff0\033\ufff0\034\ufff0\046\ufff0\001\002\000\014\037" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\001\002\000\004" +
    "\046\022\001\002\000\006\005\uffe8\007\uffe8\001\002\000" +
    "\006\005\024\007\025\001\002\000\004\046\026\001\002" +
    "\000\014\037\uffec\042\uffec\043\uffec\044\uffec\045\uffec\001" +
    "\002\000\006\005\uffe9\007\uffe9\001\002\000\004\046\022" +
    "\001\002\000\006\005\024\007\031\001\002\000\014\037" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\001\002\000\004" +
    "\046\022\001\002\000\006\005\024\007\034\001\002\000" +
    "\014\037\uffed\042\uffed\043\uffed\044\uffed\045\uffed\001\002" +
    "\000\004\046\022\001\002\000\006\005\024\007\037\001" +
    "\002\000\014\037\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\001\002\000\004\016\101\001\002\000\020\021\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\041\ufffc\046\ufffc\001\002" +
    "\000\004\007\223\001\002\000\004\007\222\001\002\000" +
    "\016\021\ufffe\032\ufffe\033\ufffe\034\ufffe\041\ufffe\046\ufffe" +
    "\001\002\000\004\047\221\001\002\000\004\016\101\001" +
    "\002\000\020\021\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\041\ufffb\046\ufffb\001\002\000\004\006\054\001\002\000" +
    "\014\032\045\033\040\034\046\041\052\046\050\001\002" +
    "\000\004\002\001\001\002\000\016\021\uffff\032\uffff\033" +
    "\uffff\034\uffff\041\uffff\046\uffff\001\002\000\016\016\061" +
    "\046\063\047\056\050\062\051\060\052\057\001\002\000" +
    "\016\007\uffcc\017\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\001\002\000\004\007\ufff8\001\002\000\004\007\ufff7\001" +
    "\002\000\032\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\017\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\001\002\000\012\016\061\046\063\050\062\051\060" +
    "\001\002\000\032\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\017\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\001\002\000\016\007\uffcb\017\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\001\002\000\016\007\uffcf\017\uffcf" +
    "\024\uffcf\025\uffcf\026\072\027\071\001\002\000\010\007" +
    "\ufff9\024\067\025\066\001\002\000\012\016\061\046\063" +
    "\050\062\051\060\001\002\000\012\016\061\046\063\050" +
    "\062\051\060\001\002\000\016\007\uffd1\017\uffd1\024\uffd1" +
    "\025\uffd1\026\072\027\071\001\002\000\012\016\061\046" +
    "\063\050\062\051\060\001\002\000\012\016\061\046\063" +
    "\050\062\051\060\001\002\000\016\007\uffcd\017\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\001\002\000\016\007\uffce" +
    "\017\uffce\024\uffce\025\uffce\026\uffce\027\uffce\001\002\000" +
    "\016\007\uffd0\017\uffd0\024\uffd0\025\uffd0\026\072\027\071" +
    "\001\002\000\010\017\077\024\067\025\066\001\002\000" +
    "\032\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\017\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\001" +
    "\002\000\014\020\207\032\045\033\040\034\046\046\050" +
    "\001\002\000\016\016\106\046\102\047\105\050\062\051" +
    "\060\052\107\001\002\000\030\010\175\011\176\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\017\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\001\002\000\016\010\117\011\120\012\122" +
    "\013\121\014\124\015\123\001\002\000\006\022\167\023" +
    "\170\001\002\000\016\010\141\011\142\012\144\013\143" +
    "\014\146\015\145\001\002\000\016\016\106\046\102\047" +
    "\105\050\062\051\060\052\107\001\002\000\006\010\110" +
    "\011\111\001\002\000\004\046\114\001\002\000\004\046" +
    "\112\001\002\000\004\017\113\001\002\000\022\017\uffd8" +
    "\020\uffd8\022\uffd8\023\uffd8\032\uffd8\033\uffd8\034\uffd8\046" +
    "\uffd8\001\002\000\004\017\115\001\002\000\022\017\uffd9" +
    "\020\uffd9\022\uffd9\023\uffd9\032\uffd9\033\uffd9\034\uffd9\046" +
    "\uffd9\001\002\000\030\010\117\011\120\012\122\013\121" +
    "\014\124\015\123\017\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\001\002\000\012\016\061\046\063\050\062\051\060" +
    "\001\002\000\012\016\061\046\063\050\062\051\060\001" +
    "\002\000\012\016\061\046\063\050\062\051\060\001\002" +
    "\000\012\016\061\046\063\050\062\051\060\001\002\000" +
    "\012\016\061\046\063\050\062\051\060\001\002\000\012" +
    "\016\061\046\063\050\062\051\060\001\002\000\004\017" +
    "\126\001\002\000\022\017\uffd3\020\uffd3\022\uffd3\023\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\046\uffd3\001\002\000\004\017" +
    "\130\001\002\000\022\017\uffd2\020\uffd2\022\uffd2\023\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\046\uffd2\001\002\000\004\017" +
    "\132\001\002\000\022\017\uffd5\020\uffd5\022\uffd5\023\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\046\uffd5\001\002\000\004\017" +
    "\134\001\002\000\022\017\uffd4\020\uffd4\022\uffd4\023\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\046\uffd4\001\002\000\004\017" +
    "\136\001\002\000\022\017\uffd6\020\uffd6\022\uffd6\023\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\046\uffd6\001\002\000\004\017" +
    "\140\001\002\000\022\017\uffd7\020\uffd7\022\uffd7\023\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\046\uffd7\001\002\000\006\046" +
    "\163\047\164\001\002\000\006\046\157\047\160\001\002" +
    "\000\004\047\155\001\002\000\004\047\153\001\002\000" +
    "\004\047\151\001\002\000\004\047\147\001\002\000\004" +
    "\017\150\001\002\000\022\017\uffe1\020\uffe1\022\uffe1\023" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\046\uffe1\001\002\000\004" +
    "\017\152\001\002\000\022\017\uffe0\020\uffe0\022\uffe0\023" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\046\uffe0\001\002\000\004" +
    "\017\154\001\002\000\022\017\uffe3\020\uffe3\022\uffe3\023" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\046\uffe3\001\002\000\004" +
    "\017\156\001\002\000\022\017\uffe2\020\uffe2\022\uffe2\023" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\046\uffe2\001\002\000\004" +
    "\017\162\001\002\000\004\017\161\001\002\000\022\017" +
    "\uffe4\020\uffe4\022\uffe4\023\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\046\uffe4\001\002\000\022\017\uffda\020\uffda\022\uffda\023" +
    "\uffda\032\uffda\033\uffda\034\uffda\046\uffda\001\002\000\004" +
    "\017\166\001\002\000\004\017\165\001\002\000\022\017" +
    "\uffe5\020\uffe5\022\uffe5\023\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\046\uffe5\001\002\000\022\017\uffdb\020\uffdb\022\uffdb\023" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\046\uffdb\001\002\000\004" +
    "\016\101\001\002\000\004\016\101\001\002\000\004\017" +
    "\172\001\002\000\022\017\uffe7\020\uffe7\022\uffe7\023\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\046\uffe7\001\002\000\004\017" +
    "\174\001\002\000\022\017\uffe6\020\uffe6\022\uffe6\023\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\046\uffe6\001\002\000\006\047" +
    "\203\052\204\001\002\000\006\047\177\052\200\001\002" +
    "\000\004\017\202\001\002\000\004\017\201\001\002\000" +
    "\022\017\uffdc\020\uffdc\022\uffdc\023\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\046\uffdc\001\002\000\022\017\uffde\020\uffde\022" +
    "\uffde\023\uffde\032\uffde\033\uffde\034\uffde\046\uffde\001\002" +
    "\000\004\017\206\001\002\000\004\017\205\001\002\000" +
    "\022\017\uffdd\020\uffdd\022\uffdd\023\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\046\uffdd\001\002\000\022\017\uffdf\020\uffdf\022" +
    "\uffdf\023\uffdf\032\uffdf\033\uffdf\034\uffdf\046\uffdf\001\002" +
    "\000\012\032\045\033\040\034\046\046\050\001\002\000" +
    "\020\021\ufff6\032\ufff6\033\ufff6\034\ufff6\035\211\041\ufff6" +
    "\046\ufff6\001\002\000\012\032\045\033\040\034\046\046" +
    "\050\001\002\000\020\021\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\041\ufff4\046\ufff4\001\002\000\014\021\214\032" +
    "\045\033\040\034\046\046\050\001\002\000\020\021\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\215\041\ufff5\046\ufff5\001" +
    "\002\000\004\020\216\001\002\000\012\032\045\033\040" +
    "\034\046\046\050\001\002\000\014\021\220\032\045\033" +
    "\040\034\046\046\050\001\002\000\020\021\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\041\ufff3\046\ufff3\001\002\000" +
    "\004\007\ufff1\001\002\000\020\021\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\041\ufffa\046\ufffa\001\002\000\020\021" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\041\ufffd\046\ufffd" +
    "\001\002\000\004\020\225\001\002\000\012\032\045\033" +
    "\040\034\046\046\050\001\002\000\014\021\227\032\045" +
    "\033\040\034\046\046\050\001\002\000\020\021\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\041\ufff2\046\ufff2\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\002\004\001\001\000\004\003\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\050" +
    "\005\043\006\041\007\040\010\046\011\042\001\001\000" +
    "\006\014\015\015\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\052\006\041\007" +
    "\040\010\046\011\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\064\020\063\021\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\075\020\063\021\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\074\021\054\001\001\000\006\020" +
    "\067\021\054\001\001\000\002\001\001\000\004\021\073" +
    "\001\001\000\004\021\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\207\006\041\007\040\010\046\011" +
    "\042\001\001\000\006\013\103\021\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\103\017\075\020\063\021\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\136\001\001\000" +
    "\004\021\134\001\001\000\004\021\132\001\001\000\004" +
    "\021\130\001\001\000\004\021\126\001\001\000\004\021" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\172" +
    "\001\001\000\004\013\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\212\005\043\006\041\007\040\010\046\011\042" +
    "\001\001\000\002\001\001\000\014\005\211\006\041\007" +
    "\040\010\046\011\042\001\001\000\002\001\001\000\014" +
    "\005\052\006\041\007\040\010\046\011\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\216\005\043" +
    "\006\041\007\040\010\046\011\042\001\001\000\014\005" +
    "\052\006\041\007\040\010\046\011\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\225\005\043\006\041" +
    "\007\040\010\046\011\042\001\001\000\014\005\052\006" +
    "\041\007\040\010\046\011\042\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	try {
		file = new File("../ts.txt");
		bw = new BufferedWriter(new FileWriter(file));
		bw.write("NOMBRE,TOKEN,TIPO,VALOR,LONG");
		bw.newLine();
		bw.flush();
		simbolos = new ArrayList<>();
	} catch (IOException e) {
		e.printStackTrace();
	}

    }


	public BufferedWriter  bw;
	public File file;
	public ArrayList<String> simbolos;
	public String resultado="";
	public String lastType;

	public static void main(String[] arg){
		/* Crea un objeto parser */
		parser parserObj = new parser();
		/* Asigna el Scanner */
		Scanner miAnalizadorLexico = new Lexer(new InputStreamReader(System.in));
		parserObj.setScanner(miAnalizadorLexico);
		try {
			parserObj.parse();
		} catch(Exception x){
			System.out.println("Error fatal.");
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	public void writeTable(String str) throws IOException{
		if (!simbolos.contains(str.split(",")[0])) {
			bw.write(str);
			bw.newLine();
			bw.flush();
			simbolos.add(str.split(",")[0]);
		}
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= PROGRAM_SECTION DECLARE_SC LISTA_SENTENCIAS ENDPROGRAM_SECTION 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
  System.out.println("Program - Regla 0");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA_ASSIGN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		System.out.println("Sentencia asignacion - Regla 3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA_IF 
            {
              Object RESULT =null;
		System.out.println("Sentencia if - Regla 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Object RESULT =null;
		System.out.println("Sentencia while - Regla 5"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA_DISPLAY PUNTO_Y_COMA 
            {
              Object RESULT =null;
		System.out.println("Sentencia DISPLAY - Regla 6"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA_ASSIGN ::= ID ASIGNACION EXPRESION 
            {
              Object RESULT =null;
		System.out.println("sentencia id asigna expresion - Regla 7"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA_ASSIGN ::= ID ASIGNACION CONST_STRING 
            {
              Object RESULT =null;
		System.out.println("sentencia id asigna constante string - Regla 8"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA_ASSIGN ::= ID ASIGNACION CONST_BOOL 
            {
              Object RESULT =null;
		System.out.println("sentencia id asigna const bool - Regla 11"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASSIGN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA_IF ::= IF CONDICION SENTENCIA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("if simple (solo una sentencia)  - Regla 12"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA_IF ::= IF CONDICION LLAVES_ABRE LISTA_SENTENCIAS LLAVES_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("if simple (lista de sentencias) - Regla 13"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA_IF ::= IF CONDICION SENTENCIA ELSE SENTENCIA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("if + else (solo una sentencia) - Regla 14"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA_IF ::= IF CONDICION LLAVES_ABRE LISTA_SENTENCIAS LLAVES_CIERRA ELSE LLAVES_ABRE LISTA_SENTENCIAS LLAVES_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("if + else (lista de sentencias) - Regla 15"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA_WHILE ::= WHILE CONDICION LLAVES_ABRE LISTA_SENTENCIAS LLAVES_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("while - Regla 16"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_DISPLAY ::= DISPLAY_FUNCTION CONST_STRING 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("DISPLAY_FUNCTION - Regla 17"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DISPLAY",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARE_SC ::= DECLARE_SECTION LISTA_DECLARE ENDDECLARE_SECTION 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("decvar Regla 14"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE_SC",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_DECLARE ::= LISTA_DECLARE DECLARACION 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_DECLARE ::= DECLARACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencias - Regla 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= TYPE_STRING DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = (String)tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= TYPE_INTEGER DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = (String)tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TYPE_FLOAT DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = (String)tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= TYPE_BOOL DOS_PUNTOS LISTA_IDS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastType = (String)tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_IDS ::= LISTA_IDS COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 writeTable(id+",ID,"+lastType+",,"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_IDS ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 writeTable(id+",ID,"+lastType+",,"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDICION ::= PARENTESIS_ABRE CONDICION OR CONDICION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDICION ::= PARENTESIS_ABRE CONDICION AND CONDICION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDICION ::= PARENTESIS_ABRE CONST_STRING IGUAL CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICION ::= PARENTESIS_ABRE CONST_STRING DISTINTO CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICION ::= PARENTESIS_ABRE CONST_STRING MAYOR CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= PARENTESIS_ABRE CONST_STRING MENOR CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= PARENTESIS_ABRE CONST_STRING MAYOR_IGUAL CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= PARENTESIS_ABRE CONST_STRING MENOR_IGUAL CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= PARENTESIS_ABRE ID IGUAL CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= PARENTESIS_ABRE ID DISTINTO CONST_STRING PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION ::= PARENTESIS_ABRE ID IGUAL CONST_BOOL PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICION ::= PARENTESIS_ABRE ID DISTINTO CONST_BOOL PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICION ::= PARENTESIS_ABRE CONST_STRING IGUAL ID PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICION ::= PARENTESIS_ABRE CONST_STRING DISTINTO ID PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICION ::= PARENTESIS_ABRE CONST_BOOL IGUAL ID PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDICION ::= PARENTESIS_ABRE CONST_BOOL DISTINTO ID PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICION ::= PARENTESIS_ABRE FACTOR IGUAL FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICION ::= PARENTESIS_ABRE FACTOR DISTINTO FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICION ::= PARENTESIS_ABRE FACTOR MAYOR FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICION ::= PARENTESIS_ABRE FACTOR MENOR FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= PARENTESIS_ABRE FACTOR MAYOR_IGUAL FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= PARENTESIS_ABRE FACTOR MENOR_IGUAL FACTOR PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		System.out.println("Condicion mayor Regla 27"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION SUMA TERMINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("E+T - Regla 33");RESULT=(Float)a+(Float)b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION RESTA TERMINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("E-T - Regla 34");RESULT=(Float)a-(Float)b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Termino Regla 35");RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TERMINO ::= TERMINO MULTIPLICAION FACTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("T*F - Regla 36");RESULT=(Float)a*(Float)b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TERMINO ::= TERMINO DIVISION FACTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("T/F - Regla 37");RESULT=(Float)a/(Float)b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Factor Regla 38");RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FACTOR ::= ID 
            {
              Object RESULT =null;
		System.out.println("Factor ID - Regla 38");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FACTOR ::= CONST_INTEGER 
            {
              Object RESULT =null;
		System.out.println("Factor CONST_INT - Regla 38");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FACTOR ::= CONST_FLOAT 
            {
              Object RESULT =null;
		System.out.println("Factor CONST_FLOAT - Regla 38");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FACTOR ::= PARENTESIS_ABRE EXPRESION PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Factor Regla 38");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
