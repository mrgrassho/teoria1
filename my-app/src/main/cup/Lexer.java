/* The following code was generated by JFlex 1.7.0 */

import java.util.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Integer;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/mr.grassho/Documents/Teoria1/teoria1/my-app/src/main/jflex/Lexico1.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENTS_A = 2;
  public static final int COMMENTS_B = 4;
  public static final int DISPLAY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\4\1\2\1\0\1\4\1\1\16\30\4\0\1\0\1\21"+
    "\1\3\1\0\1\26\1\44\1\24\1\0\1\34\1\35\1\43\1\40"+
    "\1\33\1\41\1\7\1\42\1\6\11\5\1\32\1\31\1\23\1\20"+
    "\1\22\1\45\1\0\1\53\1\63\1\70\1\46\1\67\1\61\1\60"+
    "\1\27\1\47\2\27\1\52\1\71\1\57\1\62\1\51\1\27\1\56"+
    "\1\50\1\55\4\27\1\54\1\27\4\0\1\26\1\0\1\15\3\27"+
    "\1\13\1\14\1\27\1\65\1\66\2\27\1\16\5\27\1\11\1\17"+
    "\1\10\1\12\1\27\1\64\3\27\1\36\1\25\1\37\1\0\41\30"+
    "\1\0\1\4\4\26\4\0\1\26\2\0\1\30\7\0\1\26\4\0"+
    "\1\26\5\0\21\26\1\27\5\26\1\0\31\26\1\27\5\26\1\0"+
    "\u01ca\26\4\0\14\26\16\0\5\26\7\0\1\26\1\0\1\26\21\0"+
    "\160\30\5\26\1\0\2\26\2\0\4\26\10\0\1\26\1\0\3\26"+
    "\1\0\1\26\1\0\24\26\1\0\123\26\1\0\213\26\1\0\5\30"+
    "\2\0\236\26\11\0\46\26\2\0\1\26\7\0\47\26\7\0\1\26"+
    "\1\0\55\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0\1\30"+
    "\10\0\33\26\5\0\3\26\15\0\5\30\6\0\1\26\4\0\13\30"+
    "\5\0\53\26\37\30\4\0\2\26\1\30\143\26\1\0\1\26\10\30"+
    "\1\0\6\30\2\26\2\30\1\0\4\30\2\26\12\30\3\26\2\0"+
    "\1\26\17\0\1\30\1\26\1\30\36\26\33\30\2\0\131\26\13\30"+
    "\1\26\16\0\12\30\41\26\11\30\2\26\4\0\1\26\5\0\26\26"+
    "\4\30\1\26\11\30\1\26\3\30\1\26\5\30\22\0\31\26\3\30"+
    "\104\0\1\26\1\0\13\26\67\0\33\30\1\0\4\30\66\26\3\30"+
    "\1\26\22\30\1\26\7\30\12\26\2\30\2\0\12\30\1\0\7\26"+
    "\1\0\7\26\1\0\3\30\1\0\10\26\2\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\1\26\3\0\4\26\2\0\1\30\1\26\7\30"+
    "\2\0\2\30\2\0\3\30\1\26\10\0\1\30\4\0\2\26\1\0"+
    "\3\26\2\30\2\0\12\30\4\26\7\0\1\26\5\0\3\30\1\0"+
    "\6\26\4\0\2\26\2\0\26\26\1\0\7\26\1\0\2\26\1\0"+
    "\2\26\1\0\2\26\2\0\1\30\1\0\5\30\4\0\2\30\2\0"+
    "\3\30\3\0\1\30\7\0\4\26\1\0\1\26\7\0\14\30\3\26"+
    "\1\30\13\0\3\30\1\0\11\26\1\0\3\26\1\0\26\26\1\0"+
    "\7\26\1\0\2\26\1\0\5\26\2\0\1\30\1\26\10\30\1\0"+
    "\3\30\1\0\3\30\2\0\1\26\17\0\2\26\2\30\2\0\12\30"+
    "\1\0\1\26\17\0\3\30\1\0\10\26\2\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\2\26\1\0\5\26\2\0\1\30\1\26\7\30"+
    "\2\0\2\30\2\0\3\30\10\0\2\30\4\0\2\26\1\0\3\26"+
    "\2\30\2\0\12\30\1\0\1\26\20\0\1\30\1\26\1\0\6\26"+
    "\3\0\3\26\1\0\4\26\3\0\2\26\1\0\1\26\1\0\2\26"+
    "\3\0\2\26\3\0\3\26\3\0\14\26\4\0\5\30\3\0\3\30"+
    "\1\0\4\30\2\0\1\26\6\0\1\30\16\0\12\30\11\0\1\26"+
    "\7\0\3\30\1\0\10\26\1\0\3\26\1\0\27\26\1\0\12\26"+
    "\1\0\5\26\3\0\1\26\7\30\1\0\3\30\1\0\4\30\7\0"+
    "\2\30\1\0\2\26\6\0\2\26\2\30\2\0\12\30\22\0\2\30"+
    "\1\0\10\26\1\0\3\26\1\0\27\26\1\0\12\26\1\0\5\26"+
    "\2\0\1\30\1\26\7\30\1\0\3\30\1\0\4\30\7\0\2\30"+
    "\7\0\1\26\1\0\2\26\2\30\2\0\12\30\1\0\2\26\17\0"+
    "\2\30\1\0\10\26\1\0\3\26\1\0\51\26\2\0\1\26\7\30"+
    "\1\0\3\30\1\0\4\30\1\26\10\0\1\30\10\0\2\26\2\30"+
    "\2\0\12\30\12\0\6\26\2\0\2\30\1\0\22\26\3\0\30\26"+
    "\1\0\11\26\1\0\1\26\2\0\7\26\3\0\1\30\4\0\6\30"+
    "\1\0\1\30\1\0\10\30\22\0\2\30\15\0\60\26\1\30\2\26"+
    "\7\30\4\0\10\26\10\30\1\0\12\30\47\0\2\26\1\0\1\26"+
    "\2\0\2\26\1\0\1\26\2\0\1\26\6\0\4\26\1\0\7\26"+
    "\1\0\3\26\1\0\1\26\1\0\1\26\2\0\2\26\1\0\4\26"+
    "\1\30\2\26\6\30\1\0\2\30\1\26\2\0\5\26\1\0\1\26"+
    "\1\0\6\30\2\0\12\30\2\0\4\26\40\0\1\26\27\0\2\30"+
    "\6\0\12\30\13\0\1\30\1\0\1\30\1\0\1\30\4\0\2\30"+
    "\10\26\1\0\44\26\4\0\24\30\1\0\2\30\5\26\13\30\1\0"+
    "\44\30\11\0\1\30\71\0\53\26\24\30\1\26\12\30\6\0\6\26"+
    "\4\30\4\26\3\30\1\26\3\30\2\26\7\30\3\26\4\30\15\26"+
    "\14\30\1\26\17\30\2\0\46\26\1\0\1\26\5\0\1\26\2\0"+
    "\53\26\1\0\u014d\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0"+
    "\4\26\2\0\51\26\1\0\4\26\2\0\41\26\1\0\4\26\2\0"+
    "\7\26\1\0\1\26\1\0\4\26\2\0\17\26\1\0\71\26\1\0"+
    "\4\26\2\0\103\26\2\0\3\30\40\0\20\26\20\0\125\26\14\0"+
    "\u026c\26\2\0\21\26\1\0\32\26\5\0\113\26\3\0\3\26\17\0"+
    "\15\26\1\0\4\26\3\30\13\0\22\26\3\30\13\0\22\26\2\30"+
    "\14\0\15\26\1\0\3\26\1\0\2\30\14\0\64\26\40\30\3\0"+
    "\1\26\3\0\2\26\1\30\2\0\12\30\41\0\3\30\2\0\12\30"+
    "\6\0\130\26\10\0\51\26\1\30\1\26\5\0\106\26\12\0\35\26"+
    "\3\0\14\30\4\0\14\30\12\0\12\30\36\26\2\0\5\26\13\0"+
    "\54\26\4\0\21\30\7\26\2\30\6\0\12\30\46\0\27\26\5\30"+
    "\4\0\65\26\12\30\1\0\35\30\2\0\13\30\6\0\12\30\15\0"+
    "\1\26\130\0\5\30\57\26\21\30\7\26\4\0\12\30\21\0\11\30"+
    "\14\0\3\30\36\26\15\30\2\26\12\30\54\26\16\30\14\0\44\26"+
    "\24\30\10\0\12\30\3\0\3\26\12\30\44\26\122\0\3\30\1\0"+
    "\25\30\4\26\1\30\4\26\3\30\2\26\11\0\300\26\47\30\25\0"+
    "\4\30\u0116\26\2\0\6\26\2\0\46\26\2\0\6\26\2\0\10\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\37\26\2\0\65\26"+
    "\1\0\7\26\1\0\1\26\3\0\3\26\1\0\7\26\3\0\4\26"+
    "\2\0\6\26\4\0\15\26\5\0\3\26\1\0\7\26\16\0\5\30"+
    "\32\0\5\30\20\0\2\26\23\0\1\26\13\0\5\30\5\0\6\30"+
    "\1\0\1\26\15\0\1\26\20\0\15\26\3\0\33\26\25\0\15\30"+
    "\4\0\1\30\3\0\14\30\21\0\1\26\4\0\1\26\2\0\12\26"+
    "\1\0\1\26\3\0\5\26\6\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\1\0\13\26\2\0\4\26\5\0\5\26\4\0\1\26"+
    "\21\0\51\26\u0a77\0\57\26\1\0\57\26\1\0\205\26\6\0\4\26"+
    "\3\30\2\26\14\0\46\26\1\0\1\26\5\0\1\26\2\0\70\26"+
    "\7\0\1\26\17\0\1\30\27\26\11\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\40\30\57\0\1\26\u01d5\0\3\26\31\0\11\26\6\30"+
    "\1\0\5\26\2\0\5\26\4\0\126\26\2\0\2\30\2\0\3\26"+
    "\1\0\132\26\1\0\4\26\5\0\51\26\3\0\136\26\21\0\33\26"+
    "\65\0\20\26\u0200\0\u19b6\26\112\0\u51cd\26\63\0\u048d\26\103\0\56\26"+
    "\2\0\u010d\26\3\0\20\26\12\30\2\26\24\0\57\26\1\30\4\0"+
    "\12\30\1\0\31\26\7\0\1\30\120\26\2\30\45\0\11\26\2\0"+
    "\147\26\2\0\4\26\1\0\4\26\14\0\13\26\115\0\12\26\1\30"+
    "\3\26\1\30\4\26\1\30\27\26\5\30\20\0\1\26\7\0\64\26"+
    "\14\0\2\30\62\26\21\30\13\0\12\30\6\0\22\30\6\26\3\0"+
    "\1\26\4\0\12\30\34\26\10\30\2\0\27\26\15\30\14\0\35\26"+
    "\3\0\4\30\57\26\16\30\16\0\1\26\12\30\46\0\51\26\16\30"+
    "\11\0\3\26\1\30\10\26\2\30\2\0\12\30\6\0\27\26\3\0"+
    "\1\26\1\30\4\0\60\26\1\30\1\26\3\30\2\26\2\30\5\26"+
    "\2\30\1\26\1\30\1\26\30\0\3\26\2\0\13\26\5\30\2\0"+
    "\3\26\2\30\12\0\6\26\2\0\6\26\2\0\6\26\11\0\7\26"+
    "\1\0\7\26\221\0\43\26\10\30\1\0\2\30\2\0\12\30\6\0"+
    "\u2ba4\26\14\0\27\26\4\0\61\26\u2104\0\u016e\26\2\0\152\26\46\0"+
    "\7\26\14\0\5\26\5\0\1\26\1\30\12\26\1\0\15\26\1\0"+
    "\5\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0\154\26\41\0"+
    "\u016b\26\22\0\100\26\2\0\66\26\50\0\15\26\3\0\20\30\20\0"+
    "\7\30\14\0\2\26\30\0\3\26\31\0\1\26\6\0\5\26\1\0"+
    "\207\26\2\0\1\30\4\0\1\26\13\0\12\30\7\0\32\26\4\0"+
    "\1\26\1\0\32\26\13\0\131\26\3\0\6\26\2\0\6\26\2\0"+
    "\6\26\2\0\3\26\3\0\2\26\3\0\2\26\22\0\3\30\4\0"+
    "\14\26\1\0\32\26\1\0\23\26\1\0\2\26\1\0\17\26\2\0"+
    "\16\26\42\0\173\26\105\0\65\26\210\0\1\30\202\0\35\26\3\0"+
    "\61\26\57\0\37\26\21\0\33\26\65\0\36\26\2\0\44\26\4\0"+
    "\10\26\1\0\5\26\52\0\236\26\2\0\12\30\u0356\0\6\26\2\0"+
    "\1\26\1\0\54\26\1\0\2\26\3\0\1\26\2\0\27\26\252\0"+
    "\26\26\12\0\32\26\106\0\70\26\6\0\2\26\100\0\1\26\3\30"+
    "\1\0\2\30\5\0\4\30\4\26\1\0\3\26\1\0\33\26\4\0"+
    "\3\30\4\0\1\30\40\0\35\26\203\0\66\26\12\0\26\26\12\0"+
    "\23\26\215\0\111\26\u03b7\0\3\30\65\26\17\30\37\0\12\30\20\0"+
    "\3\30\55\26\13\30\2\0\1\30\22\0\31\26\7\0\12\30\6\0"+
    "\3\30\44\26\16\30\1\0\12\30\100\0\3\30\60\26\16\30\4\26"+
    "\13\0\12\30\u04a6\0\53\26\15\30\10\0\12\30\u0936\0\u036f\26\221\0"+
    "\143\26\u0b9d\0\u042f\26\u33d1\0\u0239\26\u04c7\0\105\26\13\0\1\26\56\30"+
    "\20\0\4\30\15\26\u4060\0\2\26\u2163\0\5\30\3\0\26\30\2\0"+
    "\7\30\36\0\4\30\224\0\3\30\u01bb\0\125\26\1\0\107\26\1\0"+
    "\2\26\2\0\1\26\2\0\2\26\2\0\4\26\1\0\14\26\1\0"+
    "\1\26\1\0\7\26\1\0\101\26\1\0\4\26\2\0\10\26\1\0"+
    "\7\26\1\0\34\26\1\0\4\26\1\0\5\26\1\0\1\26\3\0"+
    "\7\26\1\0\u0154\26\2\0\31\26\1\0\31\26\1\0\37\26\1\0"+
    "\31\26\1\0\37\26\1\0\31\26\1\0\37\26\1\0\31\26\1\0"+
    "\37\26\1\0\31\26\1\0\10\26\2\0\62\30\u1600\0\4\26\1\0"+
    "\33\26\1\0\2\26\1\0\1\26\2\0\1\26\1\0\12\26\1\0"+
    "\4\26\1\0\1\26\1\0\1\26\6\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\1\0\2\26\1\0\1\26\2\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\2\26\1\0\1\26\2\0\4\26\1\0\7\26\1\0\4\26\1\0"+
    "\4\26\1\0\1\26\1\0\12\26\1\0\21\26\5\0\3\26\1\0"+
    "\5\26\1\0\21\26\u1144\0\ua6d7\26\51\0\u1035\26\13\0\336\26\u3fe2\0"+
    "\u021e\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\30\36\0\140\30\200\0\360\30\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\4\3\1\4\1\1\1\5\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\11\3\2\24"+
    "\4\1\1\25\1\0\1\26\3\3\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\0\10\3\1\35\1\3\4\0"+
    "\1\36\1\0\3\3\1\37\2\3\1\40\6\3\1\41"+
    "\1\42\1\0\1\43\1\44\5\3\1\45\3\3\1\0"+
    "\4\3\1\46\1\47\2\3\1\0\2\3\1\50\3\3"+
    "\1\0\1\51\4\3\3\0\2\3\3\0\2\3\3\0"+
    "\2\3\25\0\1\52\1\53\11\0\1\54\1\55\15\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\350\0\350\0\350\0\350\0\350\0\350"+
    "\0\350\0\350\0\u0414\0\350\0\350\0\350\0\350\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\350\0\u0692\0\u06cc\0\u0706\0\u0740\0\350\0\u077a"+
    "\0\u07b4\0\u07ee\0\u0828\0\u0862\0\350\0\350\0\350\0\350"+
    "\0\350\0\350\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u020a\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0740\0\350\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\350\0\u0c76"+
    "\0\u0cb0\0\u020a\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\350\0\350\0\u0e46\0\u020a\0\u020a\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u020a\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u020a\0\u020a\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u020a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u020a"+
    "\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512"+
    "\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2"+
    "\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\350\0\350\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\350\0\350\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\5\1\6\1\5\1\7\1\10\1\5\1\11\2\12"+
    "\1\13\1\14\3\12\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\2\12\1\5\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\7\12\1\44\1\12\1\45"+
    "\1\46\1\12\1\47\1\50\2\12\1\5\1\51\1\52"+
    "\36\5\1\53\1\54\71\5\1\55\37\5\10\56\6\5"+
    "\2\56\16\5\24\56\75\0\1\57\14\60\1\0\1\60"+
    "\5\0\1\60\16\0\24\60\5\0\2\7\1\61\71\0"+
    "\1\61\67\0\2\12\1\0\1\12\1\62\6\12\6\0"+
    "\3\12\15\0\24\12\5\0\2\12\1\0\10\12\6\0"+
    "\3\12\15\0\24\12\5\0\2\12\1\0\6\12\1\63"+
    "\1\12\6\0\3\12\15\0\24\12\5\0\2\12\1\0"+
    "\5\12\1\64\2\12\6\0\3\12\15\0\24\12\20\0"+
    "\1\65\71\0\1\66\71\0\1\67\71\0\1\70\75\0"+
    "\1\71\72\0\1\72\105\0\1\73\35\0\2\12\1\0"+
    "\10\12\6\0\3\12\15\0\1\12\1\74\17\12\1\75"+
    "\2\12\5\0\2\12\1\0\10\12\6\0\3\12\15\0"+
    "\11\12\1\76\12\12\5\0\2\12\1\0\10\12\6\0"+
    "\3\12\15\0\7\12\1\77\14\12\5\0\2\12\1\0"+
    "\10\12\6\0\3\12\15\0\10\12\1\100\13\12\5\0"+
    "\2\12\1\0\10\12\6\0\3\12\15\0\4\12\1\101"+
    "\17\12\5\0\2\12\1\0\10\12\6\0\3\12\15\0"+
    "\14\12\1\102\7\12\5\0\2\12\1\0\10\12\6\0"+
    "\3\12\15\0\17\12\1\103\4\12\5\0\2\12\1\0"+
    "\4\12\1\104\3\12\6\0\3\12\15\0\24\12\5\0"+
    "\2\12\1\0\10\12\6\0\3\12\15\0\11\12\1\105"+
    "\12\12\2\0\1\52\130\0\1\106\71\0\1\107\71\0"+
    "\1\110\35\0\2\111\1\0\10\111\6\0\3\111\1\112"+
    "\14\0\24\111\3\0\1\57\14\113\1\0\1\113\5\0"+
    "\1\113\16\0\24\113\5\0\2\61\70\0\2\12\1\0"+
    "\2\12\1\114\5\12\6\0\3\12\15\0\24\12\5\0"+
    "\2\12\1\0\7\12\1\115\6\0\3\12\15\0\24\12"+
    "\5\0\2\12\1\0\6\12\1\116\1\12\6\0\3\12"+
    "\15\0\24\12\42\0\1\117\34\0\2\12\1\0\10\12"+
    "\6\0\3\12\15\0\2\12\1\120\21\12\5\0\2\12"+
    "\1\0\10\12\6\0\3\12\15\0\22\12\1\121\1\12"+
    "\5\0\2\12\1\0\10\12\6\0\3\12\15\0\7\12"+
    "\1\122\14\12\5\0\2\12\1\0\10\12\6\0\3\12"+
    "\15\0\10\12\1\123\13\12\5\0\2\12\1\0\10\12"+
    "\6\0\3\12\15\0\14\12\1\124\7\12\5\0\2\12"+
    "\1\0\10\12\6\0\3\12\15\0\14\12\1\125\7\12"+
    "\5\0\2\12\1\0\10\12\6\0\3\12\15\0\14\12"+
    "\1\126\7\12\5\0\2\12\1\0\10\12\6\0\3\12"+
    "\15\0\20\12\1\127\3\12\5\0\2\12\1\0\10\12"+
    "\6\0\3\12\15\0\1\130\23\12\42\0\1\131\70\0"+
    "\1\132\71\0\1\117\33\0\1\57\14\133\1\0\1\133"+
    "\5\0\1\133\16\0\24\133\5\0\2\12\1\0\3\12"+
    "\1\134\4\12\6\0\3\12\15\0\24\12\5\0\2\12"+
    "\1\0\3\12\1\135\4\12\6\0\3\12\15\0\24\12"+
    "\5\0\2\12\1\0\7\12\1\114\6\0\3\12\15\0"+
    "\24\12\5\0\2\12\1\0\10\12\6\0\3\12\15\0"+
    "\3\12\1\136\20\12\5\0\2\12\1\0\10\12\6\0"+
    "\3\12\15\0\4\12\1\137\17\12\5\0\2\12\1\0"+
    "\10\12\6\0\3\12\15\0\1\12\1\140\22\12\5\0"+
    "\2\12\1\0\10\12\6\0\3\12\15\0\12\12\1\141"+
    "\11\12\5\0\2\12\1\0\10\12\6\0\3\12\15\0"+
    "\5\12\1\142\16\12\5\0\2\12\1\0\10\12\6\0"+
    "\3\12\15\0\4\12\1\143\17\12\5\0\2\12\1\0"+
    "\6\12\1\144\1\12\6\0\3\12\15\0\24\12\5\0"+
    "\2\12\1\0\10\12\6\0\3\12\15\0\1\145\2\12"+
    "\1\146\20\12\3\0\1\57\14\147\1\0\1\147\5\0"+
    "\1\147\16\0\24\147\5\0\2\12\1\0\10\12\6\0"+
    "\3\12\15\0\4\12\1\150\17\12\5\0\2\12\1\0"+
    "\10\12\6\0\3\12\15\0\5\12\1\151\16\12\5\0"+
    "\2\12\1\0\10\12\6\0\3\12\15\0\11\12\1\152"+
    "\12\12\5\0\2\12\1\0\10\12\6\0\3\12\15\0"+
    "\10\12\1\153\13\12\5\0\2\12\1\0\10\12\6\0"+
    "\3\12\15\0\7\12\1\154\14\12\5\0\2\12\1\0"+
    "\3\12\1\155\4\12\6\0\3\12\15\0\24\12\5\0"+
    "\2\12\1\0\10\12\6\0\3\12\15\0\21\12\1\156"+
    "\2\12\5\0\2\12\1\0\10\12\6\0\3\12\15\0"+
    "\10\12\1\157\13\12\3\0\1\57\14\160\1\0\1\160"+
    "\5\0\1\160\16\0\24\160\5\0\2\12\1\0\10\12"+
    "\6\0\3\12\15\0\5\12\1\161\16\12\5\0\2\12"+
    "\1\0\10\12\6\0\3\12\15\0\10\12\1\162\13\12"+
    "\5\0\2\12\1\0\10\12\6\0\3\12\15\0\12\12"+
    "\1\163\11\12\5\0\2\12\1\0\10\12\6\0\3\12"+
    "\15\0\5\12\1\164\16\12\5\0\2\12\1\0\10\12"+
    "\6\0\3\12\15\0\22\12\1\165\1\12\5\0\2\12"+
    "\1\0\10\12\6\0\3\12\15\0\14\12\1\166\7\12"+
    "\3\0\1\57\14\167\1\0\1\167\5\0\1\167\16\0"+
    "\24\167\5\0\2\12\1\0\10\12\6\0\3\12\15\0"+
    "\6\12\1\170\15\12\5\0\2\12\1\0\10\12\6\0"+
    "\3\12\15\0\21\12\1\171\2\12\5\0\2\12\1\0"+
    "\10\12\6\0\3\12\15\0\23\12\1\172\5\0\2\12"+
    "\1\0\10\12\6\0\3\12\15\0\4\12\1\173\17\12"+
    "\5\0\2\12\1\0\10\12\6\0\3\12\15\0\12\12"+
    "\1\174\11\12\3\0\1\57\14\175\1\0\1\175\5\0"+
    "\1\175\16\0\24\175\5\0\2\12\1\176\10\12\6\0"+
    "\3\12\15\0\24\12\5\0\2\12\1\177\10\12\6\0"+
    "\3\12\15\0\24\12\5\0\2\12\1\0\10\12\6\0"+
    "\3\12\15\0\5\12\1\200\16\12\5\0\2\12\1\0"+
    "\10\12\6\0\3\12\15\0\10\12\1\201\13\12\3\0"+
    "\1\57\14\202\1\0\1\202\5\0\1\202\16\0\24\202"+
    "\50\0\1\203\71\0\1\204\26\0\2\12\1\0\10\12"+
    "\6\0\3\12\15\0\10\12\1\205\13\12\5\0\2\12"+
    "\1\0\10\12\6\0\3\12\15\0\5\12\1\206\16\12"+
    "\3\0\1\57\14\207\1\0\1\207\5\0\1\207\16\0"+
    "\24\207\67\0\1\210\71\0\1\211\7\0\2\12\1\0"+
    "\10\12\6\0\3\12\15\0\21\12\1\212\2\12\5\0"+
    "\2\12\1\0\10\12\6\0\3\12\15\0\23\12\1\213"+
    "\3\0\1\57\14\214\1\0\1\214\5\0\1\214\16\0"+
    "\24\214\70\0\1\215\71\0\1\216\6\0\2\12\1\217"+
    "\10\12\6\0\3\12\15\0\24\12\5\0\2\12\1\220"+
    "\10\12\6\0\3\12\15\0\24\12\3\0\1\57\14\221"+
    "\1\0\1\221\5\0\1\221\16\0\24\221\55\0\1\222"+
    "\71\0\1\223\64\0\1\224\71\0\1\225\24\0\1\57"+
    "\14\226\1\0\1\226\5\0\1\226\16\0\24\226\47\0"+
    "\1\227\71\0\1\230\111\0\1\231\71\0\1\232\5\0"+
    "\1\57\14\233\1\0\1\233\5\0\1\233\16\0\24\233"+
    "\62\0\1\234\71\0\1\235\77\0\1\236\71\0\1\237"+
    "\4\0\1\57\14\240\1\0\1\240\5\0\1\240\16\0"+
    "\24\240\57\0\1\241\71\0\1\242\67\0\1\243\71\0"+
    "\1\244\17\0\1\57\14\245\1\0\1\245\5\0\1\245"+
    "\16\0\24\245\47\0\1\246\71\0\1\247\25\0\1\57"+
    "\14\250\1\0\1\250\5\0\1\250\16\0\24\250\62\0"+
    "\1\251\71\0\1\252\12\0\1\57\14\253\1\0\1\253"+
    "\5\0\1\253\16\0\24\253\57\0\1\254\71\0\1\255"+
    "\15\0\1\57\14\256\1\0\1\256\5\0\1\256\16\0"+
    "\24\256\3\0\1\57\14\257\1\0\1\257\5\0\1\257"+
    "\16\0\24\257\3\0\1\57\14\260\1\0\1\260\5\0"+
    "\1\260\16\0\24\260\3\0\1\57\14\261\1\0\1\261"+
    "\5\0\1\261\16\0\24\261\3\0\1\57\14\262\1\0"+
    "\1\262\5\0\1\262\16\0\24\262\3\0\1\57\14\263"+
    "\1\0\1\263\5\0\1\263\16\0\24\263\3\0\1\57"+
    "\14\264\1\0\1\264\5\0\1\264\16\0\24\264\3\0"+
    "\1\57\14\265\1\0\1\265\5\0\1\265\16\0\24\265"+
    "\3\0\1\57\14\266\1\0\1\266\5\0\1\266\16\0"+
    "\24\266\3\0\1\57\14\267\1\0\1\267\5\0\1\267"+
    "\16\0\24\267\3\0\1\57\14\270\1\0\1\270\5\0"+
    "\1\270\16\0\24\270\3\0\1\57\14\271\1\0\1\271"+
    "\5\0\1\271\16\0\24\271\3\0\1\57\14\272\1\0"+
    "\1\272\5\0\1\272\16\0\24\272\3\0\1\57\66\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\15\1\10\11\1\1\4\11\12\1\1\11"+
    "\4\1\1\11\1\0\4\1\6\11\1\0\12\1\4\0"+
    "\1\11\1\0\3\1\1\11\11\1\2\11\1\0\13\1"+
    "\1\0\10\1\1\0\6\1\1\0\5\1\3\0\2\1"+
    "\3\0\2\1\3\0\2\1\25\0\2\11\11\0\2\11"+
    "\15\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  BufferedWriter  bw;
  File file;
  ArrayList<String> simbolos;

  public void writeTable(String str) throws IOException{
    if (!simbolos.contains(str.split(",")[0])) {
      bw.write(str);
      bw.newLine();
      bw.flush();
      simbolos.add(str.split(",")[0]);
    }
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    try {
    file = new File("../ts.txt");
    bw = new BufferedWriter(new FileWriter(file));
    bw.write("NOMBRE,TOKEN,TIPO,VALOR,LONG");
    bw.newLine();
    bw.flush();
    simbolos = new ArrayList<>();
  } catch (IOException e) {
    e.printStackTrace();
  }
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2882) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Caracter no permitido: <" + yytext() + "> en la linea " + yyline);
            } 
            // fall through
          case 46: break;
          case 2: 
            { if ((Integer.valueOf(yytext()) > -32768) && (Integer.valueOf(yytext()) < 32768)) {
                                    System.out.printf("\n>>> Integer encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                    writeTable("_"+yytext()+",CTE_INT,,"+yytext()+",");
                                    return new Symbol(sym.CONST_INTEGER, yychar, yyline);
                                  }
            } 
            // fall through
          case 47: break;
          case 3: 
            { System.out.printf("\n>>> Identificador encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  return new Symbol(sym.ID, yychar, yyline);
            } 
            // fall through
          case 48: break;
          case 4: 
            { System.out.printf("\n>>> Simbolo Asignacion encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.ASIGNACION, yychar, yyline);
            } 
            // fall through
          case 49: break;
          case 5: 
            { System.out.printf("\n>>> Simbolo Mayor encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.MAYOR, yychar, yyline);
            } 
            // fall through
          case 50: break;
          case 6: 
            { System.out.printf("\n>>> Simbolo Menor encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.MENOR, yychar, yyline);
            } 
            // fall through
          case 51: break;
          case 7: 
            { System.out.printf("\n>>> Simbolo Punto y Coma encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.PUNTO_Y_COMA, yychar, yyline);
            } 
            // fall through
          case 52: break;
          case 8: 
            { System.out.printf("\n>>> Simbolo Dos Puntos encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.DOS_PUNTOS, yychar, yyline);
            } 
            // fall through
          case 53: break;
          case 9: 
            { System.out.printf("\n>>> Simbolo coma encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.COMA, yychar, yyline);
            } 
            // fall through
          case 54: break;
          case 10: 
            { System.out.printf("\n>>> Simbolo Parentesis Abre encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.PARENTESIS_ABRE, yychar, yyline);
            } 
            // fall through
          case 55: break;
          case 11: 
            { System.out.printf("\n>>> Simbolo Parentesis Cierra encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.PARENTESIS_CIERRA, yychar, yyline);
            } 
            // fall through
          case 56: break;
          case 12: 
            { System.out.printf("\n>>> Simbolo Llaves Abre encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.LLAVES_ABRE, yychar, yyline);
            } 
            // fall through
          case 57: break;
          case 13: 
            { System.out.printf("\n>>> Simbolo Llaves Cierra encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.LLAVE_CIERRA, yychar, yyline);
            } 
            // fall through
          case 58: break;
          case 14: 
            { System.out.printf("\n>>> Simbolo Suma: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.SUMA, yychar, yyline);
            } 
            // fall through
          case 59: break;
          case 15: 
            { System.out.printf("\n>>> Simbolo Resta: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.RESTA, yychar, yyline);
            } 
            // fall through
          case 60: break;
          case 16: 
            { System.out.printf("\n>>> Simbolo Division: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.DIVISION, yychar, yyline);
            } 
            // fall through
          case 61: break;
          case 17: 
            { System.out.printf("\n>>> Simbolo Multiplicacion: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.MULTIPLICAION, yychar, yyline);
            } 
            // fall through
          case 62: break;
          case 18: 
            { System.out.printf("\n>>> Simbolo Modulo: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.MODULO, yychar, yyline);
            } 
            // fall through
          case 63: break;
          case 19: 
            { System.out.printf("\n>>> Simbolo IF Unario: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn);return new Symbol(sym.IF_UNARIO, yychar, yyline);
            } 
            // fall through
          case 64: break;
          case 20: 
            { 
            } 
            // fall through
          case 65: break;
          case 21: 
            { System.out.printf("\n>>> String encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_STR,,"+yytext()+","+yytext().length());
                                  return new Symbol(sym.CONST_STRING, yychar, yyline);
            } 
            // fall through
          case 66: break;
          case 22: 
            { /* real de 32 bits : 16 parte entera y 16 parte decimal*/
									                int indexDecimal = yytext().indexOf(".");
								                  String entero = yytext().substring(0, indexDecimal);
								                  String decimal = yytext().substring(indexDecimal+1,yytext().length());

                								  if ( (Integer.valueOf(entero) > -32768) && (Integer.valueOf(entero) < 32768)
                								       && (Integer.valueOf(decimal) > -32768) && (Integer.valueOf(decimal) < 32768) ) {
                                          System.out.printf("\n>>> Float encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                          writeTable("_"+yytext()+",CTE_FLOAT,,"+yytext()+",");
                                          return new Symbol(sym.CONST_FLOAT, yychar, yyline);
                                  }
            } 
            // fall through
          case 67: break;
          case 23: 
            { System.out.printf("\n>>> Simbolo Igual encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.IGUAL, yychar, yyline);
            } 
            // fall through
          case 68: break;
          case 24: 
            { System.out.printf("\n>>> Simbolo Distinto encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.DISTINTO, yychar, yyline);
            } 
            // fall through
          case 69: break;
          case 25: 
            { System.out.printf("\n>>> Simbolo MenorIgual  encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.MENOR_IGUAL, yychar, yyline);
            } 
            // fall through
          case 70: break;
          case 26: 
            { System.out.printf("\n>>> Simbolo MayorIgual encontrado en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.MAYOR_IGUAL, yychar, yyline);
            } 
            // fall through
          case 71: break;
          case 27: 
            { System.out.printf("\n>>> Simbolo AND: [%s] encontrado en linea %d, columna %d\n",yytext(), yyline, yycolumn); return new Symbol(sym.AND, yychar, yyline);
            } 
            // fall through
          case 72: break;
          case 28: 
            { System.out.printf("\n>>> Simbolo OR: [%s] encontrado en linea %d, columna %d\n",yytext() , yyline, yycolumn); return new Symbol(sym.OR, yychar, yyline);
            } 
            // fall through
          case 73: break;
          case 29: 
            { System.out.printf("\n>>> if en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.IF, yychar, yyline);
            } 
            // fall through
          case 74: break;
          case 30: 
            { System.out.printf("\n>>> DISPLAY encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);yybegin(YYINITIAL);
            } 
            // fall through
          case 75: break;
          case 31: 
            { yybegin(COMMENTS_A);
            } 
            // fall through
          case 76: break;
          case 32: 
            { System.out.printf("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.TYPE_INT, yychar, yyline);
            } 
            // fall through
          case 77: break;
          case 33: 
            { yybegin(COMMENTS_B);
            } 
            // fall through
          case 78: break;
          case 34: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 79: break;
          case 35: 
            { System.out.printf("\n>>> Bool encontrado: [%s] en linea %d, columna %d\n", yytext(), yyline, yycolumn);
                                  writeTable("_"+yytext()+",CTE_BOOL,,"+yytext()+",");
                                  return new Symbol(sym.CONST_BOOL, yychar, yyline);
            } 
            // fall through
          case 80: break;
          case 36: 
            { System.out.printf("\n>>> else en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.ELSE, yychar, yyline);
            } 
            // fall through
          case 81: break;
          case 37: 
            { System.out.printf("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.TYPE_BOOL, yychar, yyline);
            } 
            // fall through
          case 82: break;
          case 38: 
            { System.out.printf("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.TYPE_FLOAT, yychar, yyline);
            } 
            // fall through
          case 83: break;
          case 39: 
            { System.out.printf("\n>>> while en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.WHILE, yychar, yyline);
            } 
            // fall through
          case 84: break;
          case 40: 
            { System.out.printf("\n>>> Funcion consta en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.TYPE_STRING, yychar, yyline);
            } 
            // fall through
          case 85: break;
          case 41: 
            { System.out.printf("\n>>> Funcion encontrada en linea %d, columna %d\n", yyline, yycolumn);yybegin(DISPLAY);return new Symbol(sym.DISPLAY_FUNCTION, yychar, yyline);
            } 
            // fall through
          case 86: break;
          case 42: 
            { System.out.printf("\n>>> DECLARE en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.DECLARE_SECTION, yychar, yyline);
            } 
            // fall through
          case 87: break;
          case 43: 
            { System.out.printf("\n>>> PROGRAM en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.PROGRAM_SECTION, yychar, yyline);
            } 
            // fall through
          case 88: break;
          case 44: 
            { System.out.printf("\n>>> ENDDECLARE en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.ENDDECLARE_SECTION, yychar, yyline);
            } 
            // fall through
          case 89: break;
          case 45: 
            { System.out.printf("\n>>> ENDPROGRAM en linea %d, columna %d\n", yyline, yycolumn); return new Symbol(sym.ENDPROGRAM_SECTION, yychar, yyline);
            } 
            // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
